
template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCPoolManager : cocos2d::CCPoolManager, ModifierBase {
    $CCPoolManager(const $CCPoolManager& c) : CCPoolManager(c) {}
    $CCPoolManager() : $CCPoolManager(*this) {}
    ~$CCPoolManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCPoolManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType402 = temp_name_find_better::ret402(CCPoolManager::*)() ;
		constexpr auto baseAddress402 = (baseType402)(&CCPoolManager::pop);
		using derivedType402 = temp_name_find_better::ret402(D<baseAddress402, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress402 = (derivedType402)(&D<baseAddress402, UUID>::pop);
        if (baseAddress402 != derivedAddress402) {
        	Interface::get()->logInfo("Adding hook at function CCPoolManager::pop", Severity::Debug);
            Interface::get()->addHook("CCPoolManager::pop", (void*)temp_name_find_better::address402(), (void*)addresser::getNonVirtual(derivedAddress402));
        }

		using baseType403 = temp_name_find_better::ret403(*)();
		constexpr auto baseAddress403 = (baseType403)(&CCPoolManager::sharedPoolManager);
		using derivedType403 = temp_name_find_better::ret403(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress403 = (derivedType403)(&D<baseAddress403, UUID>::sharedPoolManager);
        if (baseAddress403 != derivedAddress403) {
        	Interface::get()->logInfo("Adding hook at function CCPoolManager::sharedPoolManager", Severity::Debug);
            Interface::get()->addHook("CCPoolManager::sharedPoolManager", (void*)temp_name_find_better::address403(), (void*)addresser::getNonVirtual(derivedAddress403));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PlayerObject : PlayerObject, ModifierBase {
    $PlayerObject(const $PlayerObject& c) : PlayerObject(c) {}
    $PlayerObject() : $PlayerObject(*this) {}
    ~$PlayerObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PlayerObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1829 = temp_name_find_better::ret1829(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1829 = (baseType1829)(&PlayerObject::setVisible);
		using derivedType1829 = temp_name_find_better::ret1829(D<baseAddress1829, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1829 = (derivedType1829)(&D<baseAddress1829, UUID>::setVisible);
        if (baseAddress1829 != derivedAddress1829) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::setVisible", Severity::Debug);
            Interface::get()->addHook("PlayerObject::setVisible", (void*)temp_name_find_better::address1829(), (void*)addresser::getVirtual(derivedAddress1829));
        }

    	using baseType1833 = temp_name_find_better::ret1833(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1833 = (baseType1833)(&PlayerObject::setFlipX);
		using derivedType1833 = temp_name_find_better::ret1833(D<baseAddress1833, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1833 = (derivedType1833)(&D<baseAddress1833, UUID>::setFlipX);
        if (baseAddress1833 != derivedAddress1833) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::setFlipX", Severity::Debug);
            Interface::get()->addHook("PlayerObject::setFlipX", (void*)temp_name_find_better::address1833(), (void*)addresser::getVirtual(derivedAddress1833));
        }

    	using baseType1834 = temp_name_find_better::ret1834(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1834 = (baseType1834)(&PlayerObject::setFlipY);
		using derivedType1834 = temp_name_find_better::ret1834(D<baseAddress1834, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1834 = (derivedType1834)(&D<baseAddress1834, UUID>::setFlipY);
        if (baseAddress1834 != derivedAddress1834) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::setFlipY", Severity::Debug);
            Interface::get()->addHook("PlayerObject::setFlipY", (void*)temp_name_find_better::address1834(), (void*)addresser::getVirtual(derivedAddress1834));
        }

    	using baseType1835 = temp_name_find_better::ret1835(PlayerObject::*)() ;
		constexpr auto baseAddress1835 = (baseType1835)(&PlayerObject::resetObject);
		using derivedType1835 = temp_name_find_better::ret1835(D<baseAddress1835, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1835 = (derivedType1835)(&D<baseAddress1835, UUID>::resetObject);
        if (baseAddress1835 != derivedAddress1835) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::resetObject", Severity::Debug);
            Interface::get()->addHook("PlayerObject::resetObject", (void*)temp_name_find_better::address1835(), (void*)addresser::getVirtual(derivedAddress1835));
        }

    	using baseType1836 = temp_name_find_better::ret1836(PlayerObject::*)() ;
		constexpr auto baseAddress1836 = (baseType1836)(&PlayerObject::getRealPosition);
		using derivedType1836 = temp_name_find_better::ret1836(D<baseAddress1836, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1836 = (derivedType1836)(&D<baseAddress1836, UUID>::getRealPosition);
        if (baseAddress1836 != derivedAddress1836) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::getRealPosition", Severity::Debug);
            Interface::get()->addHook("PlayerObject::getRealPosition", (void*)temp_name_find_better::address1836(), (void*)addresser::getVirtual(derivedAddress1836));
        }

    	using baseType1837 = temp_name_find_better::ret1837(PlayerObject::*)() ;
		constexpr auto baseAddress1837 = (baseType1837)(&PlayerObject::getOrientedBox);
		using derivedType1837 = temp_name_find_better::ret1837(D<baseAddress1837, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1837 = (derivedType1837)(&D<baseAddress1837, UUID>::getOrientedBox);
        if (baseAddress1837 != derivedAddress1837) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::getOrientedBox", Severity::Debug);
            Interface::get()->addHook("PlayerObject::getOrientedBox", (void*)temp_name_find_better::address1837(), (void*)addresser::getVirtual(derivedAddress1837));
        }

    	using baseType1839 = temp_name_find_better::ret1839(PlayerObject::*)() ;
		constexpr auto baseAddress1839 = (baseType1839)(&PlayerObject::activateStreak);
		using derivedType1839 = temp_name_find_better::ret1839(D<baseAddress1839, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1839 = (derivedType1839)(&D<baseAddress1839, UUID>::activateStreak);
        if (baseAddress1839 != derivedAddress1839) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::activateStreak", Severity::Debug);
            Interface::get()->addHook("PlayerObject::activateStreak", (void*)temp_name_find_better::address1839(), (void*)addresser::getNonVirtual(derivedAddress1839));
        }

    	using baseType1854 = temp_name_find_better::ret1854(PlayerObject::*)(float) ;
		constexpr auto baseAddress1854 = (baseType1854)(&PlayerObject::fadeOutStreak2);
		using derivedType1854 = temp_name_find_better::ret1854(D<baseAddress1854, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1854 = (derivedType1854)(&D<baseAddress1854, UUID>::fadeOutStreak2);
        if (baseAddress1854 != derivedAddress1854) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::fadeOutStreak2", Severity::Debug);
            Interface::get()->addHook("PlayerObject::fadeOutStreak2", (void*)temp_name_find_better::address1854(), (void*)addresser::getNonVirtual(derivedAddress1854));
        }

    	using baseType1856 = temp_name_find_better::ret1856(PlayerObject::*)(bool, bool) ;
		constexpr auto baseAddress1856 = (baseType1856)(&PlayerObject::flipGravity);
		using derivedType1856 = temp_name_find_better::ret1856(D<baseAddress1856, UUID>::*)(bool, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1856 = (derivedType1856)(&D<baseAddress1856, UUID>::flipGravity);
        if (baseAddress1856 != derivedAddress1856) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::flipGravity", Severity::Debug);
            Interface::get()->addHook("PlayerObject::flipGravity", (void*)temp_name_find_better::address1856(), (void*)addresser::getNonVirtual(derivedAddress1856));
        }

    	using baseType1866 = temp_name_find_better::ret1866(PlayerObject::*)() ;
		constexpr auto baseAddress1866 = (baseType1866)(&PlayerObject::incrementJumps);
		using derivedType1866 = temp_name_find_better::ret1866(D<baseAddress1866, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1866 = (derivedType1866)(&D<baseAddress1866, UUID>::incrementJumps);
        if (baseAddress1866 != derivedAddress1866) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::incrementJumps", Severity::Debug);
            Interface::get()->addHook("PlayerObject::incrementJumps", (void*)temp_name_find_better::address1866(), (void*)addresser::getNonVirtual(derivedAddress1866));
        }

    	using baseType1881 = temp_name_find_better::ret1881(PlayerObject::*)() ;
		constexpr auto baseAddress1881 = (baseType1881)(&PlayerObject::playBurstEffect);
		using derivedType1881 = temp_name_find_better::ret1881(D<baseAddress1881, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1881 = (derivedType1881)(&D<baseAddress1881, UUID>::playBurstEffect);
        if (baseAddress1881 != derivedAddress1881) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::playBurstEffect", Severity::Debug);
            Interface::get()->addHook("PlayerObject::playBurstEffect", (void*)temp_name_find_better::address1881(), (void*)addresser::getNonVirtual(derivedAddress1881));
        }

    	using baseType1882 = temp_name_find_better::ret1882(PlayerObject::*)() ;
		constexpr auto baseAddress1882 = (baseType1882)(&PlayerObject::playDeathEffect);
		using derivedType1882 = temp_name_find_better::ret1882(D<baseAddress1882, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1882 = (derivedType1882)(&D<baseAddress1882, UUID>::playDeathEffect);
        if (baseAddress1882 != derivedAddress1882) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::playDeathEffect", Severity::Debug);
            Interface::get()->addHook("PlayerObject::playDeathEffect", (void*)temp_name_find_better::address1882(), (void*)addresser::getNonVirtual(derivedAddress1882));
        }

    	using baseType1884 = temp_name_find_better::ret1884(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1884 = (baseType1884)(&PlayerObject::playerDestroyed);
		using derivedType1884 = temp_name_find_better::ret1884(D<baseAddress1884, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1884 = (derivedType1884)(&D<baseAddress1884, UUID>::playerDestroyed);
        if (baseAddress1884 != derivedAddress1884) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::playerDestroyed", Severity::Debug);
            Interface::get()->addHook("PlayerObject::playerDestroyed", (void*)temp_name_find_better::address1884(), (void*)addresser::getNonVirtual(derivedAddress1884));
        }

    	using baseType1885 = temp_name_find_better::ret1885(PlayerObject::*)() ;
		constexpr auto baseAddress1885 = (baseType1885)(&PlayerObject::playerIsFalling);
		using derivedType1885 = temp_name_find_better::ret1885(D<baseAddress1885, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1885 = (derivedType1885)(&D<baseAddress1885, UUID>::playerIsFalling);
        if (baseAddress1885 != derivedAddress1885) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::playerIsFalling", Severity::Debug);
            Interface::get()->addHook("PlayerObject::playerIsFalling", (void*)temp_name_find_better::address1885(), (void*)addresser::getNonVirtual(derivedAddress1885));
        }

    	using baseType1892 = temp_name_find_better::ret1892(PlayerObject::*)(int) ;
		constexpr auto baseAddress1892 = (baseType1892)(&PlayerObject::pushButton);
		using derivedType1892 = temp_name_find_better::ret1892(D<baseAddress1892, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1892 = (derivedType1892)(&D<baseAddress1892, UUID>::pushButton);
        if (baseAddress1892 != derivedAddress1892) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::pushButton", Severity::Debug);
            Interface::get()->addHook("PlayerObject::pushButton", (void*)temp_name_find_better::address1892(), (void*)addresser::getNonVirtual(derivedAddress1892));
        }

    	using baseType1895 = temp_name_find_better::ret1895(PlayerObject::*)(int) ;
		constexpr auto baseAddress1895 = (baseType1895)(&PlayerObject::releaseButton);
		using derivedType1895 = temp_name_find_better::ret1895(D<baseAddress1895, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1895 = (derivedType1895)(&D<baseAddress1895, UUID>::releaseButton);
        if (baseAddress1895 != derivedAddress1895) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::releaseButton", Severity::Debug);
            Interface::get()->addHook("PlayerObject::releaseButton", (void*)temp_name_find_better::address1895(), (void*)addresser::getNonVirtual(derivedAddress1895));
        }

    	using baseType1903 = temp_name_find_better::ret1903(PlayerObject::*)(GameObject*) ;
		constexpr auto baseAddress1903 = (baseType1903)(&PlayerObject::ringJump);
		using derivedType1903 = temp_name_find_better::ret1903(D<baseAddress1903, UUID>::*)(GameObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1903 = (derivedType1903)(&D<baseAddress1903, UUID>::ringJump);
        if (baseAddress1903 != derivedAddress1903) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::ringJump", Severity::Debug);
            Interface::get()->addHook("PlayerObject::ringJump", (void*)temp_name_find_better::address1903(), (void*)addresser::getNonVirtual(derivedAddress1903));
        }

    	using baseType1906 = temp_name_find_better::ret1906(PlayerObject::*)() ;
		constexpr auto baseAddress1906 = (baseType1906)(&PlayerObject::runNormalRotation);
		using derivedType1906 = temp_name_find_better::ret1906(D<baseAddress1906, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1906 = (derivedType1906)(&D<baseAddress1906, UUID>::runNormalRotation);
        if (baseAddress1906 != derivedAddress1906) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::runNormalRotation", Severity::Debug);
            Interface::get()->addHook("PlayerObject::runNormalRotation", (void*)temp_name_find_better::address1906(), (void*)addresser::getNonVirtual(derivedAddress1906));
        }

    	using baseType1920 = temp_name_find_better::ret1920(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1920 = (baseType1920)(&PlayerObject::spiderTestJump);
		using derivedType1920 = temp_name_find_better::ret1920(D<baseAddress1920, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1920 = (derivedType1920)(&D<baseAddress1920, UUID>::spiderTestJump);
        if (baseAddress1920 != derivedAddress1920) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::spiderTestJump", Severity::Debug);
            Interface::get()->addHook("PlayerObject::spiderTestJump", (void*)temp_name_find_better::address1920(), (void*)addresser::getNonVirtual(derivedAddress1920));
        }

    	using baseType1928 = temp_name_find_better::ret1928(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1928 = (baseType1928)(&PlayerObject::toggleBirdMode);
		using derivedType1928 = temp_name_find_better::ret1928(D<baseAddress1928, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1928 = (derivedType1928)(&D<baseAddress1928, UUID>::toggleBirdMode);
        if (baseAddress1928 != derivedAddress1928) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleBirdMode", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleBirdMode", (void*)temp_name_find_better::address1928(), (void*)addresser::getNonVirtual(derivedAddress1928));
        }

    	using baseType1929 = temp_name_find_better::ret1929(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1929 = (baseType1929)(&PlayerObject::toggleDartMode);
		using derivedType1929 = temp_name_find_better::ret1929(D<baseAddress1929, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1929 = (derivedType1929)(&D<baseAddress1929, UUID>::toggleDartMode);
        if (baseAddress1929 != derivedAddress1929) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleDartMode", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleDartMode", (void*)temp_name_find_better::address1929(), (void*)addresser::getNonVirtual(derivedAddress1929));
        }

    	using baseType1930 = temp_name_find_better::ret1930(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1930 = (baseType1930)(&PlayerObject::toggleFlyMode);
		using derivedType1930 = temp_name_find_better::ret1930(D<baseAddress1930, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1930 = (derivedType1930)(&D<baseAddress1930, UUID>::toggleFlyMode);
        if (baseAddress1930 != derivedAddress1930) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleFlyMode", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleFlyMode", (void*)temp_name_find_better::address1930(), (void*)addresser::getNonVirtual(derivedAddress1930));
        }

    	using baseType1931 = temp_name_find_better::ret1931(PlayerObject::*)(GhostType) ;
		constexpr auto baseAddress1931 = (baseType1931)(&PlayerObject::toggleGhostEffect);
		using derivedType1931 = temp_name_find_better::ret1931(D<baseAddress1931, UUID>::*)(GhostType) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1931 = (derivedType1931)(&D<baseAddress1931, UUID>::toggleGhostEffect);
        if (baseAddress1931 != derivedAddress1931) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleGhostEffect", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleGhostEffect", (void*)temp_name_find_better::address1931(), (void*)addresser::getNonVirtual(derivedAddress1931));
        }

    	using baseType1932 = temp_name_find_better::ret1932(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1932 = (baseType1932)(&PlayerObject::togglePlayerScale);
		using derivedType1932 = temp_name_find_better::ret1932(D<baseAddress1932, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1932 = (derivedType1932)(&D<baseAddress1932, UUID>::togglePlayerScale);
        if (baseAddress1932 != derivedAddress1932) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::togglePlayerScale", Severity::Debug);
            Interface::get()->addHook("PlayerObject::togglePlayerScale", (void*)temp_name_find_better::address1932(), (void*)addresser::getNonVirtual(derivedAddress1932));
        }

    	using baseType1933 = temp_name_find_better::ret1933(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1933 = (baseType1933)(&PlayerObject::toggleRobotMode);
		using derivedType1933 = temp_name_find_better::ret1933(D<baseAddress1933, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1933 = (derivedType1933)(&D<baseAddress1933, UUID>::toggleRobotMode);
        if (baseAddress1933 != derivedAddress1933) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleRobotMode", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleRobotMode", (void*)temp_name_find_better::address1933(), (void*)addresser::getNonVirtual(derivedAddress1933));
        }

    	using baseType1934 = temp_name_find_better::ret1934(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1934 = (baseType1934)(&PlayerObject::toggleRollMode);
		using derivedType1934 = temp_name_find_better::ret1934(D<baseAddress1934, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1934 = (derivedType1934)(&D<baseAddress1934, UUID>::toggleRollMode);
        if (baseAddress1934 != derivedAddress1934) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleRollMode", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleRollMode", (void*)temp_name_find_better::address1934(), (void*)addresser::getNonVirtual(derivedAddress1934));
        }

    	using baseType1935 = temp_name_find_better::ret1935(PlayerObject::*)(bool) ;
		constexpr auto baseAddress1935 = (baseType1935)(&PlayerObject::toggleSpiderMode);
		using derivedType1935 = temp_name_find_better::ret1935(D<baseAddress1935, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1935 = (derivedType1935)(&D<baseAddress1935, UUID>::toggleSpiderMode);
        if (baseAddress1935 != derivedAddress1935) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::toggleSpiderMode", Severity::Debug);
            Interface::get()->addHook("PlayerObject::toggleSpiderMode", (void*)temp_name_find_better::address1935(), (void*)addresser::getNonVirtual(derivedAddress1935));
        }

    	using baseType1968 = temp_name_find_better::ret1968(PlayerObject::*)(float) ;
		constexpr auto baseAddress1968 = (baseType1968)(&PlayerObject::updateTimeMod);
		using derivedType1968 = temp_name_find_better::ret1968(D<baseAddress1968, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1968 = (derivedType1968)(&D<baseAddress1968, UUID>::updateTimeMod);
        if (baseAddress1968 != derivedAddress1968) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::updateTimeMod", Severity::Debug);
            Interface::get()->addHook("PlayerObject::updateTimeMod", (void*)temp_name_find_better::address1968(), (void*)addresser::getNonVirtual(derivedAddress1968));
        }

    	using baseType1972 = temp_name_find_better::ret1972(PlayerObject::*)() ;
		constexpr auto baseAddress1972 = (baseType1972)(&PlayerObject::runRotateAction);
		using derivedType1972 = temp_name_find_better::ret1972(D<baseAddress1972, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1972 = (derivedType1972)(&D<baseAddress1972, UUID>::runRotateAction);
        if (baseAddress1972 != derivedAddress1972) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::runRotateAction", Severity::Debug);
            Interface::get()->addHook("PlayerObject::runRotateAction", (void*)temp_name_find_better::address1972(), (void*)addresser::getNonVirtual(derivedAddress1972));
        }

    	using baseType1973 = temp_name_find_better::ret1973(PlayerObject::*)() ;
		constexpr auto baseAddress1973 = (baseType1973)(&PlayerObject::runBallRotation);
		using derivedType1973 = temp_name_find_better::ret1973(D<baseAddress1973, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1973 = (derivedType1973)(&D<baseAddress1973, UUID>::runBallRotation);
        if (baseAddress1973 != derivedAddress1973) {
        	Interface::get()->logInfo("Adding hook at function PlayerObject::runBallRotation", Severity::Debug);
            Interface::get()->addHook("PlayerObject::runBallRotation", (void*)temp_name_find_better::address1973(), (void*)addresser::getNonVirtual(derivedAddress1973));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCActionTween : cocos2d::CCActionTween, ModifierBase {
    $CCActionTween(const $CCActionTween& c) : CCActionTween(c) {}
    $CCActionTween() : $CCActionTween(*this) {}
    ~$CCActionTween() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCActionTween);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1 = temp_name_find_better::ret1(*)(float, char const*, float, float);
		constexpr auto baseAddress1 = (baseType1)(&CCActionTween::create);
		using derivedType1 = temp_name_find_better::ret1(*)(float, char const*, float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1 = (derivedType1)(&D<baseAddress1, UUID>::create);
        if (baseAddress1 != derivedAddress1) {
        	Interface::get()->logInfo("Adding hook at function CCActionTween::create", Severity::Debug);
            Interface::get()->addHook("CCActionTween::create", (void*)temp_name_find_better::address1(), (void*)addresser::getNonVirtual(derivedAddress1));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCEGLView : cocos2d::CCEGLView, ModifierBase {
    $CCEGLView(const $CCEGLView& c) : CCEGLView(c) {}
    $CCEGLView() : $CCEGLView(*this) {}
    ~$CCEGLView() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCEGLView);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType98 = temp_name_find_better::ret98(CCEGLView::*)(GLFWwindow*, int, int, int) ;
		constexpr auto baseAddress98 = (baseType98)(&CCEGLView::onGLFWMouseCallBack);
		using derivedType98 = temp_name_find_better::ret98(D<baseAddress98, UUID>::*)(GLFWwindow*, int, int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress98 = (derivedType98)(&D<baseAddress98, UUID>::onGLFWMouseCallBack);
        if (baseAddress98 != derivedAddress98) {
        	Interface::get()->logInfo("Adding hook at function CCEGLView::onGLFWMouseCallBack", Severity::Debug);
            Interface::get()->addHook("CCEGLView::onGLFWMouseCallBack", (void*)temp_name_find_better::address98(), (void*)addresser::getNonVirtual(derivedAddress98));
        }

    	using baseType99 = temp_name_find_better::ret99(CCEGLView::*)() ;
		constexpr auto baseAddress99 = (baseType99)(&CCEGLView::swapBuffers);
		using derivedType99 = temp_name_find_better::ret99(D<baseAddress99, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress99 = (derivedType99)(&D<baseAddress99, UUID>::swapBuffers);
        if (baseAddress99 != derivedAddress99) {
        	Interface::get()->logInfo("Adding hook at function CCEGLView::swapBuffers", Severity::Debug);
            Interface::get()->addHook("CCEGLView::swapBuffers", (void*)temp_name_find_better::address99(), (void*)addresser::getVirtual(derivedAddress99));
        }

    	using baseType100 = temp_name_find_better::ret100(CCEGLView::*)(int, int) ;
		constexpr auto baseAddress100 = (baseType100)(&CCEGLView::updateWindow);
		using derivedType100 = temp_name_find_better::ret100(D<baseAddress100, UUID>::*)(int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress100 = (derivedType100)(&D<baseAddress100, UUID>::updateWindow);
        if (baseAddress100 != derivedAddress100) {
        	Interface::get()->logInfo("Adding hook at function CCEGLView::updateWindow", Severity::Debug);
            Interface::get()->addHook("CCEGLView::updateWindow", (void*)temp_name_find_better::address100(), (void*)addresser::getNonVirtual(derivedAddress100));
        }

    	using baseType101 = temp_name_find_better::ret101(CCEGLView::*)(bool) ;
		constexpr auto baseAddress101 = (baseType101)(&CCEGLView::toggleFullScreen);
		using derivedType101 = temp_name_find_better::ret101(D<baseAddress101, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress101 = (derivedType101)(&D<baseAddress101, UUID>::toggleFullScreen);
        if (baseAddress101 != derivedAddress101) {
        	Interface::get()->logInfo("Adding hook at function CCEGLView::toggleFullScreen", Severity::Debug);
            Interface::get()->addHook("CCEGLView::toggleFullScreen", (void*)temp_name_find_better::address101(), (void*)addresser::getNonVirtual(derivedAddress101));
        }

    	using baseType102 = temp_name_find_better::ret102(CCEGLView::*)() ;
		constexpr auto baseAddress102 = (baseType102)(&CCEGLView::pollEvents);
		using derivedType102 = temp_name_find_better::ret102(D<baseAddress102, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress102 = (derivedType102)(&D<baseAddress102, UUID>::pollEvents);
        if (baseAddress102 != derivedAddress102) {
        	Interface::get()->logInfo("Adding hook at function CCEGLView::pollEvents", Severity::Debug);
            Interface::get()->addHook("CCEGLView::pollEvents", (void*)temp_name_find_better::address102(), (void*)addresser::getNonVirtual(derivedAddress102));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCFileUtils : cocos2d::CCFileUtils, ModifierBase {
    $CCFileUtils(const $CCFileUtils& c) : CCFileUtils(c) {}
    $CCFileUtils() : $CCFileUtils(*this) {}
    ~$CCFileUtils() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCFileUtils);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType105 = temp_name_find_better::ret105(*)();
		constexpr auto baseAddress105 = (baseType105)(&CCFileUtils::sharedFileUtils);
		using derivedType105 = temp_name_find_better::ret105(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress105 = (derivedType105)(&D<baseAddress105, UUID>::sharedFileUtils);
        if (baseAddress105 != derivedAddress105) {
        	Interface::get()->logInfo("Adding hook at function CCFileUtils::sharedFileUtils", Severity::Debug);
            Interface::get()->addHook("CCFileUtils::sharedFileUtils", (void*)temp_name_find_better::address105(), (void*)addresser::getNonVirtual(derivedAddress105));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCBlockLayer : CCBlockLayer, ModifierBase {
    $CCBlockLayer(const $CCBlockLayer& c) : CCBlockLayer(c) {}
    $CCBlockLayer() : $CCBlockLayer(*this) {}
    ~$CCBlockLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCBlockLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCAnimate : cocos2d::CCAnimate, ModifierBase {
    $CCAnimate(const $CCAnimate& c) : CCAnimate(c) {}
    $CCAnimate() : $CCAnimate(*this) {}
    ~$CCAnimate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCAnimate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType2 = temp_name_find_better::ret2(*)(cocos2d::CCAnimation*);
		constexpr auto baseAddress2 = (baseType2)(&CCAnimate::create);
		using derivedType2 = temp_name_find_better::ret2(*)(cocos2d::CCAnimation*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2 = (derivedType2)(&D<baseAddress2, UUID>::create);
        if (baseAddress2 != derivedAddress2) {
        	Interface::get()->logInfo("Adding hook at function CCAnimate::create", Severity::Debug);
            Interface::get()->addHook("CCAnimate::create", (void*)temp_name_find_better::address2(), (void*)addresser::getNonVirtual(derivedAddress2));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CustomSongLayer : CustomSongLayer, ModifierBase {
    $CustomSongLayer(const $CustomSongLayer& c) : CustomSongLayer(c) {}
    $CustomSongLayer() : $CustomSongLayer(*this) {}
    ~$CustomSongLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CustomSongLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSpriteFrame : cocos2d::CCSpriteFrame, ModifierBase {
    $CCSpriteFrame(const $CCSpriteFrame& c) : CCSpriteFrame(c) {}
    $CCSpriteFrame() : $CCSpriteFrame(*this) {}
    ~$CCSpriteFrame() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSpriteFrame);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType488 = temp_name_find_better::ret488(*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool, cocos2d::CCPoint const&, cocos2d::CCSize const&);
		constexpr auto baseAddress488 = (baseType488)(&CCSpriteFrame::createWithTexture);
		using derivedType488 = temp_name_find_better::ret488(*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool, cocos2d::CCPoint const&, cocos2d::CCSize const&);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress488 = (derivedType488)(&D<baseAddress488, UUID>::createWithTexture);
        if (baseAddress488 != derivedAddress488) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteFrame::createWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSpriteFrame::createWithTexture", (void*)temp_name_find_better::address488(), (void*)addresser::getNonVirtual(derivedAddress488));
        }

		using baseType489 = temp_name_find_better::ret489(*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&);
		constexpr auto baseAddress489 = (baseType489)(&CCSpriteFrame::createWithTexture);
		using derivedType489 = temp_name_find_better::ret489(*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress489 = (derivedType489)(&D<baseAddress489, UUID>::createWithTexture);
        if (baseAddress489 != derivedAddress489) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteFrame::createWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSpriteFrame::createWithTexture", (void*)temp_name_find_better::address489(), (void*)addresser::getNonVirtual(derivedAddress489));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCDrawNode : cocos2d::CCDrawNode, ModifierBase {
    $CCDrawNode(const $CCDrawNode& c) : CCDrawNode(c) {}
    $CCDrawNode() : $CCDrawNode(*this) {}
    ~$CCDrawNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCDrawNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType85 = temp_name_find_better::ret85(CCDrawNode::*)() ;
		constexpr auto baseAddress85 = (baseType85)(&CCDrawNode::clear);
		using derivedType85 = temp_name_find_better::ret85(D<baseAddress85, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress85 = (derivedType85)(&D<baseAddress85, UUID>::clear);
        if (baseAddress85 != derivedAddress85) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::clear", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::clear", (void*)temp_name_find_better::address85(), (void*)addresser::getNonVirtual(derivedAddress85));
        }

		using baseType86 = temp_name_find_better::ret86(*)();
		constexpr auto baseAddress86 = (baseType86)(&CCDrawNode::create);
		using derivedType86 = temp_name_find_better::ret86(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress86 = (derivedType86)(&D<baseAddress86, UUID>::create);
        if (baseAddress86 != derivedAddress86) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::create", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::create", (void*)temp_name_find_better::address86(), (void*)addresser::getNonVirtual(derivedAddress86));
        }

    	using baseType87 = temp_name_find_better::ret87(CCDrawNode::*)(cocos2d::CCPoint*, unsigned int, cocos2d::_ccColor4F const&, float, cocos2d::_ccColor4F const&) ;
		constexpr auto baseAddress87 = (baseType87)(&CCDrawNode::drawPolygon);
		using derivedType87 = temp_name_find_better::ret87(D<baseAddress87, UUID>::*)(cocos2d::CCPoint*, unsigned int, cocos2d::_ccColor4F const&, float, cocos2d::_ccColor4F const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress87 = (derivedType87)(&D<baseAddress87, UUID>::drawPolygon);
        if (baseAddress87 != derivedAddress87) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::drawPolygon", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::drawPolygon", (void*)temp_name_find_better::address87(), (void*)addresser::getNonVirtual(derivedAddress87));
        }

    	using baseType88 = temp_name_find_better::ret88(CCDrawNode::*)(cocos2d::CCPoint const&, cocos2d::CCPoint const&, float, cocos2d::_ccColor4F const&) ;
		constexpr auto baseAddress88 = (baseType88)(&CCDrawNode::drawSegment);
		using derivedType88 = temp_name_find_better::ret88(D<baseAddress88, UUID>::*)(cocos2d::CCPoint const&, cocos2d::CCPoint const&, float, cocos2d::_ccColor4F const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress88 = (derivedType88)(&D<baseAddress88, UUID>::drawSegment);
        if (baseAddress88 != derivedAddress88) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::drawSegment", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::drawSegment", (void*)temp_name_find_better::address88(), (void*)addresser::getNonVirtual(derivedAddress88));
        }

    	using baseType89 = temp_name_find_better::ret89(CCDrawNode::*)() const ;
		constexpr auto baseAddress89 = (baseType89)(&CCDrawNode::getBlendFunc);
		using derivedType89 = temp_name_find_better::ret89(D<baseAddress89, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress89 = (derivedType89)(&D<baseAddress89, UUID>::getBlendFunc);
        if (baseAddress89 != derivedAddress89) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::getBlendFunc", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::getBlendFunc", (void*)temp_name_find_better::address89(), (void*)addresser::getNonVirtual(derivedAddress89));
        }

    	using baseType90 = temp_name_find_better::ret90(CCDrawNode::*)() ;
		constexpr auto baseAddress90 = (baseType90)(&CCDrawNode::init);
		using derivedType90 = temp_name_find_better::ret90(D<baseAddress90, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress90 = (derivedType90)(&D<baseAddress90, UUID>::init);
        if (baseAddress90 != derivedAddress90) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::init", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::init", (void*)temp_name_find_better::address90(), (void*)addresser::getNonVirtual(derivedAddress90));
        }

    	using baseType91 = temp_name_find_better::ret91(CCDrawNode::*)(cocos2d::_ccBlendFunc const&) ;
		constexpr auto baseAddress91 = (baseType91)(&CCDrawNode::setBlendFunc);
		using derivedType91 = temp_name_find_better::ret91(D<baseAddress91, UUID>::*)(cocos2d::_ccBlendFunc const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress91 = (derivedType91)(&D<baseAddress91, UUID>::setBlendFunc);
        if (baseAddress91 != derivedAddress91) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::setBlendFunc", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::setBlendFunc", (void*)temp_name_find_better::address91(), (void*)addresser::getNonVirtual(derivedAddress91));
        }

    	using baseType92 = temp_name_find_better::ret92(CCDrawNode::*)() ;
		constexpr auto baseAddress92 = (baseType92)(&CCDrawNode::draw);
		using derivedType92 = temp_name_find_better::ret92(D<baseAddress92, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress92 = (derivedType92)(&D<baseAddress92, UUID>::draw);
        if (baseAddress92 != derivedAddress92) {
        	Interface::get()->logInfo("Adding hook at function CCDrawNode::draw", Severity::Debug);
            Interface::get()->addHook("CCDrawNode::draw", (void*)temp_name_find_better::address92(), (void*)addresser::getNonVirtual(derivedAddress92));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCClippingNode : cocos2d::CCClippingNode, ModifierBase {
    $CCClippingNode(const $CCClippingNode& c) : CCClippingNode(c) {}
    $CCClippingNode() : $CCClippingNode(*this) {}
    ~$CCClippingNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCClippingNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType28 = temp_name_find_better::ret28(*)();
		constexpr auto baseAddress28 = (baseType28)(&CCClippingNode::create);
		using derivedType28 = temp_name_find_better::ret28(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress28 = (derivedType28)(&D<baseAddress28, UUID>::create);
        if (baseAddress28 != derivedAddress28) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::create", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::create", (void*)temp_name_find_better::address28(), (void*)addresser::getNonVirtual(derivedAddress28));
        }

		using baseType29 = temp_name_find_better::ret29(*)(cocos2d::CCNode*);
		constexpr auto baseAddress29 = (baseType29)(&CCClippingNode::create);
		using derivedType29 = temp_name_find_better::ret29(*)(cocos2d::CCNode*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress29 = (derivedType29)(&D<baseAddress29, UUID>::create);
        if (baseAddress29 != derivedAddress29) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::create", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::create", (void*)temp_name_find_better::address29(), (void*)addresser::getNonVirtual(derivedAddress29));
        }

    	using baseType30 = temp_name_find_better::ret30(CCClippingNode::*)() const ;
		constexpr auto baseAddress30 = (baseType30)(&CCClippingNode::getAlphaThreshold);
		using derivedType30 = temp_name_find_better::ret30(D<baseAddress30, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress30 = (derivedType30)(&D<baseAddress30, UUID>::getAlphaThreshold);
        if (baseAddress30 != derivedAddress30) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::getAlphaThreshold", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::getAlphaThreshold", (void*)temp_name_find_better::address30(), (void*)addresser::getNonVirtual(derivedAddress30));
        }

    	using baseType31 = temp_name_find_better::ret31(CCClippingNode::*)() const ;
		constexpr auto baseAddress31 = (baseType31)(&CCClippingNode::getStencil);
		using derivedType31 = temp_name_find_better::ret31(D<baseAddress31, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress31 = (derivedType31)(&D<baseAddress31, UUID>::getStencil);
        if (baseAddress31 != derivedAddress31) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::getStencil", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::getStencil", (void*)temp_name_find_better::address31(), (void*)addresser::getNonVirtual(derivedAddress31));
        }

    	using baseType32 = temp_name_find_better::ret32(CCClippingNode::*)() const ;
		constexpr auto baseAddress32 = (baseType32)(&CCClippingNode::isInverted);
		using derivedType32 = temp_name_find_better::ret32(D<baseAddress32, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress32 = (derivedType32)(&D<baseAddress32, UUID>::isInverted);
        if (baseAddress32 != derivedAddress32) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::isInverted", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::isInverted", (void*)temp_name_find_better::address32(), (void*)addresser::getNonVirtual(derivedAddress32));
        }

    	using baseType33 = temp_name_find_better::ret33(CCClippingNode::*)() ;
		constexpr auto baseAddress33 = (baseType33)(&CCClippingNode::onEnter);
		using derivedType33 = temp_name_find_better::ret33(D<baseAddress33, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress33 = (derivedType33)(&D<baseAddress33, UUID>::onEnter);
        if (baseAddress33 != derivedAddress33) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::onEnter", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::onEnter", (void*)temp_name_find_better::address33(), (void*)addresser::getNonVirtual(derivedAddress33));
        }

    	using baseType34 = temp_name_find_better::ret34(CCClippingNode::*)() ;
		constexpr auto baseAddress34 = (baseType34)(&CCClippingNode::onEnterTransitionDidFinish);
		using derivedType34 = temp_name_find_better::ret34(D<baseAddress34, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress34 = (derivedType34)(&D<baseAddress34, UUID>::onEnterTransitionDidFinish);
        if (baseAddress34 != derivedAddress34) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::onEnterTransitionDidFinish", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::onEnterTransitionDidFinish", (void*)temp_name_find_better::address34(), (void*)addresser::getNonVirtual(derivedAddress34));
        }

    	using baseType35 = temp_name_find_better::ret35(CCClippingNode::*)() ;
		constexpr auto baseAddress35 = (baseType35)(&CCClippingNode::onExit);
		using derivedType35 = temp_name_find_better::ret35(D<baseAddress35, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress35 = (derivedType35)(&D<baseAddress35, UUID>::onExit);
        if (baseAddress35 != derivedAddress35) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::onExit", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::onExit", (void*)temp_name_find_better::address35(), (void*)addresser::getNonVirtual(derivedAddress35));
        }

    	using baseType36 = temp_name_find_better::ret36(CCClippingNode::*)() ;
		constexpr auto baseAddress36 = (baseType36)(&CCClippingNode::onExitTransitionDidStart);
		using derivedType36 = temp_name_find_better::ret36(D<baseAddress36, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress36 = (derivedType36)(&D<baseAddress36, UUID>::onExitTransitionDidStart);
        if (baseAddress36 != derivedAddress36) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::onExitTransitionDidStart", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::onExitTransitionDidStart", (void*)temp_name_find_better::address36(), (void*)addresser::getNonVirtual(derivedAddress36));
        }

    	using baseType37 = temp_name_find_better::ret37(CCClippingNode::*)(float) ;
		constexpr auto baseAddress37 = (baseType37)(&CCClippingNode::setAlphaThreshold);
		using derivedType37 = temp_name_find_better::ret37(D<baseAddress37, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress37 = (derivedType37)(&D<baseAddress37, UUID>::setAlphaThreshold);
        if (baseAddress37 != derivedAddress37) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::setAlphaThreshold", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::setAlphaThreshold", (void*)temp_name_find_better::address37(), (void*)addresser::getNonVirtual(derivedAddress37));
        }

    	using baseType38 = temp_name_find_better::ret38(CCClippingNode::*)(bool) ;
		constexpr auto baseAddress38 = (baseType38)(&CCClippingNode::setInverted);
		using derivedType38 = temp_name_find_better::ret38(D<baseAddress38, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress38 = (derivedType38)(&D<baseAddress38, UUID>::setInverted);
        if (baseAddress38 != derivedAddress38) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::setInverted", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::setInverted", (void*)temp_name_find_better::address38(), (void*)addresser::getNonVirtual(derivedAddress38));
        }

    	using baseType39 = temp_name_find_better::ret39(CCClippingNode::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress39 = (baseType39)(&CCClippingNode::setStencil);
		using derivedType39 = temp_name_find_better::ret39(D<baseAddress39, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress39 = (derivedType39)(&D<baseAddress39, UUID>::setStencil);
        if (baseAddress39 != derivedAddress39) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::setStencil", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::setStencil", (void*)temp_name_find_better::address39(), (void*)addresser::getNonVirtual(derivedAddress39));
        }

    	using baseType40 = temp_name_find_better::ret40(CCClippingNode::*)() ;
		constexpr auto baseAddress40 = (baseType40)(&CCClippingNode::visit);
		using derivedType40 = temp_name_find_better::ret40(D<baseAddress40, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress40 = (derivedType40)(&D<baseAddress40, UUID>::visit);
        if (baseAddress40 != derivedAddress40) {
        	Interface::get()->logInfo("Adding hook at function CCClippingNode::visit", Severity::Debug);
            Interface::get()->addHook("CCClippingNode::visit", (void*)temp_name_find_better::address40(), (void*)addresser::getNonVirtual(derivedAddress40));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupInstantCountPopup : SetupInstantCountPopup, ModifierBase {
    $SetupInstantCountPopup(const $SetupInstantCountPopup& c) : SetupInstantCountPopup(c) {}
    $SetupInstantCountPopup() : $SetupInstantCountPopup(*this) {}
    ~$SetupInstantCountPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupInstantCountPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCNodeRGBA : cocos2d::CCNodeRGBA, ModifierBase {
    $CCNodeRGBA(const $CCNodeRGBA& c) : CCNodeRGBA(c) {}
    $CCNodeRGBA() : $CCNodeRGBA(*this) {}
    ~$CCNodeRGBA() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCNodeRGBA);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType374 = temp_name_find_better::ret374(CCNodeRGBA::*)() ;
		constexpr auto baseAddress374 = (baseType374)(&CCNodeRGBA::init);
		using derivedType374 = temp_name_find_better::ret374(D<baseAddress374, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress374 = (derivedType374)(&D<baseAddress374, UUID>::init);
        if (baseAddress374 != derivedAddress374) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::init", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::init", (void*)temp_name_find_better::address374(), (void*)addresser::getVirtual(derivedAddress374));
        }

    	using baseType375 = temp_name_find_better::ret375(CCNodeRGBA::*)() ;
		constexpr auto baseAddress375 = (baseType375)(&CCNodeRGBA::getOpacity);
		using derivedType375 = temp_name_find_better::ret375(D<baseAddress375, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress375 = (derivedType375)(&D<baseAddress375, UUID>::getOpacity);
        if (baseAddress375 != derivedAddress375) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::getOpacity", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::getOpacity", (void*)temp_name_find_better::address375(), (void*)addresser::getVirtual(derivedAddress375));
        }

    	using baseType376 = temp_name_find_better::ret376(CCNodeRGBA::*)() ;
		constexpr auto baseAddress376 = (baseType376)(&CCNodeRGBA::getDisplayedOpacity);
		using derivedType376 = temp_name_find_better::ret376(D<baseAddress376, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress376 = (derivedType376)(&D<baseAddress376, UUID>::getDisplayedOpacity);
        if (baseAddress376 != derivedAddress376) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::getDisplayedOpacity", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::getDisplayedOpacity", (void*)temp_name_find_better::address376(), (void*)addresser::getVirtual(derivedAddress376));
        }

    	using baseType377 = temp_name_find_better::ret377(CCNodeRGBA::*)(GLubyte) ;
		constexpr auto baseAddress377 = (baseType377)(&CCNodeRGBA::setOpacity);
		using derivedType377 = temp_name_find_better::ret377(D<baseAddress377, UUID>::*)(GLubyte) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress377 = (derivedType377)(&D<baseAddress377, UUID>::setOpacity);
        if (baseAddress377 != derivedAddress377) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::setOpacity", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::setOpacity", (void*)temp_name_find_better::address377(), (void*)addresser::getVirtual(derivedAddress377));
        }

    	using baseType378 = temp_name_find_better::ret378(CCNodeRGBA::*)(GLubyte) ;
		constexpr auto baseAddress378 = (baseType378)(&CCNodeRGBA::updateDisplayedOpacity);
		using derivedType378 = temp_name_find_better::ret378(D<baseAddress378, UUID>::*)(GLubyte) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress378 = (derivedType378)(&D<baseAddress378, UUID>::updateDisplayedOpacity);
        if (baseAddress378 != derivedAddress378) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::updateDisplayedOpacity", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::updateDisplayedOpacity", (void*)temp_name_find_better::address378(), (void*)addresser::getVirtual(derivedAddress378));
        }

    	using baseType379 = temp_name_find_better::ret379(CCNodeRGBA::*)() ;
		constexpr auto baseAddress379 = (baseType379)(&CCNodeRGBA::isCascadeOpacityEnabled);
		using derivedType379 = temp_name_find_better::ret379(D<baseAddress379, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress379 = (derivedType379)(&D<baseAddress379, UUID>::isCascadeOpacityEnabled);
        if (baseAddress379 != derivedAddress379) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::isCascadeOpacityEnabled", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::isCascadeOpacityEnabled", (void*)temp_name_find_better::address379(), (void*)addresser::getVirtual(derivedAddress379));
        }

    	using baseType380 = temp_name_find_better::ret380(CCNodeRGBA::*)(bool) ;
		constexpr auto baseAddress380 = (baseType380)(&CCNodeRGBA::setCascadeOpacityEnabled);
		using derivedType380 = temp_name_find_better::ret380(D<baseAddress380, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress380 = (derivedType380)(&D<baseAddress380, UUID>::setCascadeOpacityEnabled);
        if (baseAddress380 != derivedAddress380) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::setCascadeOpacityEnabled", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::setCascadeOpacityEnabled", (void*)temp_name_find_better::address380(), (void*)addresser::getVirtual(derivedAddress380));
        }

    	using baseType381 = temp_name_find_better::ret381(CCNodeRGBA::*)() ;
		constexpr auto baseAddress381 = (baseType381)(&CCNodeRGBA::getColor);
		using derivedType381 = temp_name_find_better::ret381(D<baseAddress381, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress381 = (derivedType381)(&D<baseAddress381, UUID>::getColor);
        if (baseAddress381 != derivedAddress381) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::getColor", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::getColor", (void*)temp_name_find_better::address381(), (void*)addresser::getVirtual(derivedAddress381));
        }

    	using baseType382 = temp_name_find_better::ret382(CCNodeRGBA::*)() ;
		constexpr auto baseAddress382 = (baseType382)(&CCNodeRGBA::getDisplayedColor);
		using derivedType382 = temp_name_find_better::ret382(D<baseAddress382, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress382 = (derivedType382)(&D<baseAddress382, UUID>::getDisplayedColor);
        if (baseAddress382 != derivedAddress382) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::getDisplayedColor", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::getDisplayedColor", (void*)temp_name_find_better::address382(), (void*)addresser::getVirtual(derivedAddress382));
        }

    	using baseType383 = temp_name_find_better::ret383(CCNodeRGBA::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress383 = (baseType383)(&CCNodeRGBA::setColor);
		using derivedType383 = temp_name_find_better::ret383(D<baseAddress383, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress383 = (derivedType383)(&D<baseAddress383, UUID>::setColor);
        if (baseAddress383 != derivedAddress383) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::setColor", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::setColor", (void*)temp_name_find_better::address383(), (void*)addresser::getVirtual(derivedAddress383));
        }

    	using baseType384 = temp_name_find_better::ret384(CCNodeRGBA::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress384 = (baseType384)(&CCNodeRGBA::updateDisplayedColor);
		using derivedType384 = temp_name_find_better::ret384(D<baseAddress384, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress384 = (derivedType384)(&D<baseAddress384, UUID>::updateDisplayedColor);
        if (baseAddress384 != derivedAddress384) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::updateDisplayedColor", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::updateDisplayedColor", (void*)temp_name_find_better::address384(), (void*)addresser::getVirtual(derivedAddress384));
        }

    	using baseType385 = temp_name_find_better::ret385(CCNodeRGBA::*)() ;
		constexpr auto baseAddress385 = (baseType385)(&CCNodeRGBA::isCascadeColorEnabled);
		using derivedType385 = temp_name_find_better::ret385(D<baseAddress385, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress385 = (derivedType385)(&D<baseAddress385, UUID>::isCascadeColorEnabled);
        if (baseAddress385 != derivedAddress385) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::isCascadeColorEnabled", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::isCascadeColorEnabled", (void*)temp_name_find_better::address385(), (void*)addresser::getVirtual(derivedAddress385));
        }

    	using baseType386 = temp_name_find_better::ret386(CCNodeRGBA::*)(bool) ;
		constexpr auto baseAddress386 = (baseType386)(&CCNodeRGBA::setCascadeColorEnabled);
		using derivedType386 = temp_name_find_better::ret386(D<baseAddress386, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress386 = (derivedType386)(&D<baseAddress386, UUID>::setCascadeColorEnabled);
        if (baseAddress386 != derivedAddress386) {
        	Interface::get()->logInfo("Adding hook at function CCNodeRGBA::setCascadeColorEnabled", Severity::Debug);
            Interface::get()->addHook("CCNodeRGBA::setCascadeColorEnabled", (void*)temp_name_find_better::address386(), (void*)addresser::getVirtual(derivedAddress386));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCCallFunc : cocos2d::CCCallFunc, ModifierBase {
    $CCCallFunc(const $CCCallFunc& c) : CCCallFunc(c) {}
    $CCCallFunc() : $CCCallFunc(*this) {}
    ~$CCCallFunc() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCCallFunc);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType27 = temp_name_find_better::ret27(*)(int);
		constexpr auto baseAddress27 = (baseType27)(&CCCallFunc::create);
		using derivedType27 = temp_name_find_better::ret27(*)(int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress27 = (derivedType27)(&D<baseAddress27, UUID>::create);
        if (baseAddress27 != derivedAddress27) {
        	Interface::get()->logInfo("Adding hook at function CCCallFunc::create", Severity::Debug);
            Interface::get()->addHook("CCCallFunc::create", (void*)temp_name_find_better::address27(), (void*)addresser::getNonVirtual(derivedAddress27));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CreatorLayer : CreatorLayer, ModifierBase {
    $CreatorLayer(const $CreatorLayer& c) : CreatorLayer(c) {}
    $CreatorLayer() : $CreatorLayer(*this) {}
    ~$CreatorLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CreatorLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType830 = temp_name_find_better::ret830(*)();
		constexpr auto baseAddress830 = (baseType830)(&CreatorLayer::create);
		using derivedType830 = temp_name_find_better::ret830(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress830 = (derivedType830)(&D<baseAddress830, UUID>::create);
        if (baseAddress830 != derivedAddress830) {
        	Interface::get()->logInfo("Adding hook at function CreatorLayer::create", Severity::Debug);
            Interface::get()->addHook("CreatorLayer::create", (void*)temp_name_find_better::address830(), (void*)addresser::getNonVirtual(derivedAddress830));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCRotateBy : cocos2d::CCRotateBy, ModifierBase {
    $CCRotateBy(const $CCRotateBy& c) : CCRotateBy(c) {}
    $CCRotateBy() : $CCRotateBy(*this) {}
    ~$CCRotateBy() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCRotateBy);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType409 = temp_name_find_better::ret409(*)(float, float);
		constexpr auto baseAddress409 = (baseType409)(&CCRotateBy::create);
		using derivedType409 = temp_name_find_better::ret409(*)(float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress409 = (derivedType409)(&D<baseAddress409, UUID>::create);
        if (baseAddress409 != derivedAddress409) {
        	Interface::get()->logInfo("Adding hook at function CCRotateBy::create", Severity::Debug);
            Interface::get()->addHook("CCRotateBy::create", (void*)temp_name_find_better::address409(), (void*)addresser::getNonVirtual(derivedAddress409));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MoreVideoOptionsLayer : MoreVideoOptionsLayer, ModifierBase {
    $MoreVideoOptionsLayer(const $MoreVideoOptionsLayer& c) : MoreVideoOptionsLayer(c) {}
    $MoreVideoOptionsLayer() : $MoreVideoOptionsLayer(*this) {}
    ~$MoreVideoOptionsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MoreVideoOptionsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCApplication : cocos2d::CCApplication, ModifierBase {
    $CCApplication(const $CCApplication& c) : CCApplication(c) {}
    $CCApplication() : $CCApplication(*this) {}
    ~$CCApplication() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCApplication);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType4 = temp_name_find_better::ret4(CCApplication::*)() ;
		constexpr auto baseAddress4 = (baseType4)(&CCApplication::getCurrentLanguage);
		using derivedType4 = temp_name_find_better::ret4(D<baseAddress4, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress4 = (derivedType4)(&D<baseAddress4, UUID>::getCurrentLanguage);
        if (baseAddress4 != derivedAddress4) {
        	Interface::get()->logInfo("Adding hook at function CCApplication::getCurrentLanguage", Severity::Debug);
            Interface::get()->addHook("CCApplication::getCurrentLanguage", (void*)temp_name_find_better::address4(), (void*)addresser::getVirtual(derivedAddress4));
        }

    	using baseType5 = temp_name_find_better::ret5(CCApplication::*)() ;
		constexpr auto baseAddress5 = (baseType5)(&CCApplication::getTargetPlatform);
		using derivedType5 = temp_name_find_better::ret5(D<baseAddress5, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress5 = (derivedType5)(&D<baseAddress5, UUID>::getTargetPlatform);
        if (baseAddress5 != derivedAddress5) {
        	Interface::get()->logInfo("Adding hook at function CCApplication::getTargetPlatform", Severity::Debug);
            Interface::get()->addHook("CCApplication::getTargetPlatform", (void*)temp_name_find_better::address5(), (void*)addresser::getVirtual(derivedAddress5));
        }

    	using baseType6 = temp_name_find_better::ret6(CCApplication::*)(char const*) ;
		constexpr auto baseAddress6 = (baseType6)(&CCApplication::openURL);
		using derivedType6 = temp_name_find_better::ret6(D<baseAddress6, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress6 = (derivedType6)(&D<baseAddress6, UUID>::openURL);
        if (baseAddress6 != derivedAddress6) {
        	Interface::get()->logInfo("Adding hook at function CCApplication::openURL", Severity::Debug);
            Interface::get()->addHook("CCApplication::openURL", (void*)temp_name_find_better::address6(), (void*)addresser::getVirtual(derivedAddress6));
        }

    	using baseType7 = temp_name_find_better::ret7(CCApplication::*)(double) ;
		constexpr auto baseAddress7 = (baseType7)(&CCApplication::setAnimationInterval);
		using derivedType7 = temp_name_find_better::ret7(D<baseAddress7, UUID>::*)(double) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress7 = (derivedType7)(&D<baseAddress7, UUID>::setAnimationInterval);
        if (baseAddress7 != derivedAddress7) {
        	Interface::get()->logInfo("Adding hook at function CCApplication::setAnimationInterval", Severity::Debug);
            Interface::get()->addHook("CCApplication::setAnimationInterval", (void*)temp_name_find_better::address7(), (void*)addresser::getVirtual(derivedAddress7));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCRepeatForever : cocos2d::CCRepeatForever, ModifierBase {
    $CCRepeatForever(const $CCRepeatForever& c) : CCRepeatForever(c) {}
    $CCRepeatForever() : $CCRepeatForever(*this) {}
    ~$CCRepeatForever() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCRepeatForever);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType408 = temp_name_find_better::ret408(*)(cocos2d::CCActionInterval*);
		constexpr auto baseAddress408 = (baseType408)(&CCRepeatForever::create);
		using derivedType408 = temp_name_find_better::ret408(*)(cocos2d::CCActionInterval*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress408 = (derivedType408)(&D<baseAddress408, UUID>::create);
        if (baseAddress408 != derivedAddress408) {
        	Interface::get()->logInfo("Adding hook at function CCRepeatForever::create", Severity::Debug);
            Interface::get()->addHook("CCRepeatForever::create", (void*)temp_name_find_better::address408(), (void*)addresser::getNonVirtual(derivedAddress408));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $DrawGridLayer : DrawGridLayer, ModifierBase {
    $DrawGridLayer(const $DrawGridLayer& c) : DrawGridLayer(c) {}
    $DrawGridLayer() : $DrawGridLayer(*this) {}
    ~$DrawGridLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($DrawGridLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType866 = temp_name_find_better::ret866(DrawGridLayer::*)() ;
		constexpr auto baseAddress866 = (baseType866)(&DrawGridLayer::draw);
		using derivedType866 = temp_name_find_better::ret866(D<baseAddress866, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress866 = (derivedType866)(&D<baseAddress866, UUID>::draw);
        if (baseAddress866 != derivedAddress866) {
        	Interface::get()->logInfo("Adding hook at function DrawGridLayer::draw", Severity::Debug);
            Interface::get()->addHook("DrawGridLayer::draw", (void*)temp_name_find_better::address866(), (void*)addresser::getNonVirtual(derivedAddress866));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCAnimation : cocos2d::CCAnimation, ModifierBase {
    $CCAnimation(const $CCAnimation& c) : CCAnimation(c) {}
    $CCAnimation() : $CCAnimation(*this) {}
    ~$CCAnimation() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCAnimation);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType3 = temp_name_find_better::ret3(*)(cocos2d::CCArray*, float);
		constexpr auto baseAddress3 = (baseType3)(&CCAnimation::createWithSpriteFrames);
		using derivedType3 = temp_name_find_better::ret3(*)(cocos2d::CCArray*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress3 = (derivedType3)(&D<baseAddress3, UUID>::createWithSpriteFrames);
        if (baseAddress3 != derivedAddress3) {
        	Interface::get()->logInfo("Adding hook at function CCAnimation::createWithSpriteFrames", Severity::Debug);
            Interface::get()->addHook("CCAnimation::createWithSpriteFrames", (void*)temp_name_find_better::address3(), (void*)addresser::getNonVirtual(derivedAddress3));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EditorOptionsLayer : EditorOptionsLayer, ModifierBase {
    $EditorOptionsLayer(const $EditorOptionsLayer& c) : EditorOptionsLayer(c) {}
    $EditorOptionsLayer() : $EditorOptionsLayer(*this) {}
    ~$EditorOptionsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EditorOptionsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCArray : cocos2d::CCArray, ModifierBase {
    $CCArray(const $CCArray& c) : CCArray(c) {}
    $CCArray() : $CCArray(*this) {}
    ~$CCArray() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCArray);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType9 = temp_name_find_better::ret9(CCArray::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress9 = (baseType9)(&CCArray::addObject);
		using derivedType9 = temp_name_find_better::ret9(D<baseAddress9, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress9 = (derivedType9)(&D<baseAddress9, UUID>::addObject);
        if (baseAddress9 != derivedAddress9) {
        	Interface::get()->logInfo("Adding hook at function CCArray::addObject", Severity::Debug);
            Interface::get()->addHook("CCArray::addObject", (void*)temp_name_find_better::address9(), (void*)addresser::getNonVirtual(derivedAddress9));
        }

    	using baseType10 = temp_name_find_better::ret10(CCArray::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress10 = (baseType10)(&CCArray::addObjectNew);
		using derivedType10 = temp_name_find_better::ret10(D<baseAddress10, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress10 = (derivedType10)(&D<baseAddress10, UUID>::addObjectNew);
        if (baseAddress10 != derivedAddress10) {
        	Interface::get()->logInfo("Adding hook at function CCArray::addObjectNew", Severity::Debug);
            Interface::get()->addHook("CCArray::addObjectNew", (void*)temp_name_find_better::address10(), (void*)addresser::getNonVirtual(derivedAddress10));
        }

    	using baseType11 = temp_name_find_better::ret11(CCArray::*)(cocos2d::CCArray*) ;
		constexpr auto baseAddress11 = (baseType11)(&CCArray::addObjectsFromArray);
		using derivedType11 = temp_name_find_better::ret11(D<baseAddress11, UUID>::*)(cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress11 = (derivedType11)(&D<baseAddress11, UUID>::addObjectsFromArray);
        if (baseAddress11 != derivedAddress11) {
        	Interface::get()->logInfo("Adding hook at function CCArray::addObjectsFromArray", Severity::Debug);
            Interface::get()->addHook("CCArray::addObjectsFromArray", (void*)temp_name_find_better::address11(), (void*)addresser::getNonVirtual(derivedAddress11));
        }

    	using baseType12 = temp_name_find_better::ret12(CCArray::*)(cocos2d::CCObject*) const ;
		constexpr auto baseAddress12 = (baseType12)(&CCArray::containsObject);
		using derivedType12 = temp_name_find_better::ret12(D<baseAddress12, UUID>::*)(cocos2d::CCObject*) const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress12 = (derivedType12)(&D<baseAddress12, UUID>::containsObject);
        if (baseAddress12 != derivedAddress12) {
        	Interface::get()->logInfo("Adding hook at function CCArray::containsObject", Severity::Debug);
            Interface::get()->addHook("CCArray::containsObject", (void*)temp_name_find_better::address12(), (void*)addresser::getNonVirtual(derivedAddress12));
        }

    	using baseType13 = temp_name_find_better::ret13(CCArray::*)() const ;
		constexpr auto baseAddress13 = (baseType13)(&CCArray::count);
		using derivedType13 = temp_name_find_better::ret13(D<baseAddress13, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress13 = (derivedType13)(&D<baseAddress13, UUID>::count);
        if (baseAddress13 != derivedAddress13) {
        	Interface::get()->logInfo("Adding hook at function CCArray::count", Severity::Debug);
            Interface::get()->addHook("CCArray::count", (void*)temp_name_find_better::address13(), (void*)addresser::getNonVirtual(derivedAddress13));
        }

		using baseType14 = temp_name_find_better::ret14(*)();
		constexpr auto baseAddress14 = (baseType14)(&CCArray::create);
		using derivedType14 = temp_name_find_better::ret14(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress14 = (derivedType14)(&D<baseAddress14, UUID>::create);
        if (baseAddress14 != derivedAddress14) {
        	Interface::get()->logInfo("Adding hook at function CCArray::create", Severity::Debug);
            Interface::get()->addHook("CCArray::create", (void*)temp_name_find_better::address14(), (void*)addresser::getNonVirtual(derivedAddress14));
        }

		using baseType15 = temp_name_find_better::ret15(*)(cocos2d::CCObject*);
		constexpr auto baseAddress15 = (baseType15)(&CCArray::createWithObject);
		using derivedType15 = temp_name_find_better::ret15(*)(cocos2d::CCObject*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress15 = (derivedType15)(&D<baseAddress15, UUID>::createWithObject);
        if (baseAddress15 != derivedAddress15) {
        	Interface::get()->logInfo("Adding hook at function CCArray::createWithObject", Severity::Debug);
            Interface::get()->addHook("CCArray::createWithObject", (void*)temp_name_find_better::address15(), (void*)addresser::getNonVirtual(derivedAddress15));
        }

    	using baseType16 = temp_name_find_better::ret16(CCArray::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress16 = (baseType16)(&CCArray::fastRemoveObject);
		using derivedType16 = temp_name_find_better::ret16(D<baseAddress16, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress16 = (derivedType16)(&D<baseAddress16, UUID>::fastRemoveObject);
        if (baseAddress16 != derivedAddress16) {
        	Interface::get()->logInfo("Adding hook at function CCArray::fastRemoveObject", Severity::Debug);
            Interface::get()->addHook("CCArray::fastRemoveObject", (void*)temp_name_find_better::address16(), (void*)addresser::getNonVirtual(derivedAddress16));
        }

    	using baseType17 = temp_name_find_better::ret17(CCArray::*)(unsigned int) ;
		constexpr auto baseAddress17 = (baseType17)(&CCArray::fastRemoveObjectAtIndex);
		using derivedType17 = temp_name_find_better::ret17(D<baseAddress17, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress17 = (derivedType17)(&D<baseAddress17, UUID>::fastRemoveObjectAtIndex);
        if (baseAddress17 != derivedAddress17) {
        	Interface::get()->logInfo("Adding hook at function CCArray::fastRemoveObjectAtIndex", Severity::Debug);
            Interface::get()->addHook("CCArray::fastRemoveObjectAtIndex", (void*)temp_name_find_better::address17(), (void*)addresser::getNonVirtual(derivedAddress17));
        }

    	using baseType18 = temp_name_find_better::ret18(CCArray::*)(unsigned int) ;
		constexpr auto baseAddress18 = (baseType18)(&CCArray::fastRemoveObjectAtIndexNew);
		using derivedType18 = temp_name_find_better::ret18(D<baseAddress18, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress18 = (derivedType18)(&D<baseAddress18, UUID>::fastRemoveObjectAtIndexNew);
        if (baseAddress18 != derivedAddress18) {
        	Interface::get()->logInfo("Adding hook at function CCArray::fastRemoveObjectAtIndexNew", Severity::Debug);
            Interface::get()->addHook("CCArray::fastRemoveObjectAtIndexNew", (void*)temp_name_find_better::address18(), (void*)addresser::getNonVirtual(derivedAddress18));
        }

    	using baseType19 = temp_name_find_better::ret19(CCArray::*)() ;
		constexpr auto baseAddress19 = (baseType19)(&CCArray::lastObject);
		using derivedType19 = temp_name_find_better::ret19(D<baseAddress19, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress19 = (derivedType19)(&D<baseAddress19, UUID>::lastObject);
        if (baseAddress19 != derivedAddress19) {
        	Interface::get()->logInfo("Adding hook at function CCArray::lastObject", Severity::Debug);
            Interface::get()->addHook("CCArray::lastObject", (void*)temp_name_find_better::address19(), (void*)addresser::getNonVirtual(derivedAddress19));
        }

    	using baseType20 = temp_name_find_better::ret20(CCArray::*)(unsigned int) ;
		constexpr auto baseAddress20 = (baseType20)(&CCArray::objectAtIndex);
		using derivedType20 = temp_name_find_better::ret20(D<baseAddress20, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress20 = (derivedType20)(&D<baseAddress20, UUID>::objectAtIndex);
        if (baseAddress20 != derivedAddress20) {
        	Interface::get()->logInfo("Adding hook at function CCArray::objectAtIndex", Severity::Debug);
            Interface::get()->addHook("CCArray::objectAtIndex", (void*)temp_name_find_better::address20(), (void*)addresser::getNonVirtual(derivedAddress20));
        }

    	using baseType21 = temp_name_find_better::ret21(CCArray::*)() ;
		constexpr auto baseAddress21 = (baseType21)(&CCArray::removeAllObjects);
		using derivedType21 = temp_name_find_better::ret21(D<baseAddress21, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress21 = (derivedType21)(&D<baseAddress21, UUID>::removeAllObjects);
        if (baseAddress21 != derivedAddress21) {
        	Interface::get()->logInfo("Adding hook at function CCArray::removeAllObjects", Severity::Debug);
            Interface::get()->addHook("CCArray::removeAllObjects", (void*)temp_name_find_better::address21(), (void*)addresser::getNonVirtual(derivedAddress21));
        }

    	using baseType22 = temp_name_find_better::ret22(CCArray::*)(bool) ;
		constexpr auto baseAddress22 = (baseType22)(&CCArray::removeLastObject);
		using derivedType22 = temp_name_find_better::ret22(D<baseAddress22, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress22 = (derivedType22)(&D<baseAddress22, UUID>::removeLastObject);
        if (baseAddress22 != derivedAddress22) {
        	Interface::get()->logInfo("Adding hook at function CCArray::removeLastObject", Severity::Debug);
            Interface::get()->addHook("CCArray::removeLastObject", (void*)temp_name_find_better::address22(), (void*)addresser::getNonVirtual(derivedAddress22));
        }

    	using baseType23 = temp_name_find_better::ret23(CCArray::*)(cocos2d::CCObject*, bool) ;
		constexpr auto baseAddress23 = (baseType23)(&CCArray::removeObject);
		using derivedType23 = temp_name_find_better::ret23(D<baseAddress23, UUID>::*)(cocos2d::CCObject*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress23 = (derivedType23)(&D<baseAddress23, UUID>::removeObject);
        if (baseAddress23 != derivedAddress23) {
        	Interface::get()->logInfo("Adding hook at function CCArray::removeObject", Severity::Debug);
            Interface::get()->addHook("CCArray::removeObject", (void*)temp_name_find_better::address23(), (void*)addresser::getNonVirtual(derivedAddress23));
        }

    	using baseType24 = temp_name_find_better::ret24(CCArray::*)(unsigned int, bool) ;
		constexpr auto baseAddress24 = (baseType24)(&CCArray::removeObjectAtIndex);
		using derivedType24 = temp_name_find_better::ret24(D<baseAddress24, UUID>::*)(unsigned int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress24 = (derivedType24)(&D<baseAddress24, UUID>::removeObjectAtIndex);
        if (baseAddress24 != derivedAddress24) {
        	Interface::get()->logInfo("Adding hook at function CCArray::removeObjectAtIndex", Severity::Debug);
            Interface::get()->addHook("CCArray::removeObjectAtIndex", (void*)temp_name_find_better::address24(), (void*)addresser::getNonVirtual(derivedAddress24));
        }

    	using baseType25 = temp_name_find_better::ret25(CCArray::*)(unsigned int) ;
		constexpr auto baseAddress25 = (baseType25)(&CCArray::stringAtIndex);
		using derivedType25 = temp_name_find_better::ret25(D<baseAddress25, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress25 = (derivedType25)(&D<baseAddress25, UUID>::stringAtIndex);
        if (baseAddress25 != derivedAddress25) {
        	Interface::get()->logInfo("Adding hook at function CCArray::stringAtIndex", Severity::Debug);
            Interface::get()->addHook("CCArray::stringAtIndex", (void*)temp_name_find_better::address25(), (void*)addresser::getNonVirtual(derivedAddress25));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCLabelBMFont : cocos2d::CCLabelBMFont, ModifierBase {
    $CCLabelBMFont(const $CCLabelBMFont& c) : CCLabelBMFont(c) {}
    $CCLabelBMFont() : $CCLabelBMFont(*this) {}
    ~$CCLabelBMFont() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCLabelBMFont);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType124 = temp_name_find_better::ret124(*)(char const*, char const*);
		constexpr auto baseAddress124 = (baseType124)(&CCLabelBMFont::create);
		using derivedType124 = temp_name_find_better::ret124(*)(char const*, char const*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress124 = (derivedType124)(&D<baseAddress124, UUID>::create);
        if (baseAddress124 != derivedAddress124) {
        	Interface::get()->logInfo("Adding hook at function CCLabelBMFont::create", Severity::Debug);
            Interface::get()->addHook("CCLabelBMFont::create", (void*)temp_name_find_better::address124(), (void*)addresser::getNonVirtual(derivedAddress124));
        }

    	using baseType125 = temp_name_find_better::ret125(CCLabelBMFont::*)(float, float, float) ;
		constexpr auto baseAddress125 = (baseType125)(&CCLabelBMFont::limitLabelWidth);
		using derivedType125 = temp_name_find_better::ret125(D<baseAddress125, UUID>::*)(float, float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress125 = (derivedType125)(&D<baseAddress125, UUID>::limitLabelWidth);
        if (baseAddress125 != derivedAddress125) {
        	Interface::get()->logInfo("Adding hook at function CCLabelBMFont::limitLabelWidth", Severity::Debug);
            Interface::get()->addHook("CCLabelBMFont::limitLabelWidth", (void*)temp_name_find_better::address125(), (void*)addresser::getNonVirtual(derivedAddress125));
        }

    	using baseType126 = temp_name_find_better::ret126(CCLabelBMFont::*)(float) ;
		constexpr auto baseAddress126 = (baseType126)(&CCLabelBMFont::setScale);
		using derivedType126 = temp_name_find_better::ret126(D<baseAddress126, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress126 = (derivedType126)(&D<baseAddress126, UUID>::setScale);
        if (baseAddress126 != derivedAddress126) {
        	Interface::get()->logInfo("Adding hook at function CCLabelBMFont::setScale", Severity::Debug);
            Interface::get()->addHook("CCLabelBMFont::setScale", (void*)temp_name_find_better::address126(), (void*)addresser::getNonVirtual(derivedAddress126));
        }

    	using baseType127 = temp_name_find_better::ret127(CCLabelBMFont::*)(char const*, bool) ;
		constexpr auto baseAddress127 = (baseType127)(&CCLabelBMFont::setString);
		using derivedType127 = temp_name_find_better::ret127(D<baseAddress127, UUID>::*)(char const*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress127 = (derivedType127)(&D<baseAddress127, UUID>::setString);
        if (baseAddress127 != derivedAddress127) {
        	Interface::get()->logInfo("Adding hook at function CCLabelBMFont::setString", Severity::Debug);
            Interface::get()->addHook("CCLabelBMFont::setString", (void*)temp_name_find_better::address127(), (void*)addresser::getNonVirtual(derivedAddress127));
        }

    	using baseType128 = temp_name_find_better::ret128(CCLabelBMFont::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress128 = (baseType128)(&CCLabelBMFont::setAnchorPoint);
		using derivedType128 = temp_name_find_better::ret128(D<baseAddress128, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress128 = (derivedType128)(&D<baseAddress128, UUID>::setAnchorPoint);
        if (baseAddress128 != derivedAddress128) {
        	Interface::get()->logInfo("Adding hook at function CCLabelBMFont::setAnchorPoint", Severity::Debug);
            Interface::get()->addHook("CCLabelBMFont::setAnchorPoint", (void*)temp_name_find_better::address128(), (void*)addresser::getNonVirtual(derivedAddress128));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LabelGameObject : LabelGameObject, ModifierBase {
    $LabelGameObject(const $LabelGameObject& c) : LabelGameObject(c) {}
    $LabelGameObject() : $LabelGameObject(*this) {}
    ~$LabelGameObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LabelGameObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCBezierTo : cocos2d::CCBezierTo, ModifierBase {
    $CCBezierTo(const $CCBezierTo& c) : CCBezierTo(c) {}
    $CCBezierTo() : $CCBezierTo(*this) {}
    ~$CCBezierTo() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCBezierTo);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType26 = temp_name_find_better::ret26(*)(float, cocos2d::_ccBezierConfig const&);
		constexpr auto baseAddress26 = (baseType26)(&CCBezierTo::create);
		using derivedType26 = temp_name_find_better::ret26(*)(float, cocos2d::_ccBezierConfig const&);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress26 = (derivedType26)(&D<baseAddress26, UUID>::create);
        if (baseAddress26 != derivedAddress26) {
        	Interface::get()->logInfo("Adding hook at function CCBezierTo::create", Severity::Debug);
            Interface::get()->addHook("CCBezierTo::create", (void*)temp_name_find_better::address26(), (void*)addresser::getNonVirtual(derivedAddress26));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCIMEDelegate : cocos2d::CCIMEDelegate, ModifierBase {
    $CCIMEDelegate(const $CCIMEDelegate& c) : CCIMEDelegate(c) {}
    $CCIMEDelegate() : $CCIMEDelegate(*this) {}
    ~$CCIMEDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCIMEDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType107 = temp_name_find_better::ret107(CCIMEDelegate::*)() ;
		constexpr auto baseAddress107 = (baseType107)(&CCIMEDelegate::attachWithIME);
		using derivedType107 = temp_name_find_better::ret107(D<baseAddress107, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress107 = (derivedType107)(&D<baseAddress107, UUID>::attachWithIME);
        if (baseAddress107 != derivedAddress107) {
        	Interface::get()->logInfo("Adding hook at function CCIMEDelegate::attachWithIME", Severity::Debug);
            Interface::get()->addHook("CCIMEDelegate::attachWithIME", (void*)temp_name_find_better::address107(), (void*)addresser::getVirtual(derivedAddress107));
        }

    	using baseType108 = temp_name_find_better::ret108(CCIMEDelegate::*)() ;
		constexpr auto baseAddress108 = (baseType108)(&CCIMEDelegate::detachWithIME);
		using derivedType108 = temp_name_find_better::ret108(D<baseAddress108, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress108 = (derivedType108)(&D<baseAddress108, UUID>::detachWithIME);
        if (baseAddress108 != derivedAddress108) {
        	Interface::get()->logInfo("Adding hook at function CCIMEDelegate::detachWithIME", Severity::Debug);
            Interface::get()->addHook("CCIMEDelegate::detachWithIME", (void*)temp_name_find_better::address108(), (void*)addresser::getVirtual(derivedAddress108));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCDelayTime : cocos2d::CCDelayTime, ModifierBase {
    $CCDelayTime(const $CCDelayTime& c) : CCDelayTime(c) {}
    $CCDelayTime() : $CCDelayTime(*this) {}
    ~$CCDelayTime() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCDelayTime);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType41 = temp_name_find_better::ret41(*)(float);
		constexpr auto baseAddress41 = (baseType41)(&CCDelayTime::create);
		using derivedType41 = temp_name_find_better::ret41(*)(float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress41 = (derivedType41)(&D<baseAddress41, UUID>::create);
        if (baseAddress41 != derivedAddress41) {
        	Interface::get()->logInfo("Adding hook at function CCDelayTime::create", Severity::Debug);
            Interface::get()->addHook("CCDelayTime::create", (void*)temp_name_find_better::address41(), (void*)addresser::getNonVirtual(derivedAddress41));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCDictionary : cocos2d::CCDictionary, ModifierBase {
    $CCDictionary(const $CCDictionary& c) : CCDictionary(c) {}
    $CCDictionary() : $CCDictionary(*this) {}
    ~$CCDictionary() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCDictionary);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType42 = temp_name_find_better::ret42(CCDictionary::*)() ;
		constexpr auto baseAddress42 = (baseType42)(&CCDictionary::allKeys);
		using derivedType42 = temp_name_find_better::ret42(D<baseAddress42, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress42 = (derivedType42)(&D<baseAddress42, UUID>::allKeys);
        if (baseAddress42 != derivedAddress42) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::allKeys", Severity::Debug);
            Interface::get()->addHook("CCDictionary::allKeys", (void*)temp_name_find_better::address42(), (void*)addresser::getNonVirtual(derivedAddress42));
        }

    	using baseType43 = temp_name_find_better::ret43(CCDictionary::*)() ;
		constexpr auto baseAddress43 = (baseType43)(&CCDictionary::count);
		using derivedType43 = temp_name_find_better::ret43(D<baseAddress43, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress43 = (derivedType43)(&D<baseAddress43, UUID>::count);
        if (baseAddress43 != derivedAddress43) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::count", Severity::Debug);
            Interface::get()->addHook("CCDictionary::count", (void*)temp_name_find_better::address43(), (void*)addresser::getNonVirtual(derivedAddress43));
        }

		using baseType44 = temp_name_find_better::ret44(*)();
		constexpr auto baseAddress44 = (baseType44)(&CCDictionary::create);
		using derivedType44 = temp_name_find_better::ret44(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress44 = (derivedType44)(&D<baseAddress44, UUID>::create);
        if (baseAddress44 != derivedAddress44) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::create", Severity::Debug);
            Interface::get()->addHook("CCDictionary::create", (void*)temp_name_find_better::address44(), (void*)addresser::getNonVirtual(derivedAddress44));
        }

    	using baseType45 = temp_name_find_better::ret45(CCDictionary::*)(intptr_t) ;
		constexpr auto baseAddress45 = (baseType45)(&CCDictionary::objectForKey);
		using derivedType45 = temp_name_find_better::ret45(D<baseAddress45, UUID>::*)(intptr_t) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress45 = (derivedType45)(&D<baseAddress45, UUID>::objectForKey);
        if (baseAddress45 != derivedAddress45) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::objectForKey", Severity::Debug);
            Interface::get()->addHook("CCDictionary::objectForKey", (void*)temp_name_find_better::address45(), (void*)addresser::getNonVirtual(derivedAddress45));
        }

    	using baseType46 = temp_name_find_better::ret46(CCDictionary::*)(gd::string const&) ;
		constexpr auto baseAddress46 = (baseType46)(&CCDictionary::objectForKey);
		using derivedType46 = temp_name_find_better::ret46(D<baseAddress46, UUID>::*)(gd::string const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress46 = (derivedType46)(&D<baseAddress46, UUID>::objectForKey);
        if (baseAddress46 != derivedAddress46) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::objectForKey", Severity::Debug);
            Interface::get()->addHook("CCDictionary::objectForKey", (void*)temp_name_find_better::address46(), (void*)addresser::getNonVirtual(derivedAddress46));
        }

    	using baseType47 = temp_name_find_better::ret47(CCDictionary::*)() ;
		constexpr auto baseAddress47 = (baseType47)(&CCDictionary::removeAllObjects);
		using derivedType47 = temp_name_find_better::ret47(D<baseAddress47, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress47 = (derivedType47)(&D<baseAddress47, UUID>::removeAllObjects);
        if (baseAddress47 != derivedAddress47) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::removeAllObjects", Severity::Debug);
            Interface::get()->addHook("CCDictionary::removeAllObjects", (void*)temp_name_find_better::address47(), (void*)addresser::getNonVirtual(derivedAddress47));
        }

    	using baseType48 = temp_name_find_better::ret48(CCDictionary::*)(intptr_t) ;
		constexpr auto baseAddress48 = (baseType48)(&CCDictionary::removeObjectForKey);
		using derivedType48 = temp_name_find_better::ret48(D<baseAddress48, UUID>::*)(intptr_t) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress48 = (derivedType48)(&D<baseAddress48, UUID>::removeObjectForKey);
        if (baseAddress48 != derivedAddress48) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::removeObjectForKey", Severity::Debug);
            Interface::get()->addHook("CCDictionary::removeObjectForKey", (void*)temp_name_find_better::address48(), (void*)addresser::getNonVirtual(derivedAddress48));
        }

    	using baseType49 = temp_name_find_better::ret49(CCDictionary::*)(cocos2d::CCObject*, intptr_t) ;
		constexpr auto baseAddress49 = (baseType49)(&CCDictionary::setObject);
		using derivedType49 = temp_name_find_better::ret49(D<baseAddress49, UUID>::*)(cocos2d::CCObject*, intptr_t) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress49 = (derivedType49)(&D<baseAddress49, UUID>::setObject);
        if (baseAddress49 != derivedAddress49) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::setObject", Severity::Debug);
            Interface::get()->addHook("CCDictionary::setObject", (void*)temp_name_find_better::address49(), (void*)addresser::getNonVirtual(derivedAddress49));
        }

    	using baseType50 = temp_name_find_better::ret50(CCDictionary::*)(cocos2d::CCObject*, gd::string const&) ;
		constexpr auto baseAddress50 = (baseType50)(&CCDictionary::setObject);
		using derivedType50 = temp_name_find_better::ret50(D<baseAddress50, UUID>::*)(cocos2d::CCObject*, gd::string const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress50 = (derivedType50)(&D<baseAddress50, UUID>::setObject);
        if (baseAddress50 != derivedAddress50) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::setObject", Severity::Debug);
            Interface::get()->addHook("CCDictionary::setObject", (void*)temp_name_find_better::address50(), (void*)addresser::getNonVirtual(derivedAddress50));
        }

    	using baseType51 = temp_name_find_better::ret51(CCDictionary::*)(intptr_t) ;
		constexpr auto baseAddress51 = (baseType51)(&CCDictionary::valueForKey);
		using derivedType51 = temp_name_find_better::ret51(D<baseAddress51, UUID>::*)(intptr_t) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress51 = (derivedType51)(&D<baseAddress51, UUID>::valueForKey);
        if (baseAddress51 != derivedAddress51) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::valueForKey", Severity::Debug);
            Interface::get()->addHook("CCDictionary::valueForKey", (void*)temp_name_find_better::address51(), (void*)addresser::getNonVirtual(derivedAddress51));
        }

    	using baseType52 = temp_name_find_better::ret52(CCDictionary::*)(gd::string const&) ;
		constexpr auto baseAddress52 = (baseType52)(&CCDictionary::valueForKey);
		using derivedType52 = temp_name_find_better::ret52(D<baseAddress52, UUID>::*)(gd::string const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress52 = (derivedType52)(&D<baseAddress52, UUID>::valueForKey);
        if (baseAddress52 != derivedAddress52) {
        	Interface::get()->logInfo("Adding hook at function CCDictionary::valueForKey", Severity::Debug);
            Interface::get()->addHook("CCDictionary::valueForKey", (void*)temp_name_find_better::address52(), (void*)addresser::getNonVirtual(derivedAddress52));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelSearchLayer : LevelSearchLayer, ModifierBase {
    $LevelSearchLayer(const $LevelSearchLayer& c) : LevelSearchLayer(c) {}
    $LevelSearchLayer() : $LevelSearchLayer(*this) {}
    ~$LevelSearchLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelSearchLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1597 = temp_name_find_better::ret1597(*)();
		constexpr auto baseAddress1597 = (baseType1597)(&LevelSearchLayer::create);
		using derivedType1597 = temp_name_find_better::ret1597(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1597 = (derivedType1597)(&D<baseAddress1597, UUID>::create);
        if (baseAddress1597 != derivedAddress1597) {
        	Interface::get()->logInfo("Adding hook at function LevelSearchLayer::create", Severity::Debug);
            Interface::get()->addHook("LevelSearchLayer::create", (void*)temp_name_find_better::address1597(), (void*)addresser::getNonVirtual(derivedAddress1597));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCStandardTouchHandler : cocos2d::CCStandardTouchHandler, ModifierBase {
    $CCStandardTouchHandler(const $CCStandardTouchHandler& c) : CCStandardTouchHandler(c) {}
    $CCStandardTouchHandler() : $CCStandardTouchHandler(*this) {}
    ~$CCStandardTouchHandler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCStandardTouchHandler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType493 = temp_name_find_better::ret493(*)(cocos2d::CCTouchDelegate*, int);
		constexpr auto baseAddress493 = (baseType493)(&CCStandardTouchHandler::handlerWithDelegate);
		using derivedType493 = temp_name_find_better::ret493(*)(cocos2d::CCTouchDelegate*, int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress493 = (derivedType493)(&D<baseAddress493, UUID>::handlerWithDelegate);
        if (baseAddress493 != derivedAddress493) {
        	Interface::get()->logInfo("Adding hook at function CCStandardTouchHandler::handlerWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCStandardTouchHandler::handlerWithDelegate", (void*)temp_name_find_better::address493(), (void*)addresser::getNonVirtual(derivedAddress493));
        }

    	using baseType494 = temp_name_find_better::ret494(CCStandardTouchHandler::*)(cocos2d::CCTouchDelegate*, int) ;
		constexpr auto baseAddress494 = (baseType494)(&CCStandardTouchHandler::initWithDelegate);
		using derivedType494 = temp_name_find_better::ret494(D<baseAddress494, UUID>::*)(cocos2d::CCTouchDelegate*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress494 = (derivedType494)(&D<baseAddress494, UUID>::initWithDelegate);
        if (baseAddress494 != derivedAddress494) {
        	Interface::get()->logInfo("Adding hook at function CCStandardTouchHandler::initWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCStandardTouchHandler::initWithDelegate", (void*)temp_name_find_better::address494(), (void*)addresser::getVirtual(derivedAddress494));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCLabelTTF : cocos2d::CCLabelTTF, ModifierBase {
    $CCLabelTTF(const $CCLabelTTF& c) : CCLabelTTF(c) {}
    $CCLabelTTF() : $CCLabelTTF(*this) {}
    ~$CCLabelTTF() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCLabelTTF);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType129 = temp_name_find_better::ret129(CCLabelTTF::*)() ;
		constexpr auto baseAddress129 = (baseType129)(&CCLabelTTF::updateTexture);
		using derivedType129 = temp_name_find_better::ret129(D<baseAddress129, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress129 = (derivedType129)(&D<baseAddress129, UUID>::updateTexture);
        if (baseAddress129 != derivedAddress129) {
        	Interface::get()->logInfo("Adding hook at function CCLabelTTF::updateTexture", Severity::Debug);
            Interface::get()->addHook("CCLabelTTF::updateTexture", (void*)temp_name_find_better::address129(), (void*)addresser::getNonVirtual(derivedAddress129));
        }

    	using baseType130 = temp_name_find_better::ret130(CCLabelTTF::*)(char const*) ;
		constexpr auto baseAddress130 = (baseType130)(&CCLabelTTF::setString);
		using derivedType130 = temp_name_find_better::ret130(D<baseAddress130, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress130 = (derivedType130)(&D<baseAddress130, UUID>::setString);
        if (baseAddress130 != derivedAddress130) {
        	Interface::get()->logInfo("Adding hook at function CCLabelTTF::setString", Severity::Debug);
            Interface::get()->addHook("CCLabelTTF::setString", (void*)temp_name_find_better::address130(), (void*)addresser::getVirtual(derivedAddress130));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSpriteFrameCache : cocos2d::CCSpriteFrameCache, ModifierBase {
    $CCSpriteFrameCache(const $CCSpriteFrameCache& c) : CCSpriteFrameCache(c) {}
    $CCSpriteFrameCache() : $CCSpriteFrameCache(*this) {}
    ~$CCSpriteFrameCache() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSpriteFrameCache);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType490 = temp_name_find_better::ret490(CCSpriteFrameCache::*)(char const*) ;
		constexpr auto baseAddress490 = (baseType490)(&CCSpriteFrameCache::addSpriteFramesWithFile);
		using derivedType490 = temp_name_find_better::ret490(D<baseAddress490, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress490 = (derivedType490)(&D<baseAddress490, UUID>::addSpriteFramesWithFile);
        if (baseAddress490 != derivedAddress490) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteFrameCache::addSpriteFramesWithFile", Severity::Debug);
            Interface::get()->addHook("CCSpriteFrameCache::addSpriteFramesWithFile", (void*)temp_name_find_better::address490(), (void*)addresser::getNonVirtual(derivedAddress490));
        }

		using baseType491 = temp_name_find_better::ret491(*)();
		constexpr auto baseAddress491 = (baseType491)(&CCSpriteFrameCache::sharedSpriteFrameCache);
		using derivedType491 = temp_name_find_better::ret491(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress491 = (derivedType491)(&D<baseAddress491, UUID>::sharedSpriteFrameCache);
        if (baseAddress491 != derivedAddress491) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteFrameCache::sharedSpriteFrameCache", Severity::Debug);
            Interface::get()->addHook("CCSpriteFrameCache::sharedSpriteFrameCache", (void*)temp_name_find_better::address491(), (void*)addresser::getNonVirtual(derivedAddress491));
        }

    	using baseType492 = temp_name_find_better::ret492(CCSpriteFrameCache::*)(char const*) ;
		constexpr auto baseAddress492 = (baseType492)(&CCSpriteFrameCache::spriteFrameByName);
		using derivedType492 = temp_name_find_better::ret492(D<baseAddress492, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress492 = (derivedType492)(&D<baseAddress492, UUID>::spriteFrameByName);
        if (baseAddress492 != derivedAddress492) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteFrameCache::spriteFrameByName", Severity::Debug);
            Interface::get()->addHook("CCSpriteFrameCache::spriteFrameByName", (void*)temp_name_find_better::address492(), (void*)addresser::getNonVirtual(derivedAddress492));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCDirector : cocos2d::CCDirector, ModifierBase {
    $CCDirector(const $CCDirector& c) : CCDirector(c) {}
    $CCDirector() : $CCDirector(*this) {}
    ~$CCDirector() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCDirector);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType54 = temp_name_find_better::ret54(CCDirector::*)() ;
		constexpr auto baseAddress54 = (baseType54)(&CCDirector::init);
		using derivedType54 = temp_name_find_better::ret54(D<baseAddress54, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress54 = (derivedType54)(&D<baseAddress54, UUID>::init);
        if (baseAddress54 != derivedAddress54) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::init", Severity::Debug);
            Interface::get()->addHook("CCDirector::init", (void*)temp_name_find_better::address54(), (void*)addresser::getVirtual(derivedAddress54));
        }

    	using baseType55 = temp_name_find_better::ret55(CCDirector::*)() ;
		constexpr auto baseAddress55 = (baseType55)(&CCDirector::getScheduler);
		using derivedType55 = temp_name_find_better::ret55(D<baseAddress55, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress55 = (derivedType55)(&D<baseAddress55, UUID>::getScheduler);
        if (baseAddress55 != derivedAddress55) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getScheduler", Severity::Debug);
            Interface::get()->addHook("CCDirector::getScheduler", (void*)temp_name_find_better::address55(), (void*)addresser::getVirtual(derivedAddress55));
        }

    	using baseType56 = temp_name_find_better::ret56(CCDirector::*)(cocos2d::CCScheduler*) ;
		constexpr auto baseAddress56 = (baseType56)(&CCDirector::setScheduler);
		using derivedType56 = temp_name_find_better::ret56(D<baseAddress56, UUID>::*)(cocos2d::CCScheduler*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress56 = (derivedType56)(&D<baseAddress56, UUID>::setScheduler);
        if (baseAddress56 != derivedAddress56) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setScheduler", Severity::Debug);
            Interface::get()->addHook("CCDirector::setScheduler", (void*)temp_name_find_better::address56(), (void*)addresser::getVirtual(derivedAddress56));
        }

    	using baseType57 = temp_name_find_better::ret57(CCDirector::*)() ;
		constexpr auto baseAddress57 = (baseType57)(&CCDirector::getActionManager);
		using derivedType57 = temp_name_find_better::ret57(D<baseAddress57, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress57 = (derivedType57)(&D<baseAddress57, UUID>::getActionManager);
        if (baseAddress57 != derivedAddress57) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getActionManager", Severity::Debug);
            Interface::get()->addHook("CCDirector::getActionManager", (void*)temp_name_find_better::address57(), (void*)addresser::getVirtual(derivedAddress57));
        }

    	using baseType58 = temp_name_find_better::ret58(CCDirector::*)(cocos2d::CCActionManager*) ;
		constexpr auto baseAddress58 = (baseType58)(&CCDirector::setActionManager);
		using derivedType58 = temp_name_find_better::ret58(D<baseAddress58, UUID>::*)(cocos2d::CCActionManager*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress58 = (derivedType58)(&D<baseAddress58, UUID>::setActionManager);
        if (baseAddress58 != derivedAddress58) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setActionManager", Severity::Debug);
            Interface::get()->addHook("CCDirector::setActionManager", (void*)temp_name_find_better::address58(), (void*)addresser::getVirtual(derivedAddress58));
        }

    	using baseType59 = temp_name_find_better::ret59(CCDirector::*)() ;
		constexpr auto baseAddress59 = (baseType59)(&CCDirector::getTouchDispatcher);
		using derivedType59 = temp_name_find_better::ret59(D<baseAddress59, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress59 = (derivedType59)(&D<baseAddress59, UUID>::getTouchDispatcher);
        if (baseAddress59 != derivedAddress59) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::getTouchDispatcher", (void*)temp_name_find_better::address59(), (void*)addresser::getVirtual(derivedAddress59));
        }

    	using baseType60 = temp_name_find_better::ret60(CCDirector::*)(cocos2d::CCTouchDispatcher*) ;
		constexpr auto baseAddress60 = (baseType60)(&CCDirector::setTouchDispatcher);
		using derivedType60 = temp_name_find_better::ret60(D<baseAddress60, UUID>::*)(cocos2d::CCTouchDispatcher*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress60 = (derivedType60)(&D<baseAddress60, UUID>::setTouchDispatcher);
        if (baseAddress60 != derivedAddress60) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::setTouchDispatcher", (void*)temp_name_find_better::address60(), (void*)addresser::getVirtual(derivedAddress60));
        }

    	using baseType61 = temp_name_find_better::ret61(CCDirector::*)() ;
		constexpr auto baseAddress61 = (baseType61)(&CCDirector::getKeypadDispatcher);
		using derivedType61 = temp_name_find_better::ret61(D<baseAddress61, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress61 = (derivedType61)(&D<baseAddress61, UUID>::getKeypadDispatcher);
        if (baseAddress61 != derivedAddress61) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getKeypadDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::getKeypadDispatcher", (void*)temp_name_find_better::address61(), (void*)addresser::getVirtual(derivedAddress61));
        }

    	using baseType62 = temp_name_find_better::ret62(CCDirector::*)(cocos2d::CCKeypadDispatcher*) ;
		constexpr auto baseAddress62 = (baseType62)(&CCDirector::setKeypadDispatcher);
		using derivedType62 = temp_name_find_better::ret62(D<baseAddress62, UUID>::*)(cocos2d::CCKeypadDispatcher*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress62 = (derivedType62)(&D<baseAddress62, UUID>::setKeypadDispatcher);
        if (baseAddress62 != derivedAddress62) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setKeypadDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::setKeypadDispatcher", (void*)temp_name_find_better::address62(), (void*)addresser::getVirtual(derivedAddress62));
        }

    	using baseType63 = temp_name_find_better::ret63(CCDirector::*)() ;
		constexpr auto baseAddress63 = (baseType63)(&CCDirector::getKeyboardDispatcher);
		using derivedType63 = temp_name_find_better::ret63(D<baseAddress63, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress63 = (derivedType63)(&D<baseAddress63, UUID>::getKeyboardDispatcher);
        if (baseAddress63 != derivedAddress63) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getKeyboardDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::getKeyboardDispatcher", (void*)temp_name_find_better::address63(), (void*)addresser::getVirtual(derivedAddress63));
        }

    	using baseType64 = temp_name_find_better::ret64(CCDirector::*)(cocos2d::CCKeyboardDispatcher*) ;
		constexpr auto baseAddress64 = (baseType64)(&CCDirector::setKeyboardDispatcher);
		using derivedType64 = temp_name_find_better::ret64(D<baseAddress64, UUID>::*)(cocos2d::CCKeyboardDispatcher*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress64 = (derivedType64)(&D<baseAddress64, UUID>::setKeyboardDispatcher);
        if (baseAddress64 != derivedAddress64) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setKeyboardDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::setKeyboardDispatcher", (void*)temp_name_find_better::address64(), (void*)addresser::getVirtual(derivedAddress64));
        }

    	using baseType65 = temp_name_find_better::ret65(CCDirector::*)() ;
		constexpr auto baseAddress65 = (baseType65)(&CCDirector::getMouseDispatcher);
		using derivedType65 = temp_name_find_better::ret65(D<baseAddress65, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress65 = (derivedType65)(&D<baseAddress65, UUID>::getMouseDispatcher);
        if (baseAddress65 != derivedAddress65) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getMouseDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::getMouseDispatcher", (void*)temp_name_find_better::address65(), (void*)addresser::getVirtual(derivedAddress65));
        }

    	using baseType66 = temp_name_find_better::ret66(CCDirector::*)(cocos2d::CCMouseDispatcher*) ;
		constexpr auto baseAddress66 = (baseType66)(&CCDirector::setMouseDispatcher);
		using derivedType66 = temp_name_find_better::ret66(D<baseAddress66, UUID>::*)(cocos2d::CCMouseDispatcher*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress66 = (derivedType66)(&D<baseAddress66, UUID>::setMouseDispatcher);
        if (baseAddress66 != derivedAddress66) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setMouseDispatcher", Severity::Debug);
            Interface::get()->addHook("CCDirector::setMouseDispatcher", (void*)temp_name_find_better::address66(), (void*)addresser::getVirtual(derivedAddress66));
        }

    	using baseType67 = temp_name_find_better::ret67(CCDirector::*)() ;
		constexpr auto baseAddress67 = (baseType67)(&CCDirector::getAccelerometer);
		using derivedType67 = temp_name_find_better::ret67(D<baseAddress67, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress67 = (derivedType67)(&D<baseAddress67, UUID>::getAccelerometer);
        if (baseAddress67 != derivedAddress67) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getAccelerometer", Severity::Debug);
            Interface::get()->addHook("CCDirector::getAccelerometer", (void*)temp_name_find_better::address67(), (void*)addresser::getVirtual(derivedAddress67));
        }

    	using baseType68 = temp_name_find_better::ret68(CCDirector::*)(cocos2d::CCAccelerometer*) ;
		constexpr auto baseAddress68 = (baseType68)(&CCDirector::setAccelerometer);
		using derivedType68 = temp_name_find_better::ret68(D<baseAddress68, UUID>::*)(cocos2d::CCAccelerometer*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress68 = (derivedType68)(&D<baseAddress68, UUID>::setAccelerometer);
        if (baseAddress68 != derivedAddress68) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setAccelerometer", Severity::Debug);
            Interface::get()->addHook("CCDirector::setAccelerometer", (void*)temp_name_find_better::address68(), (void*)addresser::getVirtual(derivedAddress68));
        }

    	using baseType69 = temp_name_find_better::ret69(CCDirector::*)() ;
		constexpr auto baseAddress69 = (baseType69)(&CCDirector::getDeltaTime);
		using derivedType69 = temp_name_find_better::ret69(D<baseAddress69, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress69 = (derivedType69)(&D<baseAddress69, UUID>::getDeltaTime);
        if (baseAddress69 != derivedAddress69) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getDeltaTime", Severity::Debug);
            Interface::get()->addHook("CCDirector::getDeltaTime", (void*)temp_name_find_better::address69(), (void*)addresser::getVirtual(derivedAddress69));
        }

    	using baseType70 = temp_name_find_better::ret70(CCDirector::*)() ;
		constexpr auto baseAddress70 = (baseType70)(&CCDirector::getSceneDelegate);
		using derivedType70 = temp_name_find_better::ret70(D<baseAddress70, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress70 = (derivedType70)(&D<baseAddress70, UUID>::getSceneDelegate);
        if (baseAddress70 != derivedAddress70) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getSceneDelegate", Severity::Debug);
            Interface::get()->addHook("CCDirector::getSceneDelegate", (void*)temp_name_find_better::address70(), (void*)addresser::getVirtual(derivedAddress70));
        }

    	using baseType71 = temp_name_find_better::ret71(CCDirector::*)(cocos2d::CCSceneDelegate*) ;
		constexpr auto baseAddress71 = (baseType71)(&CCDirector::setSceneDelegate);
		using derivedType71 = temp_name_find_better::ret71(D<baseAddress71, UUID>::*)(cocos2d::CCSceneDelegate*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress71 = (derivedType71)(&D<baseAddress71, UUID>::setSceneDelegate);
        if (baseAddress71 != derivedAddress71) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setSceneDelegate", Severity::Debug);
            Interface::get()->addHook("CCDirector::setSceneDelegate", (void*)temp_name_find_better::address71(), (void*)addresser::getVirtual(derivedAddress71));
        }

    	using baseType72 = temp_name_find_better::ret72(CCDirector::*)() ;
		constexpr auto baseAddress72 = (baseType72)(&CCDirector::getWinSize);
		using derivedType72 = temp_name_find_better::ret72(D<baseAddress72, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress72 = (derivedType72)(&D<baseAddress72, UUID>::getWinSize);
        if (baseAddress72 != derivedAddress72) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::getWinSize", Severity::Debug);
            Interface::get()->addHook("CCDirector::getWinSize", (void*)temp_name_find_better::address72(), (void*)addresser::getNonVirtual(derivedAddress72));
        }

    	using baseType73 = temp_name_find_better::ret73(CCDirector::*)(cocos2d::CCScene*) ;
		constexpr auto baseAddress73 = (baseType73)(&CCDirector::pushScene);
		using derivedType73 = temp_name_find_better::ret73(D<baseAddress73, UUID>::*)(cocos2d::CCScene*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress73 = (derivedType73)(&D<baseAddress73, UUID>::pushScene);
        if (baseAddress73 != derivedAddress73) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::pushScene", Severity::Debug);
            Interface::get()->addHook("CCDirector::pushScene", (void*)temp_name_find_better::address73(), (void*)addresser::getNonVirtual(derivedAddress73));
        }

    	using baseType74 = temp_name_find_better::ret74(CCDirector::*)(cocos2d::CCScene*) ;
		constexpr auto baseAddress74 = (baseType74)(&CCDirector::replaceScene);
		using derivedType74 = temp_name_find_better::ret74(D<baseAddress74, UUID>::*)(cocos2d::CCScene*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress74 = (derivedType74)(&D<baseAddress74, UUID>::replaceScene);
        if (baseAddress74 != derivedAddress74) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::replaceScene", Severity::Debug);
            Interface::get()->addHook("CCDirector::replaceScene", (void*)temp_name_find_better::address74(), (void*)addresser::getNonVirtual(derivedAddress74));
        }

    	using baseType75 = temp_name_find_better::ret75(CCDirector::*)() ;
		constexpr auto baseAddress75 = (baseType75)(&CCDirector::resetSmoothFixCounter);
		using derivedType75 = temp_name_find_better::ret75(D<baseAddress75, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress75 = (derivedType75)(&D<baseAddress75, UUID>::resetSmoothFixCounter);
        if (baseAddress75 != derivedAddress75) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::resetSmoothFixCounter", Severity::Debug);
            Interface::get()->addHook("CCDirector::resetSmoothFixCounter", (void*)temp_name_find_better::address75(), (void*)addresser::getNonVirtual(derivedAddress75));
        }

		using baseType76 = temp_name_find_better::ret76(*)();
		constexpr auto baseAddress76 = (baseType76)(&CCDirector::sharedDirector);
		using derivedType76 = temp_name_find_better::ret76(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress76 = (derivedType76)(&D<baseAddress76, UUID>::sharedDirector);
        if (baseAddress76 != derivedAddress76) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::sharedDirector", Severity::Debug);
            Interface::get()->addHook("CCDirector::sharedDirector", (void*)temp_name_find_better::address76(), (void*)addresser::getNonVirtual(derivedAddress76));
        }

    	using baseType77 = temp_name_find_better::ret77(CCDirector::*)() ;
		constexpr auto baseAddress77 = (baseType77)(&CCDirector::calculateDeltaTime);
		using derivedType77 = temp_name_find_better::ret77(D<baseAddress77, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress77 = (derivedType77)(&D<baseAddress77, UUID>::calculateDeltaTime);
        if (baseAddress77 != derivedAddress77) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::calculateDeltaTime", Severity::Debug);
            Interface::get()->addHook("CCDirector::calculateDeltaTime", (void*)temp_name_find_better::address77(), (void*)addresser::getNonVirtual(derivedAddress77));
        }

    	using baseType78 = temp_name_find_better::ret78(CCDirector::*)() ;
		constexpr auto baseAddress78 = (baseType78)(&CCDirector::calculateMPF);
		using derivedType78 = temp_name_find_better::ret78(D<baseAddress78, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress78 = (derivedType78)(&D<baseAddress78, UUID>::calculateMPF);
        if (baseAddress78 != derivedAddress78) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::calculateMPF", Severity::Debug);
            Interface::get()->addHook("CCDirector::calculateMPF", (void*)temp_name_find_better::address78(), (void*)addresser::getNonVirtual(derivedAddress78));
        }

    	using baseType79 = temp_name_find_better::ret79(CCDirector::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress79 = (baseType79)(&CCDirector::convertToGL);
		using derivedType79 = temp_name_find_better::ret79(D<baseAddress79, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress79 = (derivedType79)(&D<baseAddress79, UUID>::convertToGL);
        if (baseAddress79 != derivedAddress79) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::convertToGL", Severity::Debug);
            Interface::get()->addHook("CCDirector::convertToGL", (void*)temp_name_find_better::address79(), (void*)addresser::getNonVirtual(derivedAddress79));
        }

    	using baseType80 = temp_name_find_better::ret80(CCDirector::*)() ;
		constexpr auto baseAddress80 = (baseType80)(&CCDirector::drawScene);
		using derivedType80 = temp_name_find_better::ret80(D<baseAddress80, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress80 = (derivedType80)(&D<baseAddress80, UUID>::drawScene);
        if (baseAddress80 != derivedAddress80) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::drawScene", Severity::Debug);
            Interface::get()->addHook("CCDirector::drawScene", (void*)temp_name_find_better::address80(), (void*)addresser::getNonVirtual(derivedAddress80));
        }

    	using baseType81 = temp_name_find_better::ret81(CCDirector::*)() ;
		constexpr auto baseAddress81 = (baseType81)(&CCDirector::setNextScene);
		using derivedType81 = temp_name_find_better::ret81(D<baseAddress81, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress81 = (derivedType81)(&D<baseAddress81, UUID>::setNextScene);
        if (baseAddress81 != derivedAddress81) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::setNextScene", Severity::Debug);
            Interface::get()->addHook("CCDirector::setNextScene", (void*)temp_name_find_better::address81(), (void*)addresser::getNonVirtual(derivedAddress81));
        }

    	using baseType82 = temp_name_find_better::ret82(CCDirector::*)() ;
		constexpr auto baseAddress82 = (baseType82)(&CCDirector::showStats);
		using derivedType82 = temp_name_find_better::ret82(D<baseAddress82, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress82 = (derivedType82)(&D<baseAddress82, UUID>::showStats);
        if (baseAddress82 != derivedAddress82) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::showStats", Severity::Debug);
            Interface::get()->addHook("CCDirector::showStats", (void*)temp_name_find_better::address82(), (void*)addresser::getNonVirtual(derivedAddress82));
        }

    	using baseType83 = temp_name_find_better::ret83(CCDirector::*)(cocos2d::TextureQuality) ;
		constexpr auto baseAddress83 = (baseType83)(&CCDirector::updateContentScale);
		using derivedType83 = temp_name_find_better::ret83(D<baseAddress83, UUID>::*)(cocos2d::TextureQuality) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress83 = (derivedType83)(&D<baseAddress83, UUID>::updateContentScale);
        if (baseAddress83 != derivedAddress83) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::updateContentScale", Severity::Debug);
            Interface::get()->addHook("CCDirector::updateContentScale", (void*)temp_name_find_better::address83(), (void*)addresser::getNonVirtual(derivedAddress83));
        }

    	using baseType84 = temp_name_find_better::ret84(CCDirector::*)(float, cocos2d::PopTransition) ;
		constexpr auto baseAddress84 = (baseType84)(&CCDirector::popSceneWithTransition);
		using derivedType84 = temp_name_find_better::ret84(D<baseAddress84, UUID>::*)(float, cocos2d::PopTransition) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress84 = (derivedType84)(&D<baseAddress84, UUID>::popSceneWithTransition);
        if (baseAddress84 != derivedAddress84) {
        	Interface::get()->logInfo("Adding hook at function CCDirector::popSceneWithTransition", Severity::Debug);
            Interface::get()->addHook("CCDirector::popSceneWithTransition", (void*)temp_name_find_better::address84(), (void*)addresser::getNonVirtual(derivedAddress84));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCFadeTo : cocos2d::CCFadeTo, ModifierBase {
    $CCFadeTo(const $CCFadeTo& c) : CCFadeTo(c) {}
    $CCFadeTo() : $CCFadeTo(*this) {}
    ~$CCFadeTo() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCFadeTo);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType104 = temp_name_find_better::ret104(*)(float, unsigned char);
		constexpr auto baseAddress104 = (baseType104)(&CCFadeTo::create);
		using derivedType104 = temp_name_find_better::ret104(*)(float, unsigned char);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress104 = (derivedType104)(&D<baseAddress104, UUID>::create);
        if (baseAddress104 != derivedAddress104) {
        	Interface::get()->logInfo("Adding hook at function CCFadeTo::create", Severity::Debug);
            Interface::get()->addHook("CCFadeTo::create", (void*)temp_name_find_better::address104(), (void*)addresser::getNonVirtual(derivedAddress104));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCEaseElasticOut : cocos2d::CCEaseElasticOut, ModifierBase {
    $CCEaseElasticOut(const $CCEaseElasticOut& c) : CCEaseElasticOut(c) {}
    $CCEaseElasticOut() : $CCEaseElasticOut(*this) {}
    ~$CCEaseElasticOut() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCEaseElasticOut);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType94 = temp_name_find_better::ret94(*)(cocos2d::CCActionInterval*, float);
		constexpr auto baseAddress94 = (baseType94)(&CCEaseElasticOut::create);
		using derivedType94 = temp_name_find_better::ret94(*)(cocos2d::CCActionInterval*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress94 = (derivedType94)(&D<baseAddress94, UUID>::create);
        if (baseAddress94 != derivedAddress94) {
        	Interface::get()->logInfo("Adding hook at function CCEaseElasticOut::create", Severity::Debug);
            Interface::get()->addHook("CCEaseElasticOut::create", (void*)temp_name_find_better::address94(), (void*)addresser::getNonVirtual(derivedAddress94));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMouseHandler : cocos2d::CCMouseHandler, ModifierBase {
    $CCMouseHandler(const $CCMouseHandler& c) : CCMouseHandler(c) {}
    $CCMouseHandler() : $CCMouseHandler(*this) {}
    ~$CCMouseHandler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMouseHandler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType252 = temp_name_find_better::ret252(*)(cocos2d::CCMouseDelegate*);
		constexpr auto baseAddress252 = (baseType252)(&CCMouseHandler::handlerWithDelegate);
		using derivedType252 = temp_name_find_better::ret252(*)(cocos2d::CCMouseDelegate*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress252 = (derivedType252)(&D<baseAddress252, UUID>::handlerWithDelegate);
        if (baseAddress252 != derivedAddress252) {
        	Interface::get()->logInfo("Adding hook at function CCMouseHandler::handlerWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCMouseHandler::handlerWithDelegate", (void*)temp_name_find_better::address252(), (void*)addresser::getNonVirtual(derivedAddress252));
        }

    	using baseType253 = temp_name_find_better::ret253(CCMouseHandler::*)(cocos2d::CCMouseDelegate*) ;
		constexpr auto baseAddress253 = (baseType253)(&CCMouseHandler::initWithDelegate);
		using derivedType253 = temp_name_find_better::ret253(D<baseAddress253, UUID>::*)(cocos2d::CCMouseDelegate*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress253 = (derivedType253)(&D<baseAddress253, UUID>::initWithDelegate);
        if (baseAddress253 != derivedAddress253) {
        	Interface::get()->logInfo("Adding hook at function CCMouseHandler::initWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCMouseHandler::initWithDelegate", (void*)temp_name_find_better::address253(), (void*)addresser::getVirtual(derivedAddress253));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LoadingCircle : LoadingCircle, ModifierBase {
    $LoadingCircle(const $LoadingCircle& c) : LoadingCircle(c) {}
    $LoadingCircle() : $LoadingCircle(*this) {}
    ~$LoadingCircle() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LoadingCircle);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1608 = temp_name_find_better::ret1608(*)();
		constexpr auto baseAddress1608 = (baseType1608)(&LoadingCircle::create);
		using derivedType1608 = temp_name_find_better::ret1608(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1608 = (derivedType1608)(&D<baseAddress1608, UUID>::create);
        if (baseAddress1608 != derivedAddress1608) {
        	Interface::get()->logInfo("Adding hook at function LoadingCircle::create", Severity::Debug);
            Interface::get()->addHook("LoadingCircle::create", (void*)temp_name_find_better::address1608(), (void*)addresser::getNonVirtual(derivedAddress1608));
        }

    	using baseType1609 = temp_name_find_better::ret1609(LoadingCircle::*)() ;
		constexpr auto baseAddress1609 = (baseType1609)(&LoadingCircle::show);
		using derivedType1609 = temp_name_find_better::ret1609(D<baseAddress1609, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1609 = (derivedType1609)(&D<baseAddress1609, UUID>::show);
        if (baseAddress1609 != derivedAddress1609) {
        	Interface::get()->logInfo("Adding hook at function LoadingCircle::show", Severity::Debug);
            Interface::get()->addHook("LoadingCircle::show", (void*)temp_name_find_better::address1609(), (void*)addresser::getNonVirtual(derivedAddress1609));
        }

    	using baseType1610 = temp_name_find_better::ret1610(LoadingCircle::*)() ;
		constexpr auto baseAddress1610 = (baseType1610)(&LoadingCircle::fadeAndRemove);
		using derivedType1610 = temp_name_find_better::ret1610(D<baseAddress1610, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1610 = (derivedType1610)(&D<baseAddress1610, UUID>::fadeAndRemove);
        if (baseAddress1610 != derivedAddress1610) {
        	Interface::get()->logInfo("Adding hook at function LoadingCircle::fadeAndRemove", Severity::Debug);
            Interface::get()->addHook("LoadingCircle::fadeAndRemove", (void*)temp_name_find_better::address1610(), (void*)addresser::getNonVirtual(derivedAddress1610));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCImage : cocos2d::CCImage, ModifierBase {
    $CCImage(const $CCImage& c) : CCImage(c) {}
    $CCImage() : $CCImage(*this) {}
    ~$CCImage() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCImage);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType114 = temp_name_find_better::ret114(CCImage::*)(void*, int, cocos2d::CCImage::EImageFormat, int, int, int) ;
		constexpr auto baseAddress114 = (baseType114)(&CCImage::initWithImageData);
		using derivedType114 = temp_name_find_better::ret114(D<baseAddress114, UUID>::*)(void*, int, cocos2d::CCImage::EImageFormat, int, int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress114 = (derivedType114)(&D<baseAddress114, UUID>::initWithImageData);
        if (baseAddress114 != derivedAddress114) {
        	Interface::get()->logInfo("Adding hook at function CCImage::initWithImageData", Severity::Debug);
            Interface::get()->addHook("CCImage::initWithImageData", (void*)temp_name_find_better::address114(), (void*)addresser::getNonVirtual(derivedAddress114));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupInteractObjectPopup : SetupInteractObjectPopup, ModifierBase {
    $SetupInteractObjectPopup(const $SetupInteractObjectPopup& c) : SetupInteractObjectPopup(c) {}
    $SetupInteractObjectPopup() : $SetupInteractObjectPopup(*this) {}
    ~$SetupInteractObjectPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupInteractObjectPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCEaseIn : cocos2d::CCEaseIn, ModifierBase {
    $CCEaseIn(const $CCEaseIn& c) : CCEaseIn(c) {}
    $CCEaseIn() : $CCEaseIn(*this) {}
    ~$CCEaseIn() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCEaseIn);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType95 = temp_name_find_better::ret95(*)(cocos2d::CCActionInterval*, float);
		constexpr auto baseAddress95 = (baseType95)(&CCEaseIn::create);
		using derivedType95 = temp_name_find_better::ret95(*)(cocos2d::CCActionInterval*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress95 = (derivedType95)(&D<baseAddress95, UUID>::create);
        if (baseAddress95 != derivedAddress95) {
        	Interface::get()->logInfo("Adding hook at function CCEaseIn::create", Severity::Debug);
            Interface::get()->addHook("CCEaseIn::create", (void*)temp_name_find_better::address95(), (void*)addresser::getNonVirtual(derivedAddress95));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCEaseInOut : cocos2d::CCEaseInOut, ModifierBase {
    $CCEaseInOut(const $CCEaseInOut& c) : CCEaseInOut(c) {}
    $CCEaseInOut() : $CCEaseInOut(*this) {}
    ~$CCEaseInOut() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCEaseInOut);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType96 = temp_name_find_better::ret96(*)(cocos2d::CCActionInterval*, float);
		constexpr auto baseAddress96 = (baseType96)(&CCEaseInOut::create);
		using derivedType96 = temp_name_find_better::ret96(*)(cocos2d::CCActionInterval*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress96 = (derivedType96)(&D<baseAddress96, UUID>::create);
        if (baseAddress96 != derivedAddress96) {
        	Interface::get()->logInfo("Adding hook at function CCEaseInOut::create", Severity::Debug);
            Interface::get()->addHook("CCEaseInOut::create", (void*)temp_name_find_better::address96(), (void*)addresser::getNonVirtual(derivedAddress96));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCEaseOut : cocos2d::CCEaseOut, ModifierBase {
    $CCEaseOut(const $CCEaseOut& c) : CCEaseOut(c) {}
    $CCEaseOut() : $CCEaseOut(*this) {}
    ~$CCEaseOut() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCEaseOut);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType97 = temp_name_find_better::ret97(*)(cocos2d::CCActionInterval*, float);
		constexpr auto baseAddress97 = (baseType97)(&CCEaseOut::create);
		using derivedType97 = temp_name_find_better::ret97(*)(cocos2d::CCActionInterval*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress97 = (derivedType97)(&D<baseAddress97, UUID>::create);
        if (baseAddress97 != derivedAddress97) {
        	Interface::get()->logInfo("Adding hook at function CCEaseOut::create", Severity::Debug);
            Interface::get()->addHook("CCEaseOut::create", (void*)temp_name_find_better::address97(), (void*)addresser::getNonVirtual(derivedAddress97));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenuItemLabel : cocos2d::CCMenuItemLabel, ModifierBase {
    $CCMenuItemLabel(const $CCMenuItemLabel& c) : CCMenuItemLabel(c) {}
    $CCMenuItemLabel() : $CCMenuItemLabel(*this) {}
    ~$CCMenuItemLabel() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenuItemLabel);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType228 = temp_name_find_better::ret228(CCMenuItemLabel::*)() ;
		constexpr auto baseAddress228 = (baseType228)(&CCMenuItemLabel::activate);
		using derivedType228 = temp_name_find_better::ret228(D<baseAddress228, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress228 = (derivedType228)(&D<baseAddress228, UUID>::activate);
        if (baseAddress228 != derivedAddress228) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::activate", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::activate", (void*)temp_name_find_better::address228(), (void*)addresser::getVirtual(derivedAddress228));
        }

    	using baseType229 = temp_name_find_better::ret229(CCMenuItemLabel::*)() ;
		constexpr auto baseAddress229 = (baseType229)(&CCMenuItemLabel::selected);
		using derivedType229 = temp_name_find_better::ret229(D<baseAddress229, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress229 = (derivedType229)(&D<baseAddress229, UUID>::selected);
        if (baseAddress229 != derivedAddress229) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::selected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::selected", (void*)temp_name_find_better::address229(), (void*)addresser::getVirtual(derivedAddress229));
        }

    	using baseType230 = temp_name_find_better::ret230(CCMenuItemLabel::*)() ;
		constexpr auto baseAddress230 = (baseType230)(&CCMenuItemLabel::unselected);
		using derivedType230 = temp_name_find_better::ret230(D<baseAddress230, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress230 = (derivedType230)(&D<baseAddress230, UUID>::unselected);
        if (baseAddress230 != derivedAddress230) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::unselected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::unselected", (void*)temp_name_find_better::address230(), (void*)addresser::getVirtual(derivedAddress230));
        }

    	using baseType231 = temp_name_find_better::ret231(CCMenuItemLabel::*)(bool) ;
		constexpr auto baseAddress231 = (baseType231)(&CCMenuItemLabel::setEnabled);
		using derivedType231 = temp_name_find_better::ret231(D<baseAddress231, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress231 = (derivedType231)(&D<baseAddress231, UUID>::setEnabled);
        if (baseAddress231 != derivedAddress231) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::setEnabled", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::setEnabled", (void*)temp_name_find_better::address231(), (void*)addresser::getVirtual(derivedAddress231));
        }

    	using baseType232 = temp_name_find_better::ret232(CCMenuItemLabel::*)() ;
		constexpr auto baseAddress232 = (baseType232)(&CCMenuItemLabel::getDisabledColor);
		using derivedType232 = temp_name_find_better::ret232(D<baseAddress232, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress232 = (derivedType232)(&D<baseAddress232, UUID>::getDisabledColor);
        if (baseAddress232 != derivedAddress232) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::getDisabledColor", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::getDisabledColor", (void*)temp_name_find_better::address232(), (void*)addresser::getVirtual(derivedAddress232));
        }

    	using baseType233 = temp_name_find_better::ret233(CCMenuItemLabel::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress233 = (baseType233)(&CCMenuItemLabel::setDisabledColor);
		using derivedType233 = temp_name_find_better::ret233(D<baseAddress233, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress233 = (derivedType233)(&D<baseAddress233, UUID>::setDisabledColor);
        if (baseAddress233 != derivedAddress233) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::setDisabledColor", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::setDisabledColor", (void*)temp_name_find_better::address233(), (void*)addresser::getVirtual(derivedAddress233));
        }

    	using baseType234 = temp_name_find_better::ret234(CCMenuItemLabel::*)() ;
		constexpr auto baseAddress234 = (baseType234)(&CCMenuItemLabel::getLabel);
		using derivedType234 = temp_name_find_better::ret234(D<baseAddress234, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress234 = (derivedType234)(&D<baseAddress234, UUID>::getLabel);
        if (baseAddress234 != derivedAddress234) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::getLabel", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::getLabel", (void*)temp_name_find_better::address234(), (void*)addresser::getVirtual(derivedAddress234));
        }

    	using baseType235 = temp_name_find_better::ret235(CCMenuItemLabel::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress235 = (baseType235)(&CCMenuItemLabel::setLabel);
		using derivedType235 = temp_name_find_better::ret235(D<baseAddress235, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress235 = (derivedType235)(&D<baseAddress235, UUID>::setLabel);
        if (baseAddress235 != derivedAddress235) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemLabel::setLabel", Severity::Debug);
            Interface::get()->addHook("CCMenuItemLabel::setLabel", (void*)temp_name_find_better::address235(), (void*)addresser::getVirtual(derivedAddress235));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenuItemSpriteExtra : CCMenuItemSpriteExtra, ModifierBase {
    $CCMenuItemSpriteExtra(const $CCMenuItemSpriteExtra& c) : CCMenuItemSpriteExtra(c) {}
    $CCMenuItemSpriteExtra() : $CCMenuItemSpriteExtra(*this) {}
    ~$CCMenuItemSpriteExtra() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenuItemSpriteExtra);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address722)(this);
    }
    static bool _apply() {

		using baseType720 = temp_name_find_better::ret720(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		constexpr auto baseAddress720 = (baseType720)(&CCMenuItemSpriteExtra::create);
		using derivedType720 = temp_name_find_better::ret720(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress720 = (derivedType720)(&D<baseAddress720, UUID>::create);
        if (baseAddress720 != derivedAddress720) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::create", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::create", (void*)temp_name_find_better::address720(), (void*)addresser::getNonVirtual(derivedAddress720));
        }

    	using baseType721 = temp_name_find_better::ret721(CCMenuItemSpriteExtra::*)(float) ;
		constexpr auto baseAddress721 = (baseType721)(&CCMenuItemSpriteExtra::setSizeMult);
		using derivedType721 = temp_name_find_better::ret721(D<baseAddress721, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress721 = (derivedType721)(&D<baseAddress721, UUID>::setSizeMult);
        if (baseAddress721 != derivedAddress721) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::setSizeMult", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::setSizeMult", (void*)temp_name_find_better::address721(), (void*)addresser::getNonVirtual(derivedAddress721));
        }

    	using baseType722 = temp_name_find_better::ret722($CCMenuItemSpriteExtra::*)() ;
		constexpr auto baseAddress722 = (baseType722)(&$CCMenuItemSpriteExtra::constructor);
		using derivedType722 = temp_name_find_better::ret722(D<baseAddress722, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress722 = (derivedType722)(&D<baseAddress722, UUID>::constructor);
        if (baseAddress722 != derivedAddress722) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::constructor", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::constructor", (void*)temp_name_find_better::address722(), (void*)addresser::getNonVirtual(derivedAddress722));
        }

    	using baseType723 = temp_name_find_better::ret723(CCMenuItemSpriteExtra::*)(bool) ;
		constexpr auto baseAddress723 = (baseType723)(&CCMenuItemSpriteExtra::destructor);
		using derivedType723 = temp_name_find_better::ret723(D<baseAddress723, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress723 = (derivedType723)(&D<baseAddress723, UUID>::destructor);
        if (baseAddress723 != derivedAddress723) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::destructor", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::destructor", (void*)temp_name_find_better::address723(), (void*)addresser::getNonVirtual(derivedAddress723));
        }

    	using baseType724 = temp_name_find_better::ret724(CCMenuItemSpriteExtra::*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) ;
		constexpr auto baseAddress724 = (baseType724)(&CCMenuItemSpriteExtra::init);
		using derivedType724 = temp_name_find_better::ret724(D<baseAddress724, UUID>::*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress724 = (derivedType724)(&D<baseAddress724, UUID>::init);
        if (baseAddress724 != derivedAddress724) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::init", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::init", (void*)temp_name_find_better::address724(), (void*)addresser::getNonVirtual(derivedAddress724));
        }

    	using baseType725 = temp_name_find_better::ret725(CCMenuItemSpriteExtra::*)(cocos2d::CCNode) ;
		constexpr auto baseAddress725 = (baseType725)(&CCMenuItemSpriteExtra::init);
		using derivedType725 = temp_name_find_better::ret725(D<baseAddress725, UUID>::*)(cocos2d::CCNode) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress725 = (derivedType725)(&D<baseAddress725, UUID>::init);
        if (baseAddress725 != derivedAddress725) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::init", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::init", (void*)temp_name_find_better::address725(), (void*)addresser::getNonVirtual(derivedAddress725));
        }

    	using baseType726 = temp_name_find_better::ret726(CCMenuItemSpriteExtra::*)() ;
		constexpr auto baseAddress726 = (baseType726)(&CCMenuItemSpriteExtra::activate);
		using derivedType726 = temp_name_find_better::ret726(D<baseAddress726, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress726 = (derivedType726)(&D<baseAddress726, UUID>::activate);
        if (baseAddress726 != derivedAddress726) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::activate", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::activate", (void*)temp_name_find_better::address726(), (void*)addresser::getNonVirtual(derivedAddress726));
        }

    	using baseType727 = temp_name_find_better::ret727(CCMenuItemSpriteExtra::*)() ;
		constexpr auto baseAddress727 = (baseType727)(&CCMenuItemSpriteExtra::selected);
		using derivedType727 = temp_name_find_better::ret727(D<baseAddress727, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress727 = (derivedType727)(&D<baseAddress727, UUID>::selected);
        if (baseAddress727 != derivedAddress727) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::selected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::selected", (void*)temp_name_find_better::address727(), (void*)addresser::getNonVirtual(derivedAddress727));
        }

    	using baseType728 = temp_name_find_better::ret728(CCMenuItemSpriteExtra::*)() ;
		constexpr auto baseAddress728 = (baseType728)(&CCMenuItemSpriteExtra::unselected);
		using derivedType728 = temp_name_find_better::ret728(D<baseAddress728, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress728 = (derivedType728)(&D<baseAddress728, UUID>::unselected);
        if (baseAddress728 != derivedAddress728) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSpriteExtra::unselected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSpriteExtra::unselected", (void*)temp_name_find_better::address728(), (void*)addresser::getNonVirtual(derivedAddress728));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCFadeOut : cocos2d::CCFadeOut, ModifierBase {
    $CCFadeOut(const $CCFadeOut& c) : CCFadeOut(c) {}
    $CCFadeOut() : $CCFadeOut(*this) {}
    ~$CCFadeOut() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCFadeOut);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType103 = temp_name_find_better::ret103(*)(float);
		constexpr auto baseAddress103 = (baseType103)(&CCFadeOut::create);
		using derivedType103 = temp_name_find_better::ret103(*)(float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress103 = (derivedType103)(&D<baseAddress103, UUID>::create);
        if (baseAddress103 != derivedAddress103) {
        	Interface::get()->logInfo("Adding hook at function CCFadeOut::create", Severity::Debug);
            Interface::get()->addHook("CCFadeOut::create", (void*)temp_name_find_better::address103(), (void*)addresser::getNonVirtual(derivedAddress103));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TableViewCell : TableViewCell, ModifierBase {
    $TableViewCell(const $TableViewCell& c) : TableViewCell(c) {}
    $TableViewCell() : $TableViewCell(*this) {}
    ~$TableViewCell() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TableViewCell);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCHide : cocos2d::CCHide, ModifierBase {
    $CCHide(const $CCHide& c) : CCHide(c) {}
    $CCHide() : $CCHide(*this) {}
    ~$CCHide() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCHide);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType106 = temp_name_find_better::ret106(*)();
		constexpr auto baseAddress106 = (baseType106)(&CCHide::create);
		using derivedType106 = temp_name_find_better::ret106(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress106 = (derivedType106)(&D<baseAddress106, UUID>::create);
        if (baseAddress106 != derivedAddress106) {
        	Interface::get()->logInfo("Adding hook at function CCHide::create", Severity::Debug);
            Interface::get()->addHook("CCHide::create", (void*)temp_name_find_better::address106(), (void*)addresser::getNonVirtual(derivedAddress106));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ColorChannelSprite : ColorChannelSprite, ModifierBase {
    $ColorChannelSprite(const $ColorChannelSprite& c) : ColorChannelSprite(c) {}
    $ColorChannelSprite() : $ColorChannelSprite(*this) {}
    ~$ColorChannelSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ColorChannelSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType818 = temp_name_find_better::ret818(ColorChannelSprite::*)(bool) ;
		constexpr auto baseAddress818 = (baseType818)(&ColorChannelSprite::updateBlending);
		using derivedType818 = temp_name_find_better::ret818(D<baseAddress818, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress818 = (derivedType818)(&D<baseAddress818, UUID>::updateBlending);
        if (baseAddress818 != derivedAddress818) {
        	Interface::get()->logInfo("Adding hook at function ColorChannelSprite::updateBlending", Severity::Debug);
            Interface::get()->addHook("ColorChannelSprite::updateBlending", (void*)temp_name_find_better::address818(), (void*)addresser::getNonVirtual(derivedAddress818));
        }

    	using baseType819 = temp_name_find_better::ret819(ColorChannelSprite::*)(int, bool) ;
		constexpr auto baseAddress819 = (baseType819)(&ColorChannelSprite::updateCopyLabel);
		using derivedType819 = temp_name_find_better::ret819(D<baseAddress819, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress819 = (derivedType819)(&D<baseAddress819, UUID>::updateCopyLabel);
        if (baseAddress819 != derivedAddress819) {
        	Interface::get()->logInfo("Adding hook at function ColorChannelSprite::updateCopyLabel", Severity::Debug);
            Interface::get()->addHook("ColorChannelSprite::updateCopyLabel", (void*)temp_name_find_better::address819(), (void*)addresser::getNonVirtual(derivedAddress819));
        }

    	using baseType820 = temp_name_find_better::ret820(ColorChannelSprite::*)(float) ;
		constexpr auto baseAddress820 = (baseType820)(&ColorChannelSprite::updateOpacity);
		using derivedType820 = temp_name_find_better::ret820(D<baseAddress820, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress820 = (derivedType820)(&D<baseAddress820, UUID>::updateOpacity);
        if (baseAddress820 != derivedAddress820) {
        	Interface::get()->logInfo("Adding hook at function ColorChannelSprite::updateOpacity", Severity::Debug);
            Interface::get()->addHook("ColorChannelSprite::updateOpacity", (void*)temp_name_find_better::address820(), (void*)addresser::getNonVirtual(derivedAddress820));
        }

    	using baseType821 = temp_name_find_better::ret821(ColorChannelSprite::*)(ColorAction*) ;
		constexpr auto baseAddress821 = (baseType821)(&ColorChannelSprite::updateValues);
		using derivedType821 = temp_name_find_better::ret821(D<baseAddress821, UUID>::*)(ColorAction*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress821 = (derivedType821)(&D<baseAddress821, UUID>::updateValues);
        if (baseAddress821 != derivedAddress821) {
        	Interface::get()->logInfo("Adding hook at function ColorChannelSprite::updateValues", Severity::Debug);
            Interface::get()->addHook("ColorChannelSprite::updateValues", (void*)temp_name_find_better::address821(), (void*)addresser::getNonVirtual(derivedAddress821));
        }

		using baseType822 = temp_name_find_better::ret822(*)();
		constexpr auto baseAddress822 = (baseType822)(&ColorChannelSprite::create);
		using derivedType822 = temp_name_find_better::ret822(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress822 = (derivedType822)(&D<baseAddress822, UUID>::create);
        if (baseAddress822 != derivedAddress822) {
        	Interface::get()->logInfo("Adding hook at function ColorChannelSprite::create", Severity::Debug);
            Interface::get()->addHook("ColorChannelSprite::create", (void*)temp_name_find_better::address822(), (void*)addresser::getNonVirtual(derivedAddress822));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSet : cocos2d::CCSet, ModifierBase {
    $CCSet(const $CCSet& c) : CCSet(c) {}
    $CCSet() : $CCSet(*this) {}
    ~$CCSet() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSet);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType420 = temp_name_find_better::ret420(CCSet::*)(cocos2d::CCDataVisitor&) ;
		constexpr auto baseAddress420 = (baseType420)(&CCSet::acceptVisitor);
		using derivedType420 = temp_name_find_better::ret420(D<baseAddress420, UUID>::*)(cocos2d::CCDataVisitor&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress420 = (derivedType420)(&D<baseAddress420, UUID>::acceptVisitor);
        if (baseAddress420 != derivedAddress420) {
        	Interface::get()->logInfo("Adding hook at function CCSet::acceptVisitor", Severity::Debug);
            Interface::get()->addHook("CCSet::acceptVisitor", (void*)temp_name_find_better::address420(), (void*)addresser::getVirtual(derivedAddress420));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TableView : TableView, ModifierBase {
    $TableView(const $TableView& c) : TableView(c) {}
    $TableView() : $TableView(*this) {}
    ~$TableView() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TableView);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType2065 = temp_name_find_better::ret2065(*)(TableViewDelegate*, TableViewDataSource*, struct cocos2d::CCRect);
		constexpr auto baseAddress2065 = (baseType2065)(&TableView::create);
		using derivedType2065 = temp_name_find_better::ret2065(*)(TableViewDelegate*, TableViewDataSource*, struct cocos2d::CCRect);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2065 = (derivedType2065)(&D<baseAddress2065, UUID>::create);
        if (baseAddress2065 != derivedAddress2065) {
        	Interface::get()->logInfo("Adding hook at function TableView::create", Severity::Debug);
            Interface::get()->addHook("TableView::create", (void*)temp_name_find_better::address2065(), (void*)addresser::getNonVirtual(derivedAddress2065));
        }

    	using baseType2066 = temp_name_find_better::ret2066(TableView::*)() ;
		constexpr auto baseAddress2066 = (baseType2066)(&TableView::reloadData);
		using derivedType2066 = temp_name_find_better::ret2066(D<baseAddress2066, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2066 = (derivedType2066)(&D<baseAddress2066, UUID>::reloadData);
        if (baseAddress2066 != derivedAddress2066) {
        	Interface::get()->logInfo("Adding hook at function TableView::reloadData", Severity::Debug);
            Interface::get()->addHook("TableView::reloadData", (void*)temp_name_find_better::address2066(), (void*)addresser::getNonVirtual(derivedAddress2066));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ListButtonBar : ListButtonBar, ModifierBase {
    $ListButtonBar(const $ListButtonBar& c) : ListButtonBar(c) {}
    $ListButtonBar() : $ListButtonBar(*this) {}
    ~$ListButtonBar() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ListButtonBar);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AchievementsLayer : AchievementsLayer, ModifierBase {
    $AchievementsLayer(const $AchievementsLayer& c) : AchievementsLayer(c) {}
    $AchievementsLayer() : $AchievementsLayer(*this) {}
    ~$AchievementsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AchievementsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType640 = temp_name_find_better::ret640(AchievementsLayer::*)(int) ;
		constexpr auto baseAddress640 = (baseType640)(&AchievementsLayer::loadPage);
		using derivedType640 = temp_name_find_better::ret640(D<baseAddress640, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress640 = (derivedType640)(&D<baseAddress640, UUID>::loadPage);
        if (baseAddress640 != derivedAddress640) {
        	Interface::get()->logInfo("Adding hook at function AchievementsLayer::loadPage", Severity::Debug);
            Interface::get()->addHook("AchievementsLayer::loadPage", (void*)temp_name_find_better::address640(), (void*)addresser::getNonVirtual(derivedAddress640));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCIMEDispatcher : cocos2d::CCIMEDispatcher, ModifierBase {
    $CCIMEDispatcher(const $CCIMEDispatcher& c) : CCIMEDispatcher(c) {}
    $CCIMEDispatcher() : $CCIMEDispatcher(*this) {}
    ~$CCIMEDispatcher() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCIMEDispatcher);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType109 = temp_name_find_better::ret109(*)();
		constexpr auto baseAddress109 = (baseType109)(&CCIMEDispatcher::sharedDispatcher);
		using derivedType109 = temp_name_find_better::ret109(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress109 = (derivedType109)(&D<baseAddress109, UUID>::sharedDispatcher);
        if (baseAddress109 != derivedAddress109) {
        	Interface::get()->logInfo("Adding hook at function CCIMEDispatcher::sharedDispatcher", Severity::Debug);
            Interface::get()->addHook("CCIMEDispatcher::sharedDispatcher", (void*)temp_name_find_better::address109(), (void*)addresser::getNonVirtual(derivedAddress109));
        }

    	using baseType110 = temp_name_find_better::ret110(CCIMEDispatcher::*)(cocos2d::CCIMEDelegate*) ;
		constexpr auto baseAddress110 = (baseType110)(&CCIMEDispatcher::addDelegate);
		using derivedType110 = temp_name_find_better::ret110(D<baseAddress110, UUID>::*)(cocos2d::CCIMEDelegate*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress110 = (derivedType110)(&D<baseAddress110, UUID>::addDelegate);
        if (baseAddress110 != derivedAddress110) {
        	Interface::get()->logInfo("Adding hook at function CCIMEDispatcher::addDelegate", Severity::Debug);
            Interface::get()->addHook("CCIMEDispatcher::addDelegate", (void*)temp_name_find_better::address110(), (void*)addresser::getNonVirtual(derivedAddress110));
        }

    	using baseType111 = temp_name_find_better::ret111(CCIMEDispatcher::*)(cocos2d::CCIMEDelegate*) ;
		constexpr auto baseAddress111 = (baseType111)(&CCIMEDispatcher::removeDelegate);
		using derivedType111 = temp_name_find_better::ret111(D<baseAddress111, UUID>::*)(cocos2d::CCIMEDelegate*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress111 = (derivedType111)(&D<baseAddress111, UUID>::removeDelegate);
        if (baseAddress111 != derivedAddress111) {
        	Interface::get()->logInfo("Adding hook at function CCIMEDispatcher::removeDelegate", Severity::Debug);
            Interface::get()->addHook("CCIMEDispatcher::removeDelegate", (void*)temp_name_find_better::address111(), (void*)addresser::getNonVirtual(derivedAddress111));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $InfoLayer : InfoLayer, ModifierBase {
    $InfoLayer(const $InfoLayer& c) : InfoLayer(c) {}
    $InfoLayer() : $InfoLayer(*this) {}
    ~$InfoLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($InfoLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1509 = temp_name_find_better::ret1509(InfoLayer::*)(GJGameLevel*, GJUserScore*) ;
		constexpr auto baseAddress1509 = (baseType1509)(&InfoLayer::init);
		using derivedType1509 = temp_name_find_better::ret1509(D<baseAddress1509, UUID>::*)(GJGameLevel*, GJUserScore*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1509 = (derivedType1509)(&D<baseAddress1509, UUID>::init);
        if (baseAddress1509 != derivedAddress1509) {
        	Interface::get()->logInfo("Adding hook at function InfoLayer::init", Severity::Debug);
            Interface::get()->addHook("InfoLayer::init", (void*)temp_name_find_better::address1509(), (void*)addresser::getNonVirtual(derivedAddress1509));
        }

    	using baseType1510 = temp_name_find_better::ret1510(InfoLayer::*)(cocos2d::CCArray*) ;
		constexpr auto baseAddress1510 = (baseType1510)(&InfoLayer::setupCommentsBrowser);
		using derivedType1510 = temp_name_find_better::ret1510(D<baseAddress1510, UUID>::*)(cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1510 = (derivedType1510)(&D<baseAddress1510, UUID>::setupCommentsBrowser);
        if (baseAddress1510 != derivedAddress1510) {
        	Interface::get()->logInfo("Adding hook at function InfoLayer::setupCommentsBrowser", Severity::Debug);
            Interface::get()->addHook("InfoLayer::setupCommentsBrowser", (void*)temp_name_find_better::address1510(), (void*)addresser::getNonVirtual(derivedAddress1510));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCLayerColor : cocos2d::CCLayerColor, ModifierBase {
    $CCLayerColor(const $CCLayerColor& c) : CCLayerColor(c) {}
    $CCLayerColor() : $CCLayerColor(*this) {}
    ~$CCLayerColor() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCLayerColor);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType169 = temp_name_find_better::ret169(*)(cocos2d::_ccColor4B const&, float, float);
		constexpr auto baseAddress169 = (baseType169)(&CCLayerColor::create);
		using derivedType169 = temp_name_find_better::ret169(*)(cocos2d::_ccColor4B const&, float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress169 = (derivedType169)(&D<baseAddress169, UUID>::create);
        if (baseAddress169 != derivedAddress169) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::create", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::create", (void*)temp_name_find_better::address169(), (void*)addresser::getNonVirtual(derivedAddress169));
        }

    	using baseType170 = temp_name_find_better::ret170(CCLayerColor::*)() ;
		constexpr auto baseAddress170 = (baseType170)(&CCLayerColor::draw);
		using derivedType170 = temp_name_find_better::ret170(D<baseAddress170, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress170 = (derivedType170)(&D<baseAddress170, UUID>::draw);
        if (baseAddress170 != derivedAddress170) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::draw", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::draw", (void*)temp_name_find_better::address170(), (void*)addresser::getNonVirtual(derivedAddress170));
        }

    	using baseType171 = temp_name_find_better::ret171(CCLayerColor::*)() ;
		constexpr auto baseAddress171 = (baseType171)(&CCLayerColor::getBlendFunc);
		using derivedType171 = temp_name_find_better::ret171(D<baseAddress171, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress171 = (derivedType171)(&D<baseAddress171, UUID>::getBlendFunc);
        if (baseAddress171 != derivedAddress171) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::getBlendFunc", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::getBlendFunc", (void*)temp_name_find_better::address171(), (void*)addresser::getNonVirtual(derivedAddress171));
        }

    	using baseType172 = temp_name_find_better::ret172(CCLayerColor::*)() ;
		constexpr auto baseAddress172 = (baseType172)(&CCLayerColor::init);
		using derivedType172 = temp_name_find_better::ret172(D<baseAddress172, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress172 = (derivedType172)(&D<baseAddress172, UUID>::init);
        if (baseAddress172 != derivedAddress172) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::init", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::init", (void*)temp_name_find_better::address172(), (void*)addresser::getNonVirtual(derivedAddress172));
        }

    	using baseType173 = temp_name_find_better::ret173(CCLayerColor::*)(cocos2d::_ccColor4B const&) ;
		constexpr auto baseAddress173 = (baseType173)(&CCLayerColor::initWithColor);
		using derivedType173 = temp_name_find_better::ret173(D<baseAddress173, UUID>::*)(cocos2d::_ccColor4B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress173 = (derivedType173)(&D<baseAddress173, UUID>::initWithColor);
        if (baseAddress173 != derivedAddress173) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::initWithColor", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::initWithColor", (void*)temp_name_find_better::address173(), (void*)addresser::getNonVirtual(derivedAddress173));
        }

    	using baseType174 = temp_name_find_better::ret174(CCLayerColor::*)(cocos2d::_ccColor4B const&, float, float) ;
		constexpr auto baseAddress174 = (baseType174)(&CCLayerColor::initWithColor);
		using derivedType174 = temp_name_find_better::ret174(D<baseAddress174, UUID>::*)(cocos2d::_ccColor4B const&, float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress174 = (derivedType174)(&D<baseAddress174, UUID>::initWithColor);
        if (baseAddress174 != derivedAddress174) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::initWithColor", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::initWithColor", (void*)temp_name_find_better::address174(), (void*)addresser::getNonVirtual(derivedAddress174));
        }

    	using baseType175 = temp_name_find_better::ret175(CCLayerColor::*)(cocos2d::_ccBlendFunc) ;
		constexpr auto baseAddress175 = (baseType175)(&CCLayerColor::setBlendFunc);
		using derivedType175 = temp_name_find_better::ret175(D<baseAddress175, UUID>::*)(cocos2d::_ccBlendFunc) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress175 = (derivedType175)(&D<baseAddress175, UUID>::setBlendFunc);
        if (baseAddress175 != derivedAddress175) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::setBlendFunc", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::setBlendFunc", (void*)temp_name_find_better::address175(), (void*)addresser::getNonVirtual(derivedAddress175));
        }

    	using baseType176 = temp_name_find_better::ret176(CCLayerColor::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress176 = (baseType176)(&CCLayerColor::setColor);
		using derivedType176 = temp_name_find_better::ret176(D<baseAddress176, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress176 = (derivedType176)(&D<baseAddress176, UUID>::setColor);
        if (baseAddress176 != derivedAddress176) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::setColor", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::setColor", (void*)temp_name_find_better::address176(), (void*)addresser::getNonVirtual(derivedAddress176));
        }

    	using baseType177 = temp_name_find_better::ret177(CCLayerColor::*)(cocos2d::CCSize const&) ;
		constexpr auto baseAddress177 = (baseType177)(&CCLayerColor::setContentSize);
		using derivedType177 = temp_name_find_better::ret177(D<baseAddress177, UUID>::*)(cocos2d::CCSize const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress177 = (derivedType177)(&D<baseAddress177, UUID>::setContentSize);
        if (baseAddress177 != derivedAddress177) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::setContentSize", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::setContentSize", (void*)temp_name_find_better::address177(), (void*)addresser::getNonVirtual(derivedAddress177));
        }

    	using baseType178 = temp_name_find_better::ret178(CCLayerColor::*)(unsigned char) ;
		constexpr auto baseAddress178 = (baseType178)(&CCLayerColor::setOpacity);
		using derivedType178 = temp_name_find_better::ret178(D<baseAddress178, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress178 = (derivedType178)(&D<baseAddress178, UUID>::setOpacity);
        if (baseAddress178 != derivedAddress178) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::setOpacity", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::setOpacity", (void*)temp_name_find_better::address178(), (void*)addresser::getNonVirtual(derivedAddress178));
        }

    	using baseType179 = temp_name_find_better::ret179(CCLayerColor::*)() ;
		constexpr auto baseAddress179 = (baseType179)(&CCLayerColor::updateColor);
		using derivedType179 = temp_name_find_better::ret179(D<baseAddress179, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress179 = (derivedType179)(&D<baseAddress179, UUID>::updateColor);
        if (baseAddress179 != derivedAddress179) {
        	Interface::get()->logInfo("Adding hook at function CCLayerColor::updateColor", Severity::Debug);
            Interface::get()->addHook("CCLayerColor::updateColor", (void*)temp_name_find_better::address179(), (void*)addresser::getNonVirtual(derivedAddress179));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CommentCell : CommentCell, ModifierBase {
    $CommentCell(const $CommentCell& c) : CommentCell(c) {}
    $CommentCell() : $CommentCell(*this) {}
    ~$CommentCell() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CommentCell);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ArtistCell : ArtistCell, ModifierBase {
    $ArtistCell(const $ArtistCell& c) : ArtistCell(c) {}
    $ArtistCell() : $ArtistCell(*this) {}
    ~$ArtistCell() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ArtistCell);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCKeypadHandler : cocos2d::CCKeypadHandler, ModifierBase {
    $CCKeypadHandler(const $CCKeypadHandler& c) : CCKeypadHandler(c) {}
    $CCKeypadHandler() : $CCKeypadHandler(*this) {}
    ~$CCKeypadHandler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCKeypadHandler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType120 = temp_name_find_better::ret120(*)(cocos2d::CCKeypadDelegate*);
		constexpr auto baseAddress120 = (baseType120)(&CCKeypadHandler::handlerWithDelegate);
		using derivedType120 = temp_name_find_better::ret120(*)(cocos2d::CCKeypadDelegate*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress120 = (derivedType120)(&D<baseAddress120, UUID>::handlerWithDelegate);
        if (baseAddress120 != derivedAddress120) {
        	Interface::get()->logInfo("Adding hook at function CCKeypadHandler::handlerWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCKeypadHandler::handlerWithDelegate", (void*)temp_name_find_better::address120(), (void*)addresser::getNonVirtual(derivedAddress120));
        }

    	using baseType121 = temp_name_find_better::ret121(CCKeypadHandler::*)(cocos2d::CCKeypadDelegate*) ;
		constexpr auto baseAddress121 = (baseType121)(&CCKeypadHandler::initWithDelegate);
		using derivedType121 = temp_name_find_better::ret121(D<baseAddress121, UUID>::*)(cocos2d::CCKeypadDelegate*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress121 = (derivedType121)(&D<baseAddress121, UUID>::initWithDelegate);
        if (baseAddress121 != derivedAddress121) {
        	Interface::get()->logInfo("Adding hook at function CCKeypadHandler::initWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCKeypadHandler::initWithDelegate", (void*)temp_name_find_better::address121(), (void*)addresser::getVirtual(derivedAddress121));
        }

    	using baseType123 = temp_name_find_better::ret123(CCKeypadHandler::*)() ;
		constexpr auto baseAddress123 = (baseType123)(&CCKeypadHandler::getDelegate);
		using derivedType123 = temp_name_find_better::ret123(D<baseAddress123, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress123 = (derivedType123)(&D<baseAddress123, UUID>::getDelegate);
        if (baseAddress123 != derivedAddress123) {
        	Interface::get()->logInfo("Adding hook at function CCKeypadHandler::getDelegate", Severity::Debug);
            Interface::get()->addHook("CCKeypadHandler::getDelegate", (void*)temp_name_find_better::address123(), (void*)addresser::getNonVirtual(derivedAddress123));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SpawnTriggerAction : SpawnTriggerAction, ModifierBase {
    $SpawnTriggerAction(const $SpawnTriggerAction& c) : SpawnTriggerAction(c) {}
    $SpawnTriggerAction() : $SpawnTriggerAction(*this) {}
    ~$SpawnTriggerAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SpawnTriggerAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCKeyboardDispatcher : cocos2d::CCKeyboardDispatcher, ModifierBase {
    $CCKeyboardDispatcher(const $CCKeyboardDispatcher& c) : CCKeyboardDispatcher(c) {}
    $CCKeyboardDispatcher() : $CCKeyboardDispatcher(*this) {}
    ~$CCKeyboardDispatcher() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCKeyboardDispatcher);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType115 = temp_name_find_better::ret115(CCKeyboardDispatcher::*)(cocos2d::enumKeyCodes, bool) ;
		constexpr auto baseAddress115 = (baseType115)(&CCKeyboardDispatcher::dispatchKeyboardMSG);
		using derivedType115 = temp_name_find_better::ret115(D<baseAddress115, UUID>::*)(cocos2d::enumKeyCodes, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress115 = (derivedType115)(&D<baseAddress115, UUID>::dispatchKeyboardMSG);
        if (baseAddress115 != derivedAddress115) {
        	Interface::get()->logInfo("Adding hook at function CCKeyboardDispatcher::dispatchKeyboardMSG", Severity::Debug);
            Interface::get()->addHook("CCKeyboardDispatcher::dispatchKeyboardMSG", (void*)temp_name_find_better::address115(), (void*)addresser::getNonVirtual(derivedAddress115));
        }

    	using baseType116 = temp_name_find_better::ret116(CCKeyboardDispatcher::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress116 = (baseType116)(&CCKeyboardDispatcher::keyToString);
		using derivedType116 = temp_name_find_better::ret116(D<baseAddress116, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress116 = (derivedType116)(&D<baseAddress116, UUID>::keyToString);
        if (baseAddress116 != derivedAddress116) {
        	Interface::get()->logInfo("Adding hook at function CCKeyboardDispatcher::keyToString", Severity::Debug);
            Interface::get()->addHook("CCKeyboardDispatcher::keyToString", (void*)temp_name_find_better::address116(), (void*)addresser::getNonVirtual(derivedAddress116));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCKeyboardHandler : cocos2d::CCKeyboardHandler, ModifierBase {
    $CCKeyboardHandler(const $CCKeyboardHandler& c) : CCKeyboardHandler(c) {}
    $CCKeyboardHandler() : $CCKeyboardHandler(*this) {}
    ~$CCKeyboardHandler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCKeyboardHandler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType117 = temp_name_find_better::ret117(*)(cocos2d::CCKeyboardDelegate*);
		constexpr auto baseAddress117 = (baseType117)(&CCKeyboardHandler::handlerWithDelegate);
		using derivedType117 = temp_name_find_better::ret117(*)(cocos2d::CCKeyboardDelegate*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress117 = (derivedType117)(&D<baseAddress117, UUID>::handlerWithDelegate);
        if (baseAddress117 != derivedAddress117) {
        	Interface::get()->logInfo("Adding hook at function CCKeyboardHandler::handlerWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCKeyboardHandler::handlerWithDelegate", (void*)temp_name_find_better::address117(), (void*)addresser::getNonVirtual(derivedAddress117));
        }

    	using baseType118 = temp_name_find_better::ret118(CCKeyboardHandler::*)(cocos2d::CCKeyboardDelegate*) ;
		constexpr auto baseAddress118 = (baseType118)(&CCKeyboardHandler::initWithDelegate);
		using derivedType118 = temp_name_find_better::ret118(D<baseAddress118, UUID>::*)(cocos2d::CCKeyboardDelegate*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress118 = (derivedType118)(&D<baseAddress118, UUID>::initWithDelegate);
        if (baseAddress118 != derivedAddress118) {
        	Interface::get()->logInfo("Adding hook at function CCKeyboardHandler::initWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCKeyboardHandler::initWithDelegate", (void*)temp_name_find_better::address118(), (void*)addresser::getVirtual(derivedAddress118));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GaragePage : GaragePage, ModifierBase {
    $GaragePage(const $GaragePage& c) : GaragePage(c) {}
    $GaragePage() : $GaragePage(*this) {}
    ~$GaragePage() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GaragePage);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address1496)(this);
    }
    static bool _apply() {

    	using baseType1495 = temp_name_find_better::ret1495(GaragePage::*)(ListButtonBar*, int) ;
		constexpr auto baseAddress1495 = (baseType1495)(&GaragePage::listButtonBarSwitchedPage);
		using derivedType1495 = temp_name_find_better::ret1495(D<baseAddress1495, UUID>::*)(ListButtonBar*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1495 = (derivedType1495)(&D<baseAddress1495, UUID>::listButtonBarSwitchedPage);
        if (baseAddress1495 != derivedAddress1495) {
        	Interface::get()->logInfo("Adding hook at function GaragePage::listButtonBarSwitchedPage", Severity::Debug);
            Interface::get()->addHook("GaragePage::listButtonBarSwitchedPage", (void*)temp_name_find_better::address1495(), (void*)addresser::getNonVirtual(derivedAddress1495));
        }

    	using baseType1496 = temp_name_find_better::ret1496($GaragePage::*)() ;
		constexpr auto baseAddress1496 = (baseType1496)(&$GaragePage::constructor);
		using derivedType1496 = temp_name_find_better::ret1496(D<baseAddress1496, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1496 = (derivedType1496)(&D<baseAddress1496, UUID>::constructor);
        if (baseAddress1496 != derivedAddress1496) {
        	Interface::get()->logInfo("Adding hook at function GaragePage::constructor", Severity::Debug);
            Interface::get()->addHook("GaragePage::constructor", (void*)temp_name_find_better::address1496(), (void*)addresser::getNonVirtual(derivedAddress1496));
        }

    	using baseType1497 = temp_name_find_better::ret1497(GaragePage::*)(IconType, GJGarageLayer*, cocos2d::SEL_MenuHandler) ;
		constexpr auto baseAddress1497 = (baseType1497)(&GaragePage::init);
		using derivedType1497 = temp_name_find_better::ret1497(D<baseAddress1497, UUID>::*)(IconType, GJGarageLayer*, cocos2d::SEL_MenuHandler) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1497 = (derivedType1497)(&D<baseAddress1497, UUID>::init);
        if (baseAddress1497 != derivedAddress1497) {
        	Interface::get()->logInfo("Adding hook at function GaragePage::init", Severity::Debug);
            Interface::get()->addHook("GaragePage::init", (void*)temp_name_find_better::address1497(), (void*)addresser::getNonVirtual(derivedAddress1497));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenuItemToggler : CCMenuItemToggler, ModifierBase {
    $CCMenuItemToggler(const $CCMenuItemToggler& c) : CCMenuItemToggler(c) {}
    $CCMenuItemToggler() : $CCMenuItemToggler(*this) {}
    ~$CCMenuItemToggler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenuItemToggler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType735 = temp_name_find_better::ret735(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		constexpr auto baseAddress735 = (baseType735)(&CCMenuItemToggler::create);
		using derivedType735 = temp_name_find_better::ret735(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress735 = (derivedType735)(&D<baseAddress735, UUID>::create);
        if (baseAddress735 != derivedAddress735) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::create", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::create", (void*)temp_name_find_better::address735(), (void*)addresser::getNonVirtual(derivedAddress735));
        }

    	using baseType736 = temp_name_find_better::ret736(CCMenuItemToggler::*)(float) ;
		constexpr auto baseAddress736 = (baseType736)(&CCMenuItemToggler::setSizeMult);
		using derivedType736 = temp_name_find_better::ret736(D<baseAddress736, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress736 = (derivedType736)(&D<baseAddress736, UUID>::setSizeMult);
        if (baseAddress736 != derivedAddress736) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::setSizeMult", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::setSizeMult", (void*)temp_name_find_better::address736(), (void*)addresser::getNonVirtual(derivedAddress736));
        }

    	using baseType737 = temp_name_find_better::ret737(CCMenuItemToggler::*)(bool) ;
		constexpr auto baseAddress737 = (baseType737)(&CCMenuItemToggler::toggle);
		using derivedType737 = temp_name_find_better::ret737(D<baseAddress737, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress737 = (derivedType737)(&D<baseAddress737, UUID>::toggle);
        if (baseAddress737 != derivedAddress737) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::toggle", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::toggle", (void*)temp_name_find_better::address737(), (void*)addresser::getNonVirtual(derivedAddress737));
        }

    	using baseType738 = temp_name_find_better::ret738(CCMenuItemToggler::*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) ;
		constexpr auto baseAddress738 = (baseType738)(&CCMenuItemToggler::init);
		using derivedType738 = temp_name_find_better::ret738(D<baseAddress738, UUID>::*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress738 = (derivedType738)(&D<baseAddress738, UUID>::init);
        if (baseAddress738 != derivedAddress738) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::init", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::init", (void*)temp_name_find_better::address738(), (void*)addresser::getNonVirtual(derivedAddress738));
        }

    	using baseType739 = temp_name_find_better::ret739(CCMenuItemToggler::*)() ;
		constexpr auto baseAddress739 = (baseType739)(&CCMenuItemToggler::activate);
		using derivedType739 = temp_name_find_better::ret739(D<baseAddress739, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress739 = (derivedType739)(&D<baseAddress739, UUID>::activate);
        if (baseAddress739 != derivedAddress739) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::activate", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::activate", (void*)temp_name_find_better::address739(), (void*)addresser::getNonVirtual(derivedAddress739));
        }

    	using baseType740 = temp_name_find_better::ret740(CCMenuItemToggler::*)() ;
		constexpr auto baseAddress740 = (baseType740)(&CCMenuItemToggler::selected);
		using derivedType740 = temp_name_find_better::ret740(D<baseAddress740, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress740 = (derivedType740)(&D<baseAddress740, UUID>::selected);
        if (baseAddress740 != derivedAddress740) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::selected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::selected", (void*)temp_name_find_better::address740(), (void*)addresser::getNonVirtual(derivedAddress740));
        }

    	using baseType741 = temp_name_find_better::ret741(CCMenuItemToggler::*)() ;
		constexpr auto baseAddress741 = (baseType741)(&CCMenuItemToggler::unselected);
		using derivedType741 = temp_name_find_better::ret741(D<baseAddress741, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress741 = (derivedType741)(&D<baseAddress741, UUID>::unselected);
        if (baseAddress741 != derivedAddress741) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::unselected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::unselected", (void*)temp_name_find_better::address741(), (void*)addresser::getNonVirtual(derivedAddress741));
        }

    	using baseType742 = temp_name_find_better::ret742(CCMenuItemToggler::*)(bool) ;
		constexpr auto baseAddress742 = (baseType742)(&CCMenuItemToggler::setEnabled);
		using derivedType742 = temp_name_find_better::ret742(D<baseAddress742, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress742 = (derivedType742)(&D<baseAddress742, UUID>::setEnabled);
        if (baseAddress742 != derivedAddress742) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemToggler::setEnabled", Severity::Debug);
            Interface::get()->addHook("CCMenuItemToggler::setEnabled", (void*)temp_name_find_better::address742(), (void*)addresser::getNonVirtual(derivedAddress742));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCLayer : cocos2d::CCLayer, ModifierBase {
    $CCLayer(const $CCLayer& c) : CCLayer(c) {}
    $CCLayer() : $CCLayer(*this) {}
    ~$CCLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType132 = temp_name_find_better::ret132(CCLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress132 = (baseType132)(&CCLayer::ccTouchBegan);
		using derivedType132 = temp_name_find_better::ret132(D<baseAddress132, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress132 = (derivedType132)(&D<baseAddress132, UUID>::ccTouchBegan);
        if (baseAddress132 != derivedAddress132) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchBegan", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchBegan", (void*)temp_name_find_better::address132(), (void*)addresser::getVirtual(derivedAddress132));
        }

    	using baseType133 = temp_name_find_better::ret133(CCLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress133 = (baseType133)(&CCLayer::ccTouchCancelled);
		using derivedType133 = temp_name_find_better::ret133(D<baseAddress133, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress133 = (derivedType133)(&D<baseAddress133, UUID>::ccTouchCancelled);
        if (baseAddress133 != derivedAddress133) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchCancelled", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchCancelled", (void*)temp_name_find_better::address133(), (void*)addresser::getVirtual(derivedAddress133));
        }

    	using baseType134 = temp_name_find_better::ret134(CCLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress134 = (baseType134)(&CCLayer::ccTouchEnded);
		using derivedType134 = temp_name_find_better::ret134(D<baseAddress134, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress134 = (derivedType134)(&D<baseAddress134, UUID>::ccTouchEnded);
        if (baseAddress134 != derivedAddress134) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchEnded", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchEnded", (void*)temp_name_find_better::address134(), (void*)addresser::getVirtual(derivedAddress134));
        }

    	using baseType135 = temp_name_find_better::ret135(CCLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress135 = (baseType135)(&CCLayer::ccTouchMoved);
		using derivedType135 = temp_name_find_better::ret135(D<baseAddress135, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress135 = (derivedType135)(&D<baseAddress135, UUID>::ccTouchMoved);
        if (baseAddress135 != derivedAddress135) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchMoved", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchMoved", (void*)temp_name_find_better::address135(), (void*)addresser::getVirtual(derivedAddress135));
        }

    	using baseType136 = temp_name_find_better::ret136(CCLayer::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress136 = (baseType136)(&CCLayer::ccTouchesBegan);
		using derivedType136 = temp_name_find_better::ret136(D<baseAddress136, UUID>::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress136 = (derivedType136)(&D<baseAddress136, UUID>::ccTouchesBegan);
        if (baseAddress136 != derivedAddress136) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchesBegan", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchesBegan", (void*)temp_name_find_better::address136(), (void*)addresser::getVirtual(derivedAddress136));
        }

    	using baseType137 = temp_name_find_better::ret137(CCLayer::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress137 = (baseType137)(&CCLayer::ccTouchesCancelled);
		using derivedType137 = temp_name_find_better::ret137(D<baseAddress137, UUID>::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress137 = (derivedType137)(&D<baseAddress137, UUID>::ccTouchesCancelled);
        if (baseAddress137 != derivedAddress137) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchesCancelled", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchesCancelled", (void*)temp_name_find_better::address137(), (void*)addresser::getVirtual(derivedAddress137));
        }

    	using baseType138 = temp_name_find_better::ret138(CCLayer::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress138 = (baseType138)(&CCLayer::ccTouchesEnded);
		using derivedType138 = temp_name_find_better::ret138(D<baseAddress138, UUID>::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress138 = (derivedType138)(&D<baseAddress138, UUID>::ccTouchesEnded);
        if (baseAddress138 != derivedAddress138) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchesEnded", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchesEnded", (void*)temp_name_find_better::address138(), (void*)addresser::getVirtual(derivedAddress138));
        }

    	using baseType139 = temp_name_find_better::ret139(CCLayer::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress139 = (baseType139)(&CCLayer::ccTouchesMoved);
		using derivedType139 = temp_name_find_better::ret139(D<baseAddress139, UUID>::*)(cocos2d::CCSet*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress139 = (derivedType139)(&D<baseAddress139, UUID>::ccTouchesMoved);
        if (baseAddress139 != derivedAddress139) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::ccTouchesMoved", Severity::Debug);
            Interface::get()->addHook("CCLayer::ccTouchesMoved", (void*)temp_name_find_better::address139(), (void*)addresser::getVirtual(derivedAddress139));
        }

		using baseType140 = temp_name_find_better::ret140(*)();
		constexpr auto baseAddress140 = (baseType140)(&CCLayer::create);
		using derivedType140 = temp_name_find_better::ret140(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress140 = (derivedType140)(&D<baseAddress140, UUID>::create);
        if (baseAddress140 != derivedAddress140) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::create", Severity::Debug);
            Interface::get()->addHook("CCLayer::create", (void*)temp_name_find_better::address140(), (void*)addresser::getNonVirtual(derivedAddress140));
        }

    	using baseType141 = temp_name_find_better::ret141(CCLayer::*)(cocos2d::CCAcceleration*) ;
		constexpr auto baseAddress141 = (baseType141)(&CCLayer::didAccelerate);
		using derivedType141 = temp_name_find_better::ret141(D<baseAddress141, UUID>::*)(cocos2d::CCAcceleration*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress141 = (derivedType141)(&D<baseAddress141, UUID>::didAccelerate);
        if (baseAddress141 != derivedAddress141) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::didAccelerate", Severity::Debug);
            Interface::get()->addHook("CCLayer::didAccelerate", (void*)temp_name_find_better::address141(), (void*)addresser::getVirtual(derivedAddress141));
        }

    	using baseType142 = temp_name_find_better::ret142(CCLayer::*)() ;
		constexpr auto baseAddress142 = (baseType142)(&CCLayer::getTouchMode);
		using derivedType142 = temp_name_find_better::ret142(D<baseAddress142, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress142 = (derivedType142)(&D<baseAddress142, UUID>::getTouchMode);
        if (baseAddress142 != derivedAddress142) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::getTouchMode", Severity::Debug);
            Interface::get()->addHook("CCLayer::getTouchMode", (void*)temp_name_find_better::address142(), (void*)addresser::getVirtual(derivedAddress142));
        }

    	using baseType143 = temp_name_find_better::ret143(CCLayer::*)() ;
		constexpr auto baseAddress143 = (baseType143)(&CCLayer::getTouchPriority);
		using derivedType143 = temp_name_find_better::ret143(D<baseAddress143, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress143 = (derivedType143)(&D<baseAddress143, UUID>::getTouchPriority);
        if (baseAddress143 != derivedAddress143) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::getTouchPriority", Severity::Debug);
            Interface::get()->addHook("CCLayer::getTouchPriority", (void*)temp_name_find_better::address143(), (void*)addresser::getVirtual(derivedAddress143));
        }

    	using baseType144 = temp_name_find_better::ret144(CCLayer::*)() ;
		constexpr auto baseAddress144 = (baseType144)(&CCLayer::init);
		using derivedType144 = temp_name_find_better::ret144(D<baseAddress144, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress144 = (derivedType144)(&D<baseAddress144, UUID>::init);
        if (baseAddress144 != derivedAddress144) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::init", Severity::Debug);
            Interface::get()->addHook("CCLayer::init", (void*)temp_name_find_better::address144(), (void*)addresser::getVirtual(derivedAddress144));
        }

    	using baseType145 = temp_name_find_better::ret145(CCLayer::*)() ;
		constexpr auto baseAddress145 = (baseType145)(&CCLayer::isAccelerometerEnabled);
		using derivedType145 = temp_name_find_better::ret145(D<baseAddress145, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress145 = (derivedType145)(&D<baseAddress145, UUID>::isAccelerometerEnabled);
        if (baseAddress145 != derivedAddress145) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::isAccelerometerEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::isAccelerometerEnabled", (void*)temp_name_find_better::address145(), (void*)addresser::getVirtual(derivedAddress145));
        }

    	using baseType146 = temp_name_find_better::ret146(CCLayer::*)() ;
		constexpr auto baseAddress146 = (baseType146)(&CCLayer::isKeyboardEnabled);
		using derivedType146 = temp_name_find_better::ret146(D<baseAddress146, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress146 = (derivedType146)(&D<baseAddress146, UUID>::isKeyboardEnabled);
        if (baseAddress146 != derivedAddress146) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::isKeyboardEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::isKeyboardEnabled", (void*)temp_name_find_better::address146(), (void*)addresser::getVirtual(derivedAddress146));
        }

    	using baseType147 = temp_name_find_better::ret147(CCLayer::*)() ;
		constexpr auto baseAddress147 = (baseType147)(&CCLayer::isKeypadEnabled);
		using derivedType147 = temp_name_find_better::ret147(D<baseAddress147, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress147 = (derivedType147)(&D<baseAddress147, UUID>::isKeypadEnabled);
        if (baseAddress147 != derivedAddress147) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::isKeypadEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::isKeypadEnabled", (void*)temp_name_find_better::address147(), (void*)addresser::getVirtual(derivedAddress147));
        }

    	using baseType148 = temp_name_find_better::ret148(CCLayer::*)() ;
		constexpr auto baseAddress148 = (baseType148)(&CCLayer::isMouseEnabled);
		using derivedType148 = temp_name_find_better::ret148(D<baseAddress148, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress148 = (derivedType148)(&D<baseAddress148, UUID>::isMouseEnabled);
        if (baseAddress148 != derivedAddress148) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::isMouseEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::isMouseEnabled", (void*)temp_name_find_better::address148(), (void*)addresser::getVirtual(derivedAddress148));
        }

    	using baseType149 = temp_name_find_better::ret149(CCLayer::*)() ;
		constexpr auto baseAddress149 = (baseType149)(&CCLayer::isTouchEnabled);
		using derivedType149 = temp_name_find_better::ret149(D<baseAddress149, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress149 = (derivedType149)(&D<baseAddress149, UUID>::isTouchEnabled);
        if (baseAddress149 != derivedAddress149) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::isTouchEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::isTouchEnabled", (void*)temp_name_find_better::address149(), (void*)addresser::getVirtual(derivedAddress149));
        }

    	using baseType150 = temp_name_find_better::ret150(CCLayer::*)() ;
		constexpr auto baseAddress150 = (baseType150)(&CCLayer::keyBackClicked);
		using derivedType150 = temp_name_find_better::ret150(D<baseAddress150, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress150 = (derivedType150)(&D<baseAddress150, UUID>::keyBackClicked);
        if (baseAddress150 != derivedAddress150) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::keyBackClicked", Severity::Debug);
            Interface::get()->addHook("CCLayer::keyBackClicked", (void*)temp_name_find_better::address150(), (void*)addresser::getVirtual(derivedAddress150));
        }

    	using baseType151 = temp_name_find_better::ret151(CCLayer::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress151 = (baseType151)(&CCLayer::keyDown);
		using derivedType151 = temp_name_find_better::ret151(D<baseAddress151, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress151 = (derivedType151)(&D<baseAddress151, UUID>::keyDown);
        if (baseAddress151 != derivedAddress151) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::keyDown", Severity::Debug);
            Interface::get()->addHook("CCLayer::keyDown", (void*)temp_name_find_better::address151(), (void*)addresser::getVirtual(derivedAddress151));
        }

    	using baseType152 = temp_name_find_better::ret152(CCLayer::*)() ;
		constexpr auto baseAddress152 = (baseType152)(&CCLayer::keyMenuClicked);
		using derivedType152 = temp_name_find_better::ret152(D<baseAddress152, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress152 = (derivedType152)(&D<baseAddress152, UUID>::keyMenuClicked);
        if (baseAddress152 != derivedAddress152) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::keyMenuClicked", Severity::Debug);
            Interface::get()->addHook("CCLayer::keyMenuClicked", (void*)temp_name_find_better::address152(), (void*)addresser::getVirtual(derivedAddress152));
        }

    	using baseType153 = temp_name_find_better::ret153(CCLayer::*)() ;
		constexpr auto baseAddress153 = (baseType153)(&CCLayer::onEnter);
		using derivedType153 = temp_name_find_better::ret153(D<baseAddress153, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress153 = (derivedType153)(&D<baseAddress153, UUID>::onEnter);
        if (baseAddress153 != derivedAddress153) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::onEnter", Severity::Debug);
            Interface::get()->addHook("CCLayer::onEnter", (void*)temp_name_find_better::address153(), (void*)addresser::getVirtual(derivedAddress153));
        }

    	using baseType154 = temp_name_find_better::ret154(CCLayer::*)() ;
		constexpr auto baseAddress154 = (baseType154)(&CCLayer::onEnterTransitionDidFinish);
		using derivedType154 = temp_name_find_better::ret154(D<baseAddress154, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress154 = (derivedType154)(&D<baseAddress154, UUID>::onEnterTransitionDidFinish);
        if (baseAddress154 != derivedAddress154) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::onEnterTransitionDidFinish", Severity::Debug);
            Interface::get()->addHook("CCLayer::onEnterTransitionDidFinish", (void*)temp_name_find_better::address154(), (void*)addresser::getVirtual(derivedAddress154));
        }

    	using baseType155 = temp_name_find_better::ret155(CCLayer::*)() ;
		constexpr auto baseAddress155 = (baseType155)(&CCLayer::onExit);
		using derivedType155 = temp_name_find_better::ret155(D<baseAddress155, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress155 = (derivedType155)(&D<baseAddress155, UUID>::onExit);
        if (baseAddress155 != derivedAddress155) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::onExit", Severity::Debug);
            Interface::get()->addHook("CCLayer::onExit", (void*)temp_name_find_better::address155(), (void*)addresser::getVirtual(derivedAddress155));
        }

    	using baseType156 = temp_name_find_better::ret156(CCLayer::*)(int, bool, int, bool) ;
		constexpr auto baseAddress156 = (baseType156)(&CCLayer::registerScriptTouchHandler);
		using derivedType156 = temp_name_find_better::ret156(D<baseAddress156, UUID>::*)(int, bool, int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress156 = (derivedType156)(&D<baseAddress156, UUID>::registerScriptTouchHandler);
        if (baseAddress156 != derivedAddress156) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::registerScriptTouchHandler", Severity::Debug);
            Interface::get()->addHook("CCLayer::registerScriptTouchHandler", (void*)temp_name_find_better::address156(), (void*)addresser::getVirtual(derivedAddress156));
        }

    	using baseType157 = temp_name_find_better::ret157(CCLayer::*)() ;
		constexpr auto baseAddress157 = (baseType157)(&CCLayer::registerWithTouchDispatcher);
		using derivedType157 = temp_name_find_better::ret157(D<baseAddress157, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress157 = (derivedType157)(&D<baseAddress157, UUID>::registerWithTouchDispatcher);
        if (baseAddress157 != derivedAddress157) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCLayer::registerWithTouchDispatcher", (void*)temp_name_find_better::address157(), (void*)addresser::getVirtual(derivedAddress157));
        }

    	using baseType158 = temp_name_find_better::ret158(CCLayer::*)(bool) ;
		constexpr auto baseAddress158 = (baseType158)(&CCLayer::setAccelerometerEnabled);
		using derivedType158 = temp_name_find_better::ret158(D<baseAddress158, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress158 = (derivedType158)(&D<baseAddress158, UUID>::setAccelerometerEnabled);
        if (baseAddress158 != derivedAddress158) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setAccelerometerEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::setAccelerometerEnabled", (void*)temp_name_find_better::address158(), (void*)addresser::getVirtual(derivedAddress158));
        }

    	using baseType159 = temp_name_find_better::ret159(CCLayer::*)(double) ;
		constexpr auto baseAddress159 = (baseType159)(&CCLayer::setAccelerometerInterval);
		using derivedType159 = temp_name_find_better::ret159(D<baseAddress159, UUID>::*)(double) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress159 = (derivedType159)(&D<baseAddress159, UUID>::setAccelerometerInterval);
        if (baseAddress159 != derivedAddress159) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setAccelerometerInterval", Severity::Debug);
            Interface::get()->addHook("CCLayer::setAccelerometerInterval", (void*)temp_name_find_better::address159(), (void*)addresser::getVirtual(derivedAddress159));
        }

    	using baseType160 = temp_name_find_better::ret160(CCLayer::*)(bool) ;
		constexpr auto baseAddress160 = (baseType160)(&CCLayer::setKeyboardEnabled);
		using derivedType160 = temp_name_find_better::ret160(D<baseAddress160, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress160 = (derivedType160)(&D<baseAddress160, UUID>::setKeyboardEnabled);
        if (baseAddress160 != derivedAddress160) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setKeyboardEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::setKeyboardEnabled", (void*)temp_name_find_better::address160(), (void*)addresser::getVirtual(derivedAddress160));
        }

    	using baseType161 = temp_name_find_better::ret161(CCLayer::*)(bool) ;
		constexpr auto baseAddress161 = (baseType161)(&CCLayer::setKeypadEnabled);
		using derivedType161 = temp_name_find_better::ret161(D<baseAddress161, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress161 = (derivedType161)(&D<baseAddress161, UUID>::setKeypadEnabled);
        if (baseAddress161 != derivedAddress161) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setKeypadEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::setKeypadEnabled", (void*)temp_name_find_better::address161(), (void*)addresser::getVirtual(derivedAddress161));
        }

    	using baseType162 = temp_name_find_better::ret162(CCLayer::*)(bool) ;
		constexpr auto baseAddress162 = (baseType162)(&CCLayer::setMouseEnabled);
		using derivedType162 = temp_name_find_better::ret162(D<baseAddress162, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress162 = (derivedType162)(&D<baseAddress162, UUID>::setMouseEnabled);
        if (baseAddress162 != derivedAddress162) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setMouseEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::setMouseEnabled", (void*)temp_name_find_better::address162(), (void*)addresser::getVirtual(derivedAddress162));
        }

    	using baseType163 = temp_name_find_better::ret163(CCLayer::*)(bool) ;
		constexpr auto baseAddress163 = (baseType163)(&CCLayer::setTouchEnabled);
		using derivedType163 = temp_name_find_better::ret163(D<baseAddress163, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress163 = (derivedType163)(&D<baseAddress163, UUID>::setTouchEnabled);
        if (baseAddress163 != derivedAddress163) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setTouchEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayer::setTouchEnabled", (void*)temp_name_find_better::address163(), (void*)addresser::getVirtual(derivedAddress163));
        }

    	using baseType164 = temp_name_find_better::ret164(CCLayer::*)(cocos2d::ccTouchesMode) ;
		constexpr auto baseAddress164 = (baseType164)(&CCLayer::setTouchMode);
		using derivedType164 = temp_name_find_better::ret164(D<baseAddress164, UUID>::*)(cocos2d::ccTouchesMode) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress164 = (derivedType164)(&D<baseAddress164, UUID>::setTouchMode);
        if (baseAddress164 != derivedAddress164) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setTouchMode", Severity::Debug);
            Interface::get()->addHook("CCLayer::setTouchMode", (void*)temp_name_find_better::address164(), (void*)addresser::getVirtual(derivedAddress164));
        }

    	using baseType165 = temp_name_find_better::ret165(CCLayer::*)(int) ;
		constexpr auto baseAddress165 = (baseType165)(&CCLayer::setTouchPriority);
		using derivedType165 = temp_name_find_better::ret165(D<baseAddress165, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress165 = (derivedType165)(&D<baseAddress165, UUID>::setTouchPriority);
        if (baseAddress165 != derivedAddress165) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::setTouchPriority", Severity::Debug);
            Interface::get()->addHook("CCLayer::setTouchPriority", (void*)temp_name_find_better::address165(), (void*)addresser::getVirtual(derivedAddress165));
        }

    	using baseType166 = temp_name_find_better::ret166(CCLayer::*)() ;
		constexpr auto baseAddress166 = (baseType166)(&CCLayer::unregisterScriptTouchHandler);
		using derivedType166 = temp_name_find_better::ret166(D<baseAddress166, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress166 = (derivedType166)(&D<baseAddress166, UUID>::unregisterScriptTouchHandler);
        if (baseAddress166 != derivedAddress166) {
        	Interface::get()->logInfo("Adding hook at function CCLayer::unregisterScriptTouchHandler", Severity::Debug);
            Interface::get()->addHook("CCLayer::unregisterScriptTouchHandler", (void*)temp_name_find_better::address166(), (void*)addresser::getVirtual(derivedAddress166));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCLayerRGBA : cocos2d::CCLayerRGBA, ModifierBase {
    $CCLayerRGBA(const $CCLayerRGBA& c) : CCLayerRGBA(c) {}
    $CCLayerRGBA() : $CCLayerRGBA(*this) {}
    ~$CCLayerRGBA() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCLayerRGBA);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType182 = temp_name_find_better::ret182(CCLayerRGBA::*)() ;
		constexpr auto baseAddress182 = (baseType182)(&CCLayerRGBA::init);
		using derivedType182 = temp_name_find_better::ret182(D<baseAddress182, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress182 = (derivedType182)(&D<baseAddress182, UUID>::init);
        if (baseAddress182 != derivedAddress182) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::init", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::init", (void*)temp_name_find_better::address182(), (void*)addresser::getVirtual(derivedAddress182));
        }

    	using baseType183 = temp_name_find_better::ret183(CCLayerRGBA::*)() ;
		constexpr auto baseAddress183 = (baseType183)(&CCLayerRGBA::getOpacity);
		using derivedType183 = temp_name_find_better::ret183(D<baseAddress183, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress183 = (derivedType183)(&D<baseAddress183, UUID>::getOpacity);
        if (baseAddress183 != derivedAddress183) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::getOpacity", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::getOpacity", (void*)temp_name_find_better::address183(), (void*)addresser::getVirtual(derivedAddress183));
        }

    	using baseType184 = temp_name_find_better::ret184(CCLayerRGBA::*)() ;
		constexpr auto baseAddress184 = (baseType184)(&CCLayerRGBA::getDisplayedOpacity);
		using derivedType184 = temp_name_find_better::ret184(D<baseAddress184, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress184 = (derivedType184)(&D<baseAddress184, UUID>::getDisplayedOpacity);
        if (baseAddress184 != derivedAddress184) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::getDisplayedOpacity", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::getDisplayedOpacity", (void*)temp_name_find_better::address184(), (void*)addresser::getVirtual(derivedAddress184));
        }

    	using baseType185 = temp_name_find_better::ret185(CCLayerRGBA::*)(unsigned char) ;
		constexpr auto baseAddress185 = (baseType185)(&CCLayerRGBA::setOpacity);
		using derivedType185 = temp_name_find_better::ret185(D<baseAddress185, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress185 = (derivedType185)(&D<baseAddress185, UUID>::setOpacity);
        if (baseAddress185 != derivedAddress185) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::setOpacity", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::setOpacity", (void*)temp_name_find_better::address185(), (void*)addresser::getVirtual(derivedAddress185));
        }

    	using baseType186 = temp_name_find_better::ret186(CCLayerRGBA::*)(unsigned char) ;
		constexpr auto baseAddress186 = (baseType186)(&CCLayerRGBA::updateDisplayedOpacity);
		using derivedType186 = temp_name_find_better::ret186(D<baseAddress186, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress186 = (derivedType186)(&D<baseAddress186, UUID>::updateDisplayedOpacity);
        if (baseAddress186 != derivedAddress186) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::updateDisplayedOpacity", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::updateDisplayedOpacity", (void*)temp_name_find_better::address186(), (void*)addresser::getVirtual(derivedAddress186));
        }

    	using baseType187 = temp_name_find_better::ret187(CCLayerRGBA::*)() ;
		constexpr auto baseAddress187 = (baseType187)(&CCLayerRGBA::isCascadeOpacityEnabled);
		using derivedType187 = temp_name_find_better::ret187(D<baseAddress187, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress187 = (derivedType187)(&D<baseAddress187, UUID>::isCascadeOpacityEnabled);
        if (baseAddress187 != derivedAddress187) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::isCascadeOpacityEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::isCascadeOpacityEnabled", (void*)temp_name_find_better::address187(), (void*)addresser::getVirtual(derivedAddress187));
        }

    	using baseType188 = temp_name_find_better::ret188(CCLayerRGBA::*)(bool) ;
		constexpr auto baseAddress188 = (baseType188)(&CCLayerRGBA::setCascadeOpacityEnabled);
		using derivedType188 = temp_name_find_better::ret188(D<baseAddress188, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress188 = (derivedType188)(&D<baseAddress188, UUID>::setCascadeOpacityEnabled);
        if (baseAddress188 != derivedAddress188) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::setCascadeOpacityEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::setCascadeOpacityEnabled", (void*)temp_name_find_better::address188(), (void*)addresser::getVirtual(derivedAddress188));
        }

    	using baseType189 = temp_name_find_better::ret189(CCLayerRGBA::*)() ;
		constexpr auto baseAddress189 = (baseType189)(&CCLayerRGBA::getColor);
		using derivedType189 = temp_name_find_better::ret189(D<baseAddress189, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress189 = (derivedType189)(&D<baseAddress189, UUID>::getColor);
        if (baseAddress189 != derivedAddress189) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::getColor", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::getColor", (void*)temp_name_find_better::address189(), (void*)addresser::getVirtual(derivedAddress189));
        }

    	using baseType190 = temp_name_find_better::ret190(CCLayerRGBA::*)() ;
		constexpr auto baseAddress190 = (baseType190)(&CCLayerRGBA::getDisplayedColor);
		using derivedType190 = temp_name_find_better::ret190(D<baseAddress190, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress190 = (derivedType190)(&D<baseAddress190, UUID>::getDisplayedColor);
        if (baseAddress190 != derivedAddress190) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::getDisplayedColor", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::getDisplayedColor", (void*)temp_name_find_better::address190(), (void*)addresser::getVirtual(derivedAddress190));
        }

    	using baseType191 = temp_name_find_better::ret191(CCLayerRGBA::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress191 = (baseType191)(&CCLayerRGBA::setColor);
		using derivedType191 = temp_name_find_better::ret191(D<baseAddress191, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress191 = (derivedType191)(&D<baseAddress191, UUID>::setColor);
        if (baseAddress191 != derivedAddress191) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::setColor", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::setColor", (void*)temp_name_find_better::address191(), (void*)addresser::getVirtual(derivedAddress191));
        }

    	using baseType192 = temp_name_find_better::ret192(CCLayerRGBA::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress192 = (baseType192)(&CCLayerRGBA::updateDisplayedColor);
		using derivedType192 = temp_name_find_better::ret192(D<baseAddress192, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress192 = (derivedType192)(&D<baseAddress192, UUID>::updateDisplayedColor);
        if (baseAddress192 != derivedAddress192) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::updateDisplayedColor", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::updateDisplayedColor", (void*)temp_name_find_better::address192(), (void*)addresser::getVirtual(derivedAddress192));
        }

    	using baseType193 = temp_name_find_better::ret193(CCLayerRGBA::*)() ;
		constexpr auto baseAddress193 = (baseType193)(&CCLayerRGBA::isCascadeColorEnabled);
		using derivedType193 = temp_name_find_better::ret193(D<baseAddress193, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress193 = (derivedType193)(&D<baseAddress193, UUID>::isCascadeColorEnabled);
        if (baseAddress193 != derivedAddress193) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::isCascadeColorEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::isCascadeColorEnabled", (void*)temp_name_find_better::address193(), (void*)addresser::getVirtual(derivedAddress193));
        }

    	using baseType194 = temp_name_find_better::ret194(CCLayerRGBA::*)(bool) ;
		constexpr auto baseAddress194 = (baseType194)(&CCLayerRGBA::setCascadeColorEnabled);
		using derivedType194 = temp_name_find_better::ret194(D<baseAddress194, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress194 = (derivedType194)(&D<baseAddress194, UUID>::setCascadeColorEnabled);
        if (baseAddress194 != derivedAddress194) {
        	Interface::get()->logInfo("Adding hook at function CCLayerRGBA::setCascadeColorEnabled", Severity::Debug);
            Interface::get()->addHook("CCLayerRGBA::setCascadeColorEnabled", (void*)temp_name_find_better::address194(), (void*)addresser::getVirtual(derivedAddress194));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCParticleSystem : cocos2d::CCParticleSystem, ModifierBase {
    $CCParticleSystem(const $CCParticleSystem& c) : CCParticleSystem(c) {}
    $CCParticleSystem() : $CCParticleSystem(*this) {}
    ~$CCParticleSystem() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCParticleSystem);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType398 = temp_name_find_better::ret398(CCParticleSystem::*)() ;
		constexpr auto baseAddress398 = (baseType398)(&CCParticleSystem::resetSystem);
		using derivedType398 = temp_name_find_better::ret398(D<baseAddress398, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress398 = (derivedType398)(&D<baseAddress398, UUID>::resetSystem);
        if (baseAddress398 != derivedAddress398) {
        	Interface::get()->logInfo("Adding hook at function CCParticleSystem::resetSystem", Severity::Debug);
            Interface::get()->addHook("CCParticleSystem::resetSystem", (void*)temp_name_find_better::address398(), (void*)addresser::getNonVirtual(derivedAddress398));
        }

    	using baseType399 = temp_name_find_better::ret399(CCParticleSystem::*)() ;
		constexpr auto baseAddress399 = (baseType399)(&CCParticleSystem::resumeSystem);
		using derivedType399 = temp_name_find_better::ret399(D<baseAddress399, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress399 = (derivedType399)(&D<baseAddress399, UUID>::resumeSystem);
        if (baseAddress399 != derivedAddress399) {
        	Interface::get()->logInfo("Adding hook at function CCParticleSystem::resumeSystem", Severity::Debug);
            Interface::get()->addHook("CCParticleSystem::resumeSystem", (void*)temp_name_find_better::address399(), (void*)addresser::getNonVirtual(derivedAddress399));
        }

    	using baseType400 = temp_name_find_better::ret400(CCParticleSystem::*)() ;
		constexpr auto baseAddress400 = (baseType400)(&CCParticleSystem::stopSystem);
		using derivedType400 = temp_name_find_better::ret400(D<baseAddress400, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress400 = (derivedType400)(&D<baseAddress400, UUID>::stopSystem);
        if (baseAddress400 != derivedAddress400) {
        	Interface::get()->logInfo("Adding hook at function CCParticleSystem::stopSystem", Severity::Debug);
            Interface::get()->addHook("CCParticleSystem::stopSystem", (void*)temp_name_find_better::address400(), (void*)addresser::getNonVirtual(derivedAddress400));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenu : cocos2d::CCMenu, ModifierBase {
    $CCMenu(const $CCMenu& c) : CCMenu(c) {}
    $CCMenu() : $CCMenu(*this) {}
    ~$CCMenu() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenu);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType196 = temp_name_find_better::ret196(CCMenu::*)(float) ;
		constexpr auto baseAddress196 = (baseType196)(&CCMenu::alignItemsHorizontallyWithPadding);
		using derivedType196 = temp_name_find_better::ret196(D<baseAddress196, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress196 = (derivedType196)(&D<baseAddress196, UUID>::alignItemsHorizontallyWithPadding);
        if (baseAddress196 != derivedAddress196) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::alignItemsHorizontallyWithPadding", Severity::Debug);
            Interface::get()->addHook("CCMenu::alignItemsHorizontallyWithPadding", (void*)temp_name_find_better::address196(), (void*)addresser::getNonVirtual(derivedAddress196));
        }

    	using baseType197 = temp_name_find_better::ret197(CCMenu::*)(float) ;
		constexpr auto baseAddress197 = (baseType197)(&CCMenu::alignItemsVerticallyWithPadding);
		using derivedType197 = temp_name_find_better::ret197(D<baseAddress197, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress197 = (derivedType197)(&D<baseAddress197, UUID>::alignItemsVerticallyWithPadding);
        if (baseAddress197 != derivedAddress197) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::alignItemsVerticallyWithPadding", Severity::Debug);
            Interface::get()->addHook("CCMenu::alignItemsVerticallyWithPadding", (void*)temp_name_find_better::address197(), (void*)addresser::getNonVirtual(derivedAddress197));
        }

		using baseType198 = temp_name_find_better::ret198(*)();
		constexpr auto baseAddress198 = (baseType198)(&CCMenu::create);
		using derivedType198 = temp_name_find_better::ret198(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress198 = (derivedType198)(&D<baseAddress198, UUID>::create);
        if (baseAddress198 != derivedAddress198) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::create", Severity::Debug);
            Interface::get()->addHook("CCMenu::create", (void*)temp_name_find_better::address198(), (void*)addresser::getNonVirtual(derivedAddress198));
        }

		using baseType199 = temp_name_find_better::ret199(*)(cocos2d::CCArray*);
		constexpr auto baseAddress199 = (baseType199)(&CCMenu::createWithArray);
		using derivedType199 = temp_name_find_better::ret199(*)(cocos2d::CCArray*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress199 = (derivedType199)(&D<baseAddress199, UUID>::createWithArray);
        if (baseAddress199 != derivedAddress199) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::createWithArray", Severity::Debug);
            Interface::get()->addHook("CCMenu::createWithArray", (void*)temp_name_find_better::address199(), (void*)addresser::getNonVirtual(derivedAddress199));
        }

		using baseType200 = temp_name_find_better::ret200(*)(cocos2d::CCMenuItem*);
		constexpr auto baseAddress200 = (baseType200)(&CCMenu::createWithItem);
		using derivedType200 = temp_name_find_better::ret200(*)(cocos2d::CCMenuItem*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress200 = (derivedType200)(&D<baseAddress200, UUID>::createWithItem);
        if (baseAddress200 != derivedAddress200) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::createWithItem", Severity::Debug);
            Interface::get()->addHook("CCMenu::createWithItem", (void*)temp_name_find_better::address200(), (void*)addresser::getNonVirtual(derivedAddress200));
        }

    	using baseType201 = temp_name_find_better::ret201(CCMenu::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress201 = (baseType201)(&CCMenu::addChild);
		using derivedType201 = temp_name_find_better::ret201(D<baseAddress201, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress201 = (derivedType201)(&D<baseAddress201, UUID>::addChild);
        if (baseAddress201 != derivedAddress201) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::addChild", Severity::Debug);
            Interface::get()->addHook("CCMenu::addChild", (void*)temp_name_find_better::address201(), (void*)addresser::getVirtual(derivedAddress201));
        }

    	using baseType202 = temp_name_find_better::ret202(CCMenu::*)(cocos2d::CCNode*, int) ;
		constexpr auto baseAddress202 = (baseType202)(&CCMenu::addChild);
		using derivedType202 = temp_name_find_better::ret202(D<baseAddress202, UUID>::*)(cocos2d::CCNode*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress202 = (derivedType202)(&D<baseAddress202, UUID>::addChild);
        if (baseAddress202 != derivedAddress202) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::addChild", Severity::Debug);
            Interface::get()->addHook("CCMenu::addChild", (void*)temp_name_find_better::address202(), (void*)addresser::getVirtual(derivedAddress202));
        }

    	using baseType203 = temp_name_find_better::ret203(CCMenu::*)(cocos2d::CCNode*, int, int) ;
		constexpr auto baseAddress203 = (baseType203)(&CCMenu::addChild);
		using derivedType203 = temp_name_find_better::ret203(D<baseAddress203, UUID>::*)(cocos2d::CCNode*, int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress203 = (derivedType203)(&D<baseAddress203, UUID>::addChild);
        if (baseAddress203 != derivedAddress203) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::addChild", Severity::Debug);
            Interface::get()->addHook("CCMenu::addChild", (void*)temp_name_find_better::address203(), (void*)addresser::getVirtual(derivedAddress203));
        }

    	using baseType204 = temp_name_find_better::ret204(CCMenu::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress204 = (baseType204)(&CCMenu::ccTouchBegan);
		using derivedType204 = temp_name_find_better::ret204(D<baseAddress204, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress204 = (derivedType204)(&D<baseAddress204, UUID>::ccTouchBegan);
        if (baseAddress204 != derivedAddress204) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::ccTouchBegan", Severity::Debug);
            Interface::get()->addHook("CCMenu::ccTouchBegan", (void*)temp_name_find_better::address204(), (void*)addresser::getVirtual(derivedAddress204));
        }

    	using baseType205 = temp_name_find_better::ret205(CCMenu::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress205 = (baseType205)(&CCMenu::ccTouchMoved);
		using derivedType205 = temp_name_find_better::ret205(D<baseAddress205, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress205 = (derivedType205)(&D<baseAddress205, UUID>::ccTouchMoved);
        if (baseAddress205 != derivedAddress205) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::ccTouchMoved", Severity::Debug);
            Interface::get()->addHook("CCMenu::ccTouchMoved", (void*)temp_name_find_better::address205(), (void*)addresser::getVirtual(derivedAddress205));
        }

    	using baseType206 = temp_name_find_better::ret206(CCMenu::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress206 = (baseType206)(&CCMenu::ccTouchEnded);
		using derivedType206 = temp_name_find_better::ret206(D<baseAddress206, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress206 = (derivedType206)(&D<baseAddress206, UUID>::ccTouchEnded);
        if (baseAddress206 != derivedAddress206) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::ccTouchEnded", Severity::Debug);
            Interface::get()->addHook("CCMenu::ccTouchEnded", (void*)temp_name_find_better::address206(), (void*)addresser::getVirtual(derivedAddress206));
        }

    	using baseType207 = temp_name_find_better::ret207(CCMenu::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress207 = (baseType207)(&CCMenu::ccTouchCancelled);
		using derivedType207 = temp_name_find_better::ret207(D<baseAddress207, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress207 = (derivedType207)(&D<baseAddress207, UUID>::ccTouchCancelled);
        if (baseAddress207 != derivedAddress207) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::ccTouchCancelled", Severity::Debug);
            Interface::get()->addHook("CCMenu::ccTouchCancelled", (void*)temp_name_find_better::address207(), (void*)addresser::getVirtual(derivedAddress207));
        }

    	using baseType208 = temp_name_find_better::ret208(CCMenu::*)() ;
		constexpr auto baseAddress208 = (baseType208)(&CCMenu::init);
		using derivedType208 = temp_name_find_better::ret208(D<baseAddress208, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress208 = (derivedType208)(&D<baseAddress208, UUID>::init);
        if (baseAddress208 != derivedAddress208) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::init", Severity::Debug);
            Interface::get()->addHook("CCMenu::init", (void*)temp_name_find_better::address208(), (void*)addresser::getVirtual(derivedAddress208));
        }

    	using baseType209 = temp_name_find_better::ret209(CCMenu::*)() ;
		constexpr auto baseAddress209 = (baseType209)(&CCMenu::registerWithTouchDispatcher);
		using derivedType209 = temp_name_find_better::ret209(D<baseAddress209, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress209 = (derivedType209)(&D<baseAddress209, UUID>::registerWithTouchDispatcher);
        if (baseAddress209 != derivedAddress209) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCMenu::registerWithTouchDispatcher", (void*)temp_name_find_better::address209(), (void*)addresser::getVirtual(derivedAddress209));
        }

    	using baseType210 = temp_name_find_better::ret210(CCMenu::*)() ;
		constexpr auto baseAddress210 = (baseType210)(&CCMenu::onExit);
		using derivedType210 = temp_name_find_better::ret210(D<baseAddress210, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress210 = (derivedType210)(&D<baseAddress210, UUID>::onExit);
        if (baseAddress210 != derivedAddress210) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::onExit", Severity::Debug);
            Interface::get()->addHook("CCMenu::onExit", (void*)temp_name_find_better::address210(), (void*)addresser::getVirtual(derivedAddress210));
        }

    	using baseType211 = temp_name_find_better::ret211(CCMenu::*)(cocos2d::CCNode*, bool) ;
		constexpr auto baseAddress211 = (baseType211)(&CCMenu::removeChild);
		using derivedType211 = temp_name_find_better::ret211(D<baseAddress211, UUID>::*)(cocos2d::CCNode*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress211 = (derivedType211)(&D<baseAddress211, UUID>::removeChild);
        if (baseAddress211 != derivedAddress211) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::removeChild", Severity::Debug);
            Interface::get()->addHook("CCMenu::removeChild", (void*)temp_name_find_better::address211(), (void*)addresser::getVirtual(derivedAddress211));
        }

    	using baseType212 = temp_name_find_better::ret212(CCMenu::*)(cocos2d::CCArray*) ;
		constexpr auto baseAddress212 = (baseType212)(&CCMenu::initWithArray);
		using derivedType212 = temp_name_find_better::ret212(D<baseAddress212, UUID>::*)(cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress212 = (derivedType212)(&D<baseAddress212, UUID>::initWithArray);
        if (baseAddress212 != derivedAddress212) {
        	Interface::get()->logInfo("Adding hook at function CCMenu::initWithArray", Severity::Debug);
            Interface::get()->addHook("CCMenu::initWithArray", (void*)temp_name_find_better::address212(), (void*)addresser::getNonVirtual(derivedAddress212));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenuItem : cocos2d::CCMenuItem, ModifierBase {
    $CCMenuItem(const $CCMenuItem& c) : CCMenuItem(c) {}
    $CCMenuItem() : $CCMenuItem(*this) {}
    ~$CCMenuItem() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenuItem);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType217 = temp_name_find_better::ret217(CCMenuItem::*)() ;
		constexpr auto baseAddress217 = (baseType217)(&CCMenuItem::activate);
		using derivedType217 = temp_name_find_better::ret217(D<baseAddress217, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress217 = (derivedType217)(&D<baseAddress217, UUID>::activate);
        if (baseAddress217 != derivedAddress217) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::activate", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::activate", (void*)temp_name_find_better::address217(), (void*)addresser::getVirtual(derivedAddress217));
        }

    	using baseType218 = temp_name_find_better::ret218(CCMenuItem::*)() ;
		constexpr auto baseAddress218 = (baseType218)(&CCMenuItem::selected);
		using derivedType218 = temp_name_find_better::ret218(D<baseAddress218, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress218 = (derivedType218)(&D<baseAddress218, UUID>::selected);
        if (baseAddress218 != derivedAddress218) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::selected", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::selected", (void*)temp_name_find_better::address218(), (void*)addresser::getVirtual(derivedAddress218));
        }

    	using baseType219 = temp_name_find_better::ret219(CCMenuItem::*)() ;
		constexpr auto baseAddress219 = (baseType219)(&CCMenuItem::unselected);
		using derivedType219 = temp_name_find_better::ret219(D<baseAddress219, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress219 = (derivedType219)(&D<baseAddress219, UUID>::unselected);
        if (baseAddress219 != derivedAddress219) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::unselected", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::unselected", (void*)temp_name_find_better::address219(), (void*)addresser::getVirtual(derivedAddress219));
        }

    	using baseType220 = temp_name_find_better::ret220(CCMenuItem::*)(int) ;
		constexpr auto baseAddress220 = (baseType220)(&CCMenuItem::registerScriptTapHandler);
		using derivedType220 = temp_name_find_better::ret220(D<baseAddress220, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress220 = (derivedType220)(&D<baseAddress220, UUID>::registerScriptTapHandler);
        if (baseAddress220 != derivedAddress220) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::registerScriptTapHandler", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::registerScriptTapHandler", (void*)temp_name_find_better::address220(), (void*)addresser::getVirtual(derivedAddress220));
        }

    	using baseType221 = temp_name_find_better::ret221(CCMenuItem::*)() ;
		constexpr auto baseAddress221 = (baseType221)(&CCMenuItem::unregisterScriptTapHandler);
		using derivedType221 = temp_name_find_better::ret221(D<baseAddress221, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress221 = (derivedType221)(&D<baseAddress221, UUID>::unregisterScriptTapHandler);
        if (baseAddress221 != derivedAddress221) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::unregisterScriptTapHandler", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::unregisterScriptTapHandler", (void*)temp_name_find_better::address221(), (void*)addresser::getVirtual(derivedAddress221));
        }

    	using baseType222 = temp_name_find_better::ret222(CCMenuItem::*)() ;
		constexpr auto baseAddress222 = (baseType222)(&CCMenuItem::isEnabled);
		using derivedType222 = temp_name_find_better::ret222(D<baseAddress222, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress222 = (derivedType222)(&D<baseAddress222, UUID>::isEnabled);
        if (baseAddress222 != derivedAddress222) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::isEnabled", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::isEnabled", (void*)temp_name_find_better::address222(), (void*)addresser::getVirtual(derivedAddress222));
        }

    	using baseType223 = temp_name_find_better::ret223(CCMenuItem::*)(bool) ;
		constexpr auto baseAddress223 = (baseType223)(&CCMenuItem::setEnabled);
		using derivedType223 = temp_name_find_better::ret223(D<baseAddress223, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress223 = (derivedType223)(&D<baseAddress223, UUID>::setEnabled);
        if (baseAddress223 != derivedAddress223) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::setEnabled", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::setEnabled", (void*)temp_name_find_better::address223(), (void*)addresser::getVirtual(derivedAddress223));
        }

    	using baseType224 = temp_name_find_better::ret224(CCMenuItem::*)() ;
		constexpr auto baseAddress224 = (baseType224)(&CCMenuItem::isSelected);
		using derivedType224 = temp_name_find_better::ret224(D<baseAddress224, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress224 = (derivedType224)(&D<baseAddress224, UUID>::isSelected);
        if (baseAddress224 != derivedAddress224) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::isSelected", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::isSelected", (void*)temp_name_find_better::address224(), (void*)addresser::getVirtual(derivedAddress224));
        }

    	using baseType225 = temp_name_find_better::ret225(CCMenuItem::*)() ;
		constexpr auto baseAddress225 = (baseType225)(&CCMenuItem::rect);
		using derivedType225 = temp_name_find_better::ret225(D<baseAddress225, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress225 = (derivedType225)(&D<baseAddress225, UUID>::rect);
        if (baseAddress225 != derivedAddress225) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItem::rect", Severity::Debug);
            Interface::get()->addHook("CCMenuItem::rect", (void*)temp_name_find_better::address225(), (void*)addresser::getNonVirtual(derivedAddress225));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $NumberInputDelegate : NumberInputDelegate, ModifierBase {
    $NumberInputDelegate(const $NumberInputDelegate& c) : NumberInputDelegate(c) {}
    $NumberInputDelegate() : $NumberInputDelegate(*this) {}
    ~$NumberInputDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($NumberInputDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MusicDownloadManager : MusicDownloadManager, ModifierBase {
    $MusicDownloadManager(const $MusicDownloadManager& c) : MusicDownloadManager(c) {}
    $MusicDownloadManager() : $MusicDownloadManager(*this) {}
    ~$MusicDownloadManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MusicDownloadManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1637 = temp_name_find_better::ret1637(*)();
		constexpr auto baseAddress1637 = (baseType1637)(&MusicDownloadManager::sharedState);
		using derivedType1637 = temp_name_find_better::ret1637(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1637 = (derivedType1637)(&D<baseAddress1637, UUID>::sharedState);
        if (baseAddress1637 != derivedAddress1637) {
        	Interface::get()->logInfo("Adding hook at function MusicDownloadManager::sharedState", Severity::Debug);
            Interface::get()->addHook("MusicDownloadManager::sharedState", (void*)temp_name_find_better::address1637(), (void*)addresser::getNonVirtual(derivedAddress1637));
        }

    	using baseType1638 = temp_name_find_better::ret1638(MusicDownloadManager::*)(int) ;
		constexpr auto baseAddress1638 = (baseType1638)(&MusicDownloadManager::pathForSong);
		using derivedType1638 = temp_name_find_better::ret1638(D<baseAddress1638, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1638 = (derivedType1638)(&D<baseAddress1638, UUID>::pathForSong);
        if (baseAddress1638 != derivedAddress1638) {
        	Interface::get()->logInfo("Adding hook at function MusicDownloadManager::pathForSong", Severity::Debug);
            Interface::get()->addHook("MusicDownloadManager::pathForSong", (void*)temp_name_find_better::address1638(), (void*)addresser::getNonVirtual(derivedAddress1638));
        }

    	using baseType1639 = temp_name_find_better::ret1639(MusicDownloadManager::*)() ;
		constexpr auto baseAddress1639 = (baseType1639)(&MusicDownloadManager::getDownloadedSongs);
		using derivedType1639 = temp_name_find_better::ret1639(D<baseAddress1639, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1639 = (derivedType1639)(&D<baseAddress1639, UUID>::getDownloadedSongs);
        if (baseAddress1639 != derivedAddress1639) {
        	Interface::get()->logInfo("Adding hook at function MusicDownloadManager::getDownloadedSongs", Severity::Debug);
            Interface::get()->addHook("MusicDownloadManager::getDownloadedSongs", (void*)temp_name_find_better::address1639(), (void*)addresser::getNonVirtual(derivedAddress1639));
        }

    	using baseType1640 = temp_name_find_better::ret1640(MusicDownloadManager::*)() ;
		constexpr auto baseAddress1640 = (baseType1640)(&MusicDownloadManager::songStateChanged);
		using derivedType1640 = temp_name_find_better::ret1640(D<baseAddress1640, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1640 = (derivedType1640)(&D<baseAddress1640, UUID>::songStateChanged);
        if (baseAddress1640 != derivedAddress1640) {
        	Interface::get()->logInfo("Adding hook at function MusicDownloadManager::songStateChanged", Severity::Debug);
            Interface::get()->addHook("MusicDownloadManager::songStateChanged", (void*)temp_name_find_better::address1640(), (void*)addresser::getNonVirtual(derivedAddress1640));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCString : cocos2d::CCString, ModifierBase {
    $CCString(const $CCString& c) : CCString(c) {}
    $CCString() : $CCString(*this) {}
    ~$CCString() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCString);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType496 = temp_name_find_better::ret496(CCString::*)(cocos2d::CCObject const*) ;
		constexpr auto baseAddress496 = (baseType496)(&CCString::isEqual);
		using derivedType496 = temp_name_find_better::ret496(D<baseAddress496, UUID>::*)(cocos2d::CCObject const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress496 = (derivedType496)(&D<baseAddress496, UUID>::isEqual);
        if (baseAddress496 != derivedAddress496) {
        	Interface::get()->logInfo("Adding hook at function CCString::isEqual", Severity::Debug);
            Interface::get()->addHook("CCString::isEqual", (void*)temp_name_find_better::address496(), (void*)addresser::getVirtual(derivedAddress496));
        }

    	using baseType497 = temp_name_find_better::ret497(CCString::*)(cocos2d::CCDataVisitor&) ;
		constexpr auto baseAddress497 = (baseType497)(&CCString::acceptVisitor);
		using derivedType497 = temp_name_find_better::ret497(D<baseAddress497, UUID>::*)(cocos2d::CCDataVisitor&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress497 = (derivedType497)(&D<baseAddress497, UUID>::acceptVisitor);
        if (baseAddress497 != derivedAddress497) {
        	Interface::get()->logInfo("Adding hook at function CCString::acceptVisitor", Severity::Debug);
            Interface::get()->addHook("CCString::acceptVisitor", (void*)temp_name_find_better::address497(), (void*)addresser::getVirtual(derivedAddress497));
        }

    	using baseType498 = temp_name_find_better::ret498(CCString::*)(cocos2d::CCZone*) ;
		constexpr auto baseAddress498 = (baseType498)(&CCString::copyWithZone);
		using derivedType498 = temp_name_find_better::ret498(D<baseAddress498, UUID>::*)(cocos2d::CCZone*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress498 = (derivedType498)(&D<baseAddress498, UUID>::copyWithZone);
        if (baseAddress498 != derivedAddress498) {
        	Interface::get()->logInfo("Adding hook at function CCString::copyWithZone", Severity::Debug);
            Interface::get()->addHook("CCString::copyWithZone", (void*)temp_name_find_better::address498(), (void*)addresser::getVirtual(derivedAddress498));
        }

    	using baseType499 = temp_name_find_better::ret499(CCString::*)() const ;
		constexpr auto baseAddress499 = (baseType499)(&CCString::boolValue);
		using derivedType499 = temp_name_find_better::ret499(D<baseAddress499, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress499 = (derivedType499)(&D<baseAddress499, UUID>::boolValue);
        if (baseAddress499 != derivedAddress499) {
        	Interface::get()->logInfo("Adding hook at function CCString::boolValue", Severity::Debug);
            Interface::get()->addHook("CCString::boolValue", (void*)temp_name_find_better::address499(), (void*)addresser::getNonVirtual(derivedAddress499));
        }

    	using baseType500 = temp_name_find_better::ret500(CCString::*)() const ;
		constexpr auto baseAddress500 = (baseType500)(&CCString::doubleValue);
		using derivedType500 = temp_name_find_better::ret500(D<baseAddress500, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress500 = (derivedType500)(&D<baseAddress500, UUID>::doubleValue);
        if (baseAddress500 != derivedAddress500) {
        	Interface::get()->logInfo("Adding hook at function CCString::doubleValue", Severity::Debug);
            Interface::get()->addHook("CCString::doubleValue", (void*)temp_name_find_better::address500(), (void*)addresser::getNonVirtual(derivedAddress500));
        }

    	using baseType501 = temp_name_find_better::ret501(CCString::*)() const ;
		constexpr auto baseAddress501 = (baseType501)(&CCString::floatValue);
		using derivedType501 = temp_name_find_better::ret501(D<baseAddress501, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress501 = (derivedType501)(&D<baseAddress501, UUID>::floatValue);
        if (baseAddress501 != derivedAddress501) {
        	Interface::get()->logInfo("Adding hook at function CCString::floatValue", Severity::Debug);
            Interface::get()->addHook("CCString::floatValue", (void*)temp_name_find_better::address501(), (void*)addresser::getNonVirtual(derivedAddress501));
        }

    	using baseType502 = temp_name_find_better::ret502(CCString::*)() const ;
		constexpr auto baseAddress502 = (baseType502)(&CCString::getCString);
		using derivedType502 = temp_name_find_better::ret502(D<baseAddress502, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress502 = (derivedType502)(&D<baseAddress502, UUID>::getCString);
        if (baseAddress502 != derivedAddress502) {
        	Interface::get()->logInfo("Adding hook at function CCString::getCString", Severity::Debug);
            Interface::get()->addHook("CCString::getCString", (void*)temp_name_find_better::address502(), (void*)addresser::getNonVirtual(derivedAddress502));
        }

    	using baseType503 = temp_name_find_better::ret503(CCString::*)() const ;
		constexpr auto baseAddress503 = (baseType503)(&CCString::intValue);
		using derivedType503 = temp_name_find_better::ret503(D<baseAddress503, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress503 = (derivedType503)(&D<baseAddress503, UUID>::intValue);
        if (baseAddress503 != derivedAddress503) {
        	Interface::get()->logInfo("Adding hook at function CCString::intValue", Severity::Debug);
            Interface::get()->addHook("CCString::intValue", (void*)temp_name_find_better::address503(), (void*)addresser::getNonVirtual(derivedAddress503));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenuItemImage : cocos2d::CCMenuItemImage, ModifierBase {
    $CCMenuItemImage(const $CCMenuItemImage& c) : CCMenuItemImage(c) {}
    $CCMenuItemImage() : $CCMenuItemImage(*this) {}
    ~$CCMenuItemImage() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenuItemImage);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType226 = temp_name_find_better::ret226(CCMenuItemImage::*)() ;
		constexpr auto baseAddress226 = (baseType226)(&CCMenuItemImage::init);
		using derivedType226 = temp_name_find_better::ret226(D<baseAddress226, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress226 = (derivedType226)(&D<baseAddress226, UUID>::init);
        if (baseAddress226 != derivedAddress226) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemImage::init", Severity::Debug);
            Interface::get()->addHook("CCMenuItemImage::init", (void*)temp_name_find_better::address226(), (void*)addresser::getVirtual(derivedAddress226));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMenuItemSprite : cocos2d::CCMenuItemSprite, ModifierBase {
    $CCMenuItemSprite(const $CCMenuItemSprite& c) : CCMenuItemSprite(c) {}
    $CCMenuItemSprite() : $CCMenuItemSprite(*this) {}
    ~$CCMenuItemSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMenuItemSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType236 = temp_name_find_better::ret236(CCMenuItemSprite::*)() ;
		constexpr auto baseAddress236 = (baseType236)(&CCMenuItemSprite::selected);
		using derivedType236 = temp_name_find_better::ret236(D<baseAddress236, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress236 = (derivedType236)(&D<baseAddress236, UUID>::selected);
        if (baseAddress236 != derivedAddress236) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::selected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::selected", (void*)temp_name_find_better::address236(), (void*)addresser::getVirtual(derivedAddress236));
        }

    	using baseType237 = temp_name_find_better::ret237(CCMenuItemSprite::*)() ;
		constexpr auto baseAddress237 = (baseType237)(&CCMenuItemSprite::unselected);
		using derivedType237 = temp_name_find_better::ret237(D<baseAddress237, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress237 = (derivedType237)(&D<baseAddress237, UUID>::unselected);
        if (baseAddress237 != derivedAddress237) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::unselected", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::unselected", (void*)temp_name_find_better::address237(), (void*)addresser::getVirtual(derivedAddress237));
        }

    	using baseType238 = temp_name_find_better::ret238(CCMenuItemSprite::*)(bool) ;
		constexpr auto baseAddress238 = (baseType238)(&CCMenuItemSprite::setEnabled);
		using derivedType238 = temp_name_find_better::ret238(D<baseAddress238, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress238 = (derivedType238)(&D<baseAddress238, UUID>::setEnabled);
        if (baseAddress238 != derivedAddress238) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::setEnabled", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::setEnabled", (void*)temp_name_find_better::address238(), (void*)addresser::getVirtual(derivedAddress238));
        }

    	using baseType239 = temp_name_find_better::ret239(CCMenuItemSprite::*)() ;
		constexpr auto baseAddress239 = (baseType239)(&CCMenuItemSprite::getNormalImage);
		using derivedType239 = temp_name_find_better::ret239(D<baseAddress239, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress239 = (derivedType239)(&D<baseAddress239, UUID>::getNormalImage);
        if (baseAddress239 != derivedAddress239) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::getNormalImage", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::getNormalImage", (void*)temp_name_find_better::address239(), (void*)addresser::getVirtual(derivedAddress239));
        }

    	using baseType240 = temp_name_find_better::ret240(CCMenuItemSprite::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress240 = (baseType240)(&CCMenuItemSprite::setNormalImage);
		using derivedType240 = temp_name_find_better::ret240(D<baseAddress240, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress240 = (derivedType240)(&D<baseAddress240, UUID>::setNormalImage);
        if (baseAddress240 != derivedAddress240) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::setNormalImage", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::setNormalImage", (void*)temp_name_find_better::address240(), (void*)addresser::getVirtual(derivedAddress240));
        }

    	using baseType241 = temp_name_find_better::ret241(CCMenuItemSprite::*)() ;
		constexpr auto baseAddress241 = (baseType241)(&CCMenuItemSprite::getSelectedImage);
		using derivedType241 = temp_name_find_better::ret241(D<baseAddress241, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress241 = (derivedType241)(&D<baseAddress241, UUID>::getSelectedImage);
        if (baseAddress241 != derivedAddress241) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::getSelectedImage", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::getSelectedImage", (void*)temp_name_find_better::address241(), (void*)addresser::getVirtual(derivedAddress241));
        }

    	using baseType242 = temp_name_find_better::ret242(CCMenuItemSprite::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress242 = (baseType242)(&CCMenuItemSprite::setSelectedImage);
		using derivedType242 = temp_name_find_better::ret242(D<baseAddress242, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress242 = (derivedType242)(&D<baseAddress242, UUID>::setSelectedImage);
        if (baseAddress242 != derivedAddress242) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::setSelectedImage", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::setSelectedImage", (void*)temp_name_find_better::address242(), (void*)addresser::getVirtual(derivedAddress242));
        }

    	using baseType243 = temp_name_find_better::ret243(CCMenuItemSprite::*)() ;
		constexpr auto baseAddress243 = (baseType243)(&CCMenuItemSprite::getDisabledImage);
		using derivedType243 = temp_name_find_better::ret243(D<baseAddress243, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress243 = (derivedType243)(&D<baseAddress243, UUID>::getDisabledImage);
        if (baseAddress243 != derivedAddress243) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::getDisabledImage", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::getDisabledImage", (void*)temp_name_find_better::address243(), (void*)addresser::getVirtual(derivedAddress243));
        }

    	using baseType244 = temp_name_find_better::ret244(CCMenuItemSprite::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress244 = (baseType244)(&CCMenuItemSprite::setDisabledImage);
		using derivedType244 = temp_name_find_better::ret244(D<baseAddress244, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress244 = (derivedType244)(&D<baseAddress244, UUID>::setDisabledImage);
        if (baseAddress244 != derivedAddress244) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::setDisabledImage", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::setDisabledImage", (void*)temp_name_find_better::address244(), (void*)addresser::getVirtual(derivedAddress244));
        }

    	using baseType245 = temp_name_find_better::ret245(CCMenuItemSprite::*)() ;
		constexpr auto baseAddress245 = (baseType245)(&CCMenuItemSprite::updateImagesVisibility);
		using derivedType245 = temp_name_find_better::ret245(D<baseAddress245, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress245 = (derivedType245)(&D<baseAddress245, UUID>::updateImagesVisibility);
        if (baseAddress245 != derivedAddress245) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::updateImagesVisibility", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::updateImagesVisibility", (void*)temp_name_find_better::address245(), (void*)addresser::getVirtual(derivedAddress245));
        }

		using baseType246 = temp_name_find_better::ret246(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*);
		constexpr auto baseAddress246 = (baseType246)(&CCMenuItemSprite::create);
		using derivedType246 = temp_name_find_better::ret246(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress246 = (derivedType246)(&D<baseAddress246, UUID>::create);
        if (baseAddress246 != derivedAddress246) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::create", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::create", (void*)temp_name_find_better::address246(), (void*)addresser::getNonVirtual(derivedAddress246));
        }

		using baseType247 = temp_name_find_better::ret247(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		constexpr auto baseAddress247 = (baseType247)(&CCMenuItemSprite::create);
		using derivedType247 = temp_name_find_better::ret247(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress247 = (derivedType247)(&D<baseAddress247, UUID>::create);
        if (baseAddress247 != derivedAddress247) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::create", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::create", (void*)temp_name_find_better::address247(), (void*)addresser::getNonVirtual(derivedAddress247));
        }

		using baseType248 = temp_name_find_better::ret248(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		constexpr auto baseAddress248 = (baseType248)(&CCMenuItemSprite::create);
		using derivedType248 = temp_name_find_better::ret248(*)(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, cocos2d::SEL_MenuHandler);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress248 = (derivedType248)(&D<baseAddress248, UUID>::create);
        if (baseAddress248 != derivedAddress248) {
        	Interface::get()->logInfo("Adding hook at function CCMenuItemSprite::create", Severity::Debug);
            Interface::get()->addHook("CCMenuItemSprite::create", (void*)temp_name_find_better::address248(), (void*)addresser::getNonVirtual(derivedAddress248));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMoveTo : cocos2d::CCMoveTo, ModifierBase {
    $CCMoveTo(const $CCMoveTo& c) : CCMoveTo(c) {}
    $CCMoveTo() : $CCMoveTo(*this) {}
    ~$CCMoveTo() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMoveTo);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType256 = temp_name_find_better::ret256(*)(float, cocos2d::CCPoint const&);
		constexpr auto baseAddress256 = (baseType256)(&CCMoveTo::create);
		using derivedType256 = temp_name_find_better::ret256(*)(float, cocos2d::CCPoint const&);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress256 = (derivedType256)(&D<baseAddress256, UUID>::create);
        if (baseAddress256 != derivedAddress256) {
        	Interface::get()->logInfo("Adding hook at function CCMoveTo::create", Severity::Debug);
            Interface::get()->addHook("CCMoveTo::create", (void*)temp_name_find_better::address256(), (void*)addresser::getNonVirtual(derivedAddress256));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMotionStreak : cocos2d::CCMotionStreak, ModifierBase {
    $CCMotionStreak(const $CCMotionStreak& c) : CCMotionStreak(c) {}
    $CCMotionStreak() : $CCMotionStreak(*this) {}
    ~$CCMotionStreak() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMotionStreak);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType249 = temp_name_find_better::ret249(CCMotionStreak::*)() ;
		constexpr auto baseAddress249 = (baseType249)(&CCMotionStreak::reset);
		using derivedType249 = temp_name_find_better::ret249(D<baseAddress249, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress249 = (derivedType249)(&D<baseAddress249, UUID>::reset);
        if (baseAddress249 != derivedAddress249) {
        	Interface::get()->logInfo("Adding hook at function CCMotionStreak::reset", Severity::Debug);
            Interface::get()->addHook("CCMotionStreak::reset", (void*)temp_name_find_better::address249(), (void*)addresser::getNonVirtual(derivedAddress249));
        }

    	using baseType250 = temp_name_find_better::ret250(CCMotionStreak::*)() ;
		constexpr auto baseAddress250 = (baseType250)(&CCMotionStreak::resumeStroke);
		using derivedType250 = temp_name_find_better::ret250(D<baseAddress250, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress250 = (derivedType250)(&D<baseAddress250, UUID>::resumeStroke);
        if (baseAddress250 != derivedAddress250) {
        	Interface::get()->logInfo("Adding hook at function CCMotionStreak::resumeStroke", Severity::Debug);
            Interface::get()->addHook("CCMotionStreak::resumeStroke", (void*)temp_name_find_better::address250(), (void*)addresser::getNonVirtual(derivedAddress250));
        }

    	using baseType251 = temp_name_find_better::ret251(CCMotionStreak::*)() ;
		constexpr auto baseAddress251 = (baseType251)(&CCMotionStreak::stopStroke);
		using derivedType251 = temp_name_find_better::ret251(D<baseAddress251, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress251 = (derivedType251)(&D<baseAddress251, UUID>::stopStroke);
        if (baseAddress251 != derivedAddress251) {
        	Interface::get()->logInfo("Adding hook at function CCMotionStreak::stopStroke", Severity::Debug);
            Interface::get()->addHook("CCMotionStreak::stopStroke", (void*)temp_name_find_better::address251(), (void*)addresser::getNonVirtual(derivedAddress251));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMoveBy : cocos2d::CCMoveBy, ModifierBase {
    $CCMoveBy(const $CCMoveBy& c) : CCMoveBy(c) {}
    $CCMoveBy() : $CCMoveBy(*this) {}
    ~$CCMoveBy() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMoveBy);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType255 = temp_name_find_better::ret255(*)(float, cocos2d::CCPoint const&);
		constexpr auto baseAddress255 = (baseType255)(&CCMoveBy::create);
		using derivedType255 = temp_name_find_better::ret255(*)(float, cocos2d::CCPoint const&);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress255 = (derivedType255)(&D<baseAddress255, UUID>::create);
        if (baseAddress255 != derivedAddress255) {
        	Interface::get()->logInfo("Adding hook at function CCMoveBy::create", Severity::Debug);
            Interface::get()->addHook("CCMoveBy::create", (void*)temp_name_find_better::address255(), (void*)addresser::getNonVirtual(derivedAddress255));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCNode : cocos2d::CCNode, ModifierBase {
    $CCNode(const $CCNode& c) : CCNode(c) {}
    $CCNode() : $CCNode(*this) {}
    ~$CCNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType258 = temp_name_find_better::ret258(CCNode::*)(int) ;
		constexpr auto baseAddress258 = (baseType258)(&CCNode::_setZOrder);
		using derivedType258 = temp_name_find_better::ret258(D<baseAddress258, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress258 = (derivedType258)(&D<baseAddress258, UUID>::_setZOrder);
        if (baseAddress258 != derivedAddress258) {
        	Interface::get()->logInfo("Adding hook at function CCNode::_setZOrder", Severity::Debug);
            Interface::get()->addHook("CCNode::_setZOrder", (void*)temp_name_find_better::address258(), (void*)addresser::getNonVirtual(derivedAddress258));
        }

    	using baseType259 = temp_name_find_better::ret259(CCNode::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress259 = (baseType259)(&CCNode::addChild);
		using derivedType259 = temp_name_find_better::ret259(D<baseAddress259, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress259 = (derivedType259)(&D<baseAddress259, UUID>::addChild);
        if (baseAddress259 != derivedAddress259) {
        	Interface::get()->logInfo("Adding hook at function CCNode::addChild", Severity::Debug);
            Interface::get()->addHook("CCNode::addChild", (void*)temp_name_find_better::address259(), (void*)addresser::getNonVirtual(derivedAddress259));
        }

    	using baseType260 = temp_name_find_better::ret260(CCNode::*)(cocos2d::CCNode*, int) ;
		constexpr auto baseAddress260 = (baseType260)(&CCNode::addChild);
		using derivedType260 = temp_name_find_better::ret260(D<baseAddress260, UUID>::*)(cocos2d::CCNode*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress260 = (derivedType260)(&D<baseAddress260, UUID>::addChild);
        if (baseAddress260 != derivedAddress260) {
        	Interface::get()->logInfo("Adding hook at function CCNode::addChild", Severity::Debug);
            Interface::get()->addHook("CCNode::addChild", (void*)temp_name_find_better::address260(), (void*)addresser::getNonVirtual(derivedAddress260));
        }

    	using baseType261 = temp_name_find_better::ret261(CCNode::*)(cocos2d::CCNode*, int, int) ;
		constexpr auto baseAddress261 = (baseType261)(&CCNode::addChild);
		using derivedType261 = temp_name_find_better::ret261(D<baseAddress261, UUID>::*)(cocos2d::CCNode*, int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress261 = (derivedType261)(&D<baseAddress261, UUID>::addChild);
        if (baseAddress261 != derivedAddress261) {
        	Interface::get()->logInfo("Adding hook at function CCNode::addChild", Severity::Debug);
            Interface::get()->addHook("CCNode::addChild", (void*)temp_name_find_better::address261(), (void*)addresser::getNonVirtual(derivedAddress261));
        }

    	using baseType262 = temp_name_find_better::ret262(CCNode::*)(cocos2d::CCComponent*) ;
		constexpr auto baseAddress262 = (baseType262)(&CCNode::addComponent);
		using derivedType262 = temp_name_find_better::ret262(D<baseAddress262, UUID>::*)(cocos2d::CCComponent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress262 = (derivedType262)(&D<baseAddress262, UUID>::addComponent);
        if (baseAddress262 != derivedAddress262) {
        	Interface::get()->logInfo("Adding hook at function CCNode::addComponent", Severity::Debug);
            Interface::get()->addHook("CCNode::addComponent", (void*)temp_name_find_better::address262(), (void*)addresser::getNonVirtual(derivedAddress262));
        }

    	using baseType263 = temp_name_find_better::ret263(CCNode::*)() ;
		constexpr auto baseAddress263 = (baseType263)(&CCNode::cleanup);
		using derivedType263 = temp_name_find_better::ret263(D<baseAddress263, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress263 = (derivedType263)(&D<baseAddress263, UUID>::cleanup);
        if (baseAddress263 != derivedAddress263) {
        	Interface::get()->logInfo("Adding hook at function CCNode::cleanup", Severity::Debug);
            Interface::get()->addHook("CCNode::cleanup", (void*)temp_name_find_better::address263(), (void*)addresser::getNonVirtual(derivedAddress263));
        }

    	using baseType264 = temp_name_find_better::ret264(CCNode::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress264 = (baseType264)(&CCNode::convertToNodeSpace);
		using derivedType264 = temp_name_find_better::ret264(D<baseAddress264, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress264 = (derivedType264)(&D<baseAddress264, UUID>::convertToNodeSpace);
        if (baseAddress264 != derivedAddress264) {
        	Interface::get()->logInfo("Adding hook at function CCNode::convertToNodeSpace", Severity::Debug);
            Interface::get()->addHook("CCNode::convertToNodeSpace", (void*)temp_name_find_better::address264(), (void*)addresser::getNonVirtual(derivedAddress264));
        }

    	using baseType265 = temp_name_find_better::ret265(CCNode::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress265 = (baseType265)(&CCNode::convertToWorldSpace);
		using derivedType265 = temp_name_find_better::ret265(D<baseAddress265, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress265 = (derivedType265)(&D<baseAddress265, UUID>::convertToWorldSpace);
        if (baseAddress265 != derivedAddress265) {
        	Interface::get()->logInfo("Adding hook at function CCNode::convertToWorldSpace", Severity::Debug);
            Interface::get()->addHook("CCNode::convertToWorldSpace", (void*)temp_name_find_better::address265(), (void*)addresser::getNonVirtual(derivedAddress265));
        }

		using baseType266 = temp_name_find_better::ret266(*)();
		constexpr auto baseAddress266 = (baseType266)(&CCNode::create);
		using derivedType266 = temp_name_find_better::ret266(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress266 = (derivedType266)(&D<baseAddress266, UUID>::create);
        if (baseAddress266 != derivedAddress266) {
        	Interface::get()->logInfo("Adding hook at function CCNode::create", Severity::Debug);
            Interface::get()->addHook("CCNode::create", (void*)temp_name_find_better::address266(), (void*)addresser::getNonVirtual(derivedAddress266));
        }

    	using baseType267 = temp_name_find_better::ret267(CCNode::*)() ;
		constexpr auto baseAddress267 = (baseType267)(&CCNode::draw);
		using derivedType267 = temp_name_find_better::ret267(D<baseAddress267, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress267 = (derivedType267)(&D<baseAddress267, UUID>::draw);
        if (baseAddress267 != derivedAddress267) {
        	Interface::get()->logInfo("Adding hook at function CCNode::draw", Severity::Debug);
            Interface::get()->addHook("CCNode::draw", (void*)temp_name_find_better::address267(), (void*)addresser::getNonVirtual(derivedAddress267));
        }

    	using baseType268 = temp_name_find_better::ret268(CCNode::*)(int) ;
		constexpr auto baseAddress268 = (baseType268)(&CCNode::getActionByTag);
		using derivedType268 = temp_name_find_better::ret268(D<baseAddress268, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress268 = (derivedType268)(&D<baseAddress268, UUID>::getActionByTag);
        if (baseAddress268 != derivedAddress268) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getActionByTag", Severity::Debug);
            Interface::get()->addHook("CCNode::getActionByTag", (void*)temp_name_find_better::address268(), (void*)addresser::getNonVirtual(derivedAddress268));
        }

    	using baseType269 = temp_name_find_better::ret269(CCNode::*)() ;
		constexpr auto baseAddress269 = (baseType269)(&CCNode::getActionManager);
		using derivedType269 = temp_name_find_better::ret269(D<baseAddress269, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress269 = (derivedType269)(&D<baseAddress269, UUID>::getActionManager);
        if (baseAddress269 != derivedAddress269) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getActionManager", Severity::Debug);
            Interface::get()->addHook("CCNode::getActionManager", (void*)temp_name_find_better::address269(), (void*)addresser::getNonVirtual(derivedAddress269));
        }

    	using baseType270 = temp_name_find_better::ret270(CCNode::*)() ;
		constexpr auto baseAddress270 = (baseType270)(&CCNode::getAnchorPoint);
		using derivedType270 = temp_name_find_better::ret270(D<baseAddress270, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress270 = (derivedType270)(&D<baseAddress270, UUID>::getAnchorPoint);
        if (baseAddress270 != derivedAddress270) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getAnchorPoint", Severity::Debug);
            Interface::get()->addHook("CCNode::getAnchorPoint", (void*)temp_name_find_better::address270(), (void*)addresser::getNonVirtual(derivedAddress270));
        }

    	using baseType271 = temp_name_find_better::ret271(CCNode::*)() ;
		constexpr auto baseAddress271 = (baseType271)(&CCNode::getAnchorPointInPoints);
		using derivedType271 = temp_name_find_better::ret271(D<baseAddress271, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress271 = (derivedType271)(&D<baseAddress271, UUID>::getAnchorPointInPoints);
        if (baseAddress271 != derivedAddress271) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getAnchorPointInPoints", Severity::Debug);
            Interface::get()->addHook("CCNode::getAnchorPointInPoints", (void*)temp_name_find_better::address271(), (void*)addresser::getNonVirtual(derivedAddress271));
        }

    	using baseType272 = temp_name_find_better::ret272(CCNode::*)() ;
		constexpr auto baseAddress272 = (baseType272)(&CCNode::getCamera);
		using derivedType272 = temp_name_find_better::ret272(D<baseAddress272, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress272 = (derivedType272)(&D<baseAddress272, UUID>::getCamera);
        if (baseAddress272 != derivedAddress272) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getCamera", Severity::Debug);
            Interface::get()->addHook("CCNode::getCamera", (void*)temp_name_find_better::address272(), (void*)addresser::getNonVirtual(derivedAddress272));
        }

    	using baseType273 = temp_name_find_better::ret273(CCNode::*)(int) ;
		constexpr auto baseAddress273 = (baseType273)(&CCNode::getChildByTag);
		using derivedType273 = temp_name_find_better::ret273(D<baseAddress273, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress273 = (derivedType273)(&D<baseAddress273, UUID>::getChildByTag);
        if (baseAddress273 != derivedAddress273) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getChildByTag", Severity::Debug);
            Interface::get()->addHook("CCNode::getChildByTag", (void*)temp_name_find_better::address273(), (void*)addresser::getNonVirtual(derivedAddress273));
        }

    	using baseType274 = temp_name_find_better::ret274(CCNode::*)() ;
		constexpr auto baseAddress274 = (baseType274)(&CCNode::getChildren);
		using derivedType274 = temp_name_find_better::ret274(D<baseAddress274, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress274 = (derivedType274)(&D<baseAddress274, UUID>::getChildren);
        if (baseAddress274 != derivedAddress274) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getChildren", Severity::Debug);
            Interface::get()->addHook("CCNode::getChildren", (void*)temp_name_find_better::address274(), (void*)addresser::getNonVirtual(derivedAddress274));
        }

    	using baseType275 = temp_name_find_better::ret275(CCNode::*)() const ;
		constexpr auto baseAddress275 = (baseType275)(&CCNode::getChildrenCount);
		using derivedType275 = temp_name_find_better::ret275(D<baseAddress275, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress275 = (derivedType275)(&D<baseAddress275, UUID>::getChildrenCount);
        if (baseAddress275 != derivedAddress275) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getChildrenCount", Severity::Debug);
            Interface::get()->addHook("CCNode::getChildrenCount", (void*)temp_name_find_better::address275(), (void*)addresser::getNonVirtual(derivedAddress275));
        }

    	using baseType276 = temp_name_find_better::ret276(CCNode::*)() const ;
		constexpr auto baseAddress276 = (baseType276)(&CCNode::getContentSize);
		using derivedType276 = temp_name_find_better::ret276(D<baseAddress276, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress276 = (derivedType276)(&D<baseAddress276, UUID>::getContentSize);
        if (baseAddress276 != derivedAddress276) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getContentSize", Severity::Debug);
            Interface::get()->addHook("CCNode::getContentSize", (void*)temp_name_find_better::address276(), (void*)addresser::getNonVirtual(derivedAddress276));
        }

    	using baseType277 = temp_name_find_better::ret277(CCNode::*)() ;
		constexpr auto baseAddress277 = (baseType277)(&CCNode::getGLServerState);
		using derivedType277 = temp_name_find_better::ret277(D<baseAddress277, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress277 = (derivedType277)(&D<baseAddress277, UUID>::getGLServerState);
        if (baseAddress277 != derivedAddress277) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getGLServerState", Severity::Debug);
            Interface::get()->addHook("CCNode::getGLServerState", (void*)temp_name_find_better::address277(), (void*)addresser::getNonVirtual(derivedAddress277));
        }

    	using baseType278 = temp_name_find_better::ret278(CCNode::*)() ;
		constexpr auto baseAddress278 = (baseType278)(&CCNode::getGrid);
		using derivedType278 = temp_name_find_better::ret278(D<baseAddress278, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress278 = (derivedType278)(&D<baseAddress278, UUID>::getGrid);
        if (baseAddress278 != derivedAddress278) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getGrid", Severity::Debug);
            Interface::get()->addHook("CCNode::getGrid", (void*)temp_name_find_better::address278(), (void*)addresser::getNonVirtual(derivedAddress278));
        }

    	using baseType279 = temp_name_find_better::ret279(CCNode::*)() ;
		constexpr auto baseAddress279 = (baseType279)(&CCNode::getOrderOfArrival);
		using derivedType279 = temp_name_find_better::ret279(D<baseAddress279, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress279 = (derivedType279)(&D<baseAddress279, UUID>::getOrderOfArrival);
        if (baseAddress279 != derivedAddress279) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getOrderOfArrival", Severity::Debug);
            Interface::get()->addHook("CCNode::getOrderOfArrival", (void*)temp_name_find_better::address279(), (void*)addresser::getNonVirtual(derivedAddress279));
        }

    	using baseType280 = temp_name_find_better::ret280(CCNode::*)() ;
		constexpr auto baseAddress280 = (baseType280)(&CCNode::getParent);
		using derivedType280 = temp_name_find_better::ret280(D<baseAddress280, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress280 = (derivedType280)(&D<baseAddress280, UUID>::getParent);
        if (baseAddress280 != derivedAddress280) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getParent", Severity::Debug);
            Interface::get()->addHook("CCNode::getParent", (void*)temp_name_find_better::address280(), (void*)addresser::getNonVirtual(derivedAddress280));
        }

    	using baseType281 = temp_name_find_better::ret281(CCNode::*)() ;
		constexpr auto baseAddress281 = (baseType281)(&CCNode::getPosition);
		using derivedType281 = temp_name_find_better::ret281(D<baseAddress281, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress281 = (derivedType281)(&D<baseAddress281, UUID>::getPosition);
        if (baseAddress281 != derivedAddress281) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getPosition", Severity::Debug);
            Interface::get()->addHook("CCNode::getPosition", (void*)temp_name_find_better::address281(), (void*)addresser::getNonVirtual(derivedAddress281));
        }

    	using baseType282 = temp_name_find_better::ret282(CCNode::*)(float*, float*) ;
		constexpr auto baseAddress282 = (baseType282)(&CCNode::getPosition);
		using derivedType282 = temp_name_find_better::ret282(D<baseAddress282, UUID>::*)(float*, float*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress282 = (derivedType282)(&D<baseAddress282, UUID>::getPosition);
        if (baseAddress282 != derivedAddress282) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getPosition", Severity::Debug);
            Interface::get()->addHook("CCNode::getPosition", (void*)temp_name_find_better::address282(), (void*)addresser::getNonVirtual(derivedAddress282));
        }

    	using baseType283 = temp_name_find_better::ret283(CCNode::*)() ;
		constexpr auto baseAddress283 = (baseType283)(&CCNode::getPositionX);
		using derivedType283 = temp_name_find_better::ret283(D<baseAddress283, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress283 = (derivedType283)(&D<baseAddress283, UUID>::getPositionX);
        if (baseAddress283 != derivedAddress283) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getPositionX", Severity::Debug);
            Interface::get()->addHook("CCNode::getPositionX", (void*)temp_name_find_better::address283(), (void*)addresser::getNonVirtual(derivedAddress283));
        }

    	using baseType284 = temp_name_find_better::ret284(CCNode::*)() ;
		constexpr auto baseAddress284 = (baseType284)(&CCNode::getPositionY);
		using derivedType284 = temp_name_find_better::ret284(D<baseAddress284, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress284 = (derivedType284)(&D<baseAddress284, UUID>::getPositionY);
        if (baseAddress284 != derivedAddress284) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getPositionY", Severity::Debug);
            Interface::get()->addHook("CCNode::getPositionY", (void*)temp_name_find_better::address284(), (void*)addresser::getNonVirtual(derivedAddress284));
        }

    	using baseType285 = temp_name_find_better::ret285(CCNode::*)() ;
		constexpr auto baseAddress285 = (baseType285)(&CCNode::getRotation);
		using derivedType285 = temp_name_find_better::ret285(D<baseAddress285, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress285 = (derivedType285)(&D<baseAddress285, UUID>::getRotation);
        if (baseAddress285 != derivedAddress285) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getRotation", Severity::Debug);
            Interface::get()->addHook("CCNode::getRotation", (void*)temp_name_find_better::address285(), (void*)addresser::getNonVirtual(derivedAddress285));
        }

    	using baseType286 = temp_name_find_better::ret286(CCNode::*)() ;
		constexpr auto baseAddress286 = (baseType286)(&CCNode::getRotationX);
		using derivedType286 = temp_name_find_better::ret286(D<baseAddress286, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress286 = (derivedType286)(&D<baseAddress286, UUID>::getRotationX);
        if (baseAddress286 != derivedAddress286) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getRotationX", Severity::Debug);
            Interface::get()->addHook("CCNode::getRotationX", (void*)temp_name_find_better::address286(), (void*)addresser::getNonVirtual(derivedAddress286));
        }

    	using baseType287 = temp_name_find_better::ret287(CCNode::*)() ;
		constexpr auto baseAddress287 = (baseType287)(&CCNode::getRotationY);
		using derivedType287 = temp_name_find_better::ret287(D<baseAddress287, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress287 = (derivedType287)(&D<baseAddress287, UUID>::getRotationY);
        if (baseAddress287 != derivedAddress287) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getRotationY", Severity::Debug);
            Interface::get()->addHook("CCNode::getRotationY", (void*)temp_name_find_better::address287(), (void*)addresser::getNonVirtual(derivedAddress287));
        }

    	using baseType288 = temp_name_find_better::ret288(CCNode::*)() ;
		constexpr auto baseAddress288 = (baseType288)(&CCNode::getScale);
		using derivedType288 = temp_name_find_better::ret288(D<baseAddress288, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress288 = (derivedType288)(&D<baseAddress288, UUID>::getScale);
        if (baseAddress288 != derivedAddress288) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getScale", Severity::Debug);
            Interface::get()->addHook("CCNode::getScale", (void*)temp_name_find_better::address288(), (void*)addresser::getNonVirtual(derivedAddress288));
        }

    	using baseType289 = temp_name_find_better::ret289(CCNode::*)() ;
		constexpr auto baseAddress289 = (baseType289)(&CCNode::getScaleX);
		using derivedType289 = temp_name_find_better::ret289(D<baseAddress289, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress289 = (derivedType289)(&D<baseAddress289, UUID>::getScaleX);
        if (baseAddress289 != derivedAddress289) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getScaleX", Severity::Debug);
            Interface::get()->addHook("CCNode::getScaleX", (void*)temp_name_find_better::address289(), (void*)addresser::getNonVirtual(derivedAddress289));
        }

    	using baseType290 = temp_name_find_better::ret290(CCNode::*)() ;
		constexpr auto baseAddress290 = (baseType290)(&CCNode::getScaleY);
		using derivedType290 = temp_name_find_better::ret290(D<baseAddress290, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress290 = (derivedType290)(&D<baseAddress290, UUID>::getScaleY);
        if (baseAddress290 != derivedAddress290) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getScaleY", Severity::Debug);
            Interface::get()->addHook("CCNode::getScaleY", (void*)temp_name_find_better::address290(), (void*)addresser::getNonVirtual(derivedAddress290));
        }

    	using baseType291 = temp_name_find_better::ret291(CCNode::*)() ;
		constexpr auto baseAddress291 = (baseType291)(&CCNode::getScaledContentSize);
		using derivedType291 = temp_name_find_better::ret291(D<baseAddress291, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress291 = (derivedType291)(&D<baseAddress291, UUID>::getScaledContentSize);
        if (baseAddress291 != derivedAddress291) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getScaledContentSize", Severity::Debug);
            Interface::get()->addHook("CCNode::getScaledContentSize", (void*)temp_name_find_better::address291(), (void*)addresser::getNonVirtual(derivedAddress291));
        }

    	using baseType292 = temp_name_find_better::ret292(CCNode::*)() ;
		constexpr auto baseAddress292 = (baseType292)(&CCNode::getScheduler);
		using derivedType292 = temp_name_find_better::ret292(D<baseAddress292, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress292 = (derivedType292)(&D<baseAddress292, UUID>::getScheduler);
        if (baseAddress292 != derivedAddress292) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getScheduler", Severity::Debug);
            Interface::get()->addHook("CCNode::getScheduler", (void*)temp_name_find_better::address292(), (void*)addresser::getNonVirtual(derivedAddress292));
        }

    	using baseType293 = temp_name_find_better::ret293(CCNode::*)() ;
		constexpr auto baseAddress293 = (baseType293)(&CCNode::getShaderProgram);
		using derivedType293 = temp_name_find_better::ret293(D<baseAddress293, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress293 = (derivedType293)(&D<baseAddress293, UUID>::getShaderProgram);
        if (baseAddress293 != derivedAddress293) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getShaderProgram", Severity::Debug);
            Interface::get()->addHook("CCNode::getShaderProgram", (void*)temp_name_find_better::address293(), (void*)addresser::getNonVirtual(derivedAddress293));
        }

    	using baseType294 = temp_name_find_better::ret294(CCNode::*)() ;
		constexpr auto baseAddress294 = (baseType294)(&CCNode::getSkewX);
		using derivedType294 = temp_name_find_better::ret294(D<baseAddress294, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress294 = (derivedType294)(&D<baseAddress294, UUID>::getSkewX);
        if (baseAddress294 != derivedAddress294) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getSkewX", Severity::Debug);
            Interface::get()->addHook("CCNode::getSkewX", (void*)temp_name_find_better::address294(), (void*)addresser::getNonVirtual(derivedAddress294));
        }

    	using baseType295 = temp_name_find_better::ret295(CCNode::*)() ;
		constexpr auto baseAddress295 = (baseType295)(&CCNode::getSkewY);
		using derivedType295 = temp_name_find_better::ret295(D<baseAddress295, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress295 = (derivedType295)(&D<baseAddress295, UUID>::getSkewY);
        if (baseAddress295 != derivedAddress295) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getSkewY", Severity::Debug);
            Interface::get()->addHook("CCNode::getSkewY", (void*)temp_name_find_better::address295(), (void*)addresser::getNonVirtual(derivedAddress295));
        }

    	using baseType296 = temp_name_find_better::ret296(CCNode::*)() ;
		constexpr auto baseAddress296 = (baseType296)(&CCNode::getUserData);
		using derivedType296 = temp_name_find_better::ret296(D<baseAddress296, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress296 = (derivedType296)(&D<baseAddress296, UUID>::getUserData);
        if (baseAddress296 != derivedAddress296) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getUserData", Severity::Debug);
            Interface::get()->addHook("CCNode::getUserData", (void*)temp_name_find_better::address296(), (void*)addresser::getNonVirtual(derivedAddress296));
        }

    	using baseType297 = temp_name_find_better::ret297(CCNode::*)() ;
		constexpr auto baseAddress297 = (baseType297)(&CCNode::getUserObject);
		using derivedType297 = temp_name_find_better::ret297(D<baseAddress297, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress297 = (derivedType297)(&D<baseAddress297, UUID>::getUserObject);
        if (baseAddress297 != derivedAddress297) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getUserObject", Severity::Debug);
            Interface::get()->addHook("CCNode::getUserObject", (void*)temp_name_find_better::address297(), (void*)addresser::getNonVirtual(derivedAddress297));
        }

    	using baseType298 = temp_name_find_better::ret298(CCNode::*)() ;
		constexpr auto baseAddress298 = (baseType298)(&CCNode::getVertexZ);
		using derivedType298 = temp_name_find_better::ret298(D<baseAddress298, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress298 = (derivedType298)(&D<baseAddress298, UUID>::getVertexZ);
        if (baseAddress298 != derivedAddress298) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getVertexZ", Severity::Debug);
            Interface::get()->addHook("CCNode::getVertexZ", (void*)temp_name_find_better::address298(), (void*)addresser::getNonVirtual(derivedAddress298));
        }

    	using baseType299 = temp_name_find_better::ret299(CCNode::*)() ;
		constexpr auto baseAddress299 = (baseType299)(&CCNode::getZOrder);
		using derivedType299 = temp_name_find_better::ret299(D<baseAddress299, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress299 = (derivedType299)(&D<baseAddress299, UUID>::getZOrder);
        if (baseAddress299 != derivedAddress299) {
        	Interface::get()->logInfo("Adding hook at function CCNode::getZOrder", Severity::Debug);
            Interface::get()->addHook("CCNode::getZOrder", (void*)temp_name_find_better::address299(), (void*)addresser::getNonVirtual(derivedAddress299));
        }

    	using baseType300 = temp_name_find_better::ret300(CCNode::*)(bool) ;
		constexpr auto baseAddress300 = (baseType300)(&CCNode::ignoreAnchorPointForPosition);
		using derivedType300 = temp_name_find_better::ret300(D<baseAddress300, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress300 = (derivedType300)(&D<baseAddress300, UUID>::ignoreAnchorPointForPosition);
        if (baseAddress300 != derivedAddress300) {
        	Interface::get()->logInfo("Adding hook at function CCNode::ignoreAnchorPointForPosition", Severity::Debug);
            Interface::get()->addHook("CCNode::ignoreAnchorPointForPosition", (void*)temp_name_find_better::address300(), (void*)addresser::getNonVirtual(derivedAddress300));
        }

    	using baseType301 = temp_name_find_better::ret301(CCNode::*)() ;
		constexpr auto baseAddress301 = (baseType301)(&CCNode::init);
		using derivedType301 = temp_name_find_better::ret301(D<baseAddress301, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress301 = (derivedType301)(&D<baseAddress301, UUID>::init);
        if (baseAddress301 != derivedAddress301) {
        	Interface::get()->logInfo("Adding hook at function CCNode::init", Severity::Debug);
            Interface::get()->addHook("CCNode::init", (void*)temp_name_find_better::address301(), (void*)addresser::getNonVirtual(derivedAddress301));
        }

    	using baseType302 = temp_name_find_better::ret302(CCNode::*)() ;
		constexpr auto baseAddress302 = (baseType302)(&CCNode::isIgnoreAnchorPointForPosition);
		using derivedType302 = temp_name_find_better::ret302(D<baseAddress302, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress302 = (derivedType302)(&D<baseAddress302, UUID>::isIgnoreAnchorPointForPosition);
        if (baseAddress302 != derivedAddress302) {
        	Interface::get()->logInfo("Adding hook at function CCNode::isIgnoreAnchorPointForPosition", Severity::Debug);
            Interface::get()->addHook("CCNode::isIgnoreAnchorPointForPosition", (void*)temp_name_find_better::address302(), (void*)addresser::getNonVirtual(derivedAddress302));
        }

    	using baseType303 = temp_name_find_better::ret303(CCNode::*)() ;
		constexpr auto baseAddress303 = (baseType303)(&CCNode::isRunning);
		using derivedType303 = temp_name_find_better::ret303(D<baseAddress303, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress303 = (derivedType303)(&D<baseAddress303, UUID>::isRunning);
        if (baseAddress303 != derivedAddress303) {
        	Interface::get()->logInfo("Adding hook at function CCNode::isRunning", Severity::Debug);
            Interface::get()->addHook("CCNode::isRunning", (void*)temp_name_find_better::address303(), (void*)addresser::getNonVirtual(derivedAddress303));
        }

    	using baseType304 = temp_name_find_better::ret304(CCNode::*)() ;
		constexpr auto baseAddress304 = (baseType304)(&CCNode::isVisible);
		using derivedType304 = temp_name_find_better::ret304(D<baseAddress304, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress304 = (derivedType304)(&D<baseAddress304, UUID>::isVisible);
        if (baseAddress304 != derivedAddress304) {
        	Interface::get()->logInfo("Adding hook at function CCNode::isVisible", Severity::Debug);
            Interface::get()->addHook("CCNode::isVisible", (void*)temp_name_find_better::address304(), (void*)addresser::getNonVirtual(derivedAddress304));
        }

    	using baseType305 = temp_name_find_better::ret305(CCNode::*)() ;
		constexpr auto baseAddress305 = (baseType305)(&CCNode::nodeToParentTransform);
		using derivedType305 = temp_name_find_better::ret305(D<baseAddress305, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress305 = (derivedType305)(&D<baseAddress305, UUID>::nodeToParentTransform);
        if (baseAddress305 != derivedAddress305) {
        	Interface::get()->logInfo("Adding hook at function CCNode::nodeToParentTransform", Severity::Debug);
            Interface::get()->addHook("CCNode::nodeToParentTransform", (void*)temp_name_find_better::address305(), (void*)addresser::getNonVirtual(derivedAddress305));
        }

    	using baseType306 = temp_name_find_better::ret306(CCNode::*)() ;
		constexpr auto baseAddress306 = (baseType306)(&CCNode::nodeToWorldTransform);
		using derivedType306 = temp_name_find_better::ret306(D<baseAddress306, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress306 = (derivedType306)(&D<baseAddress306, UUID>::nodeToWorldTransform);
        if (baseAddress306 != derivedAddress306) {
        	Interface::get()->logInfo("Adding hook at function CCNode::nodeToWorldTransform", Severity::Debug);
            Interface::get()->addHook("CCNode::nodeToWorldTransform", (void*)temp_name_find_better::address306(), (void*)addresser::getNonVirtual(derivedAddress306));
        }

    	using baseType307 = temp_name_find_better::ret307(CCNode::*)() ;
		constexpr auto baseAddress307 = (baseType307)(&CCNode::onEnter);
		using derivedType307 = temp_name_find_better::ret307(D<baseAddress307, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress307 = (derivedType307)(&D<baseAddress307, UUID>::onEnter);
        if (baseAddress307 != derivedAddress307) {
        	Interface::get()->logInfo("Adding hook at function CCNode::onEnter", Severity::Debug);
            Interface::get()->addHook("CCNode::onEnter", (void*)temp_name_find_better::address307(), (void*)addresser::getNonVirtual(derivedAddress307));
        }

    	using baseType308 = temp_name_find_better::ret308(CCNode::*)() ;
		constexpr auto baseAddress308 = (baseType308)(&CCNode::onEnterTransitionDidFinish);
		using derivedType308 = temp_name_find_better::ret308(D<baseAddress308, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress308 = (derivedType308)(&D<baseAddress308, UUID>::onEnterTransitionDidFinish);
        if (baseAddress308 != derivedAddress308) {
        	Interface::get()->logInfo("Adding hook at function CCNode::onEnterTransitionDidFinish", Severity::Debug);
            Interface::get()->addHook("CCNode::onEnterTransitionDidFinish", (void*)temp_name_find_better::address308(), (void*)addresser::getNonVirtual(derivedAddress308));
        }

    	using baseType309 = temp_name_find_better::ret309(CCNode::*)() ;
		constexpr auto baseAddress309 = (baseType309)(&CCNode::onExit);
		using derivedType309 = temp_name_find_better::ret309(D<baseAddress309, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress309 = (derivedType309)(&D<baseAddress309, UUID>::onExit);
        if (baseAddress309 != derivedAddress309) {
        	Interface::get()->logInfo("Adding hook at function CCNode::onExit", Severity::Debug);
            Interface::get()->addHook("CCNode::onExit", (void*)temp_name_find_better::address309(), (void*)addresser::getNonVirtual(derivedAddress309));
        }

    	using baseType310 = temp_name_find_better::ret310(CCNode::*)() ;
		constexpr auto baseAddress310 = (baseType310)(&CCNode::onExitTransitionDidStart);
		using derivedType310 = temp_name_find_better::ret310(D<baseAddress310, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress310 = (derivedType310)(&D<baseAddress310, UUID>::onExitTransitionDidStart);
        if (baseAddress310 != derivedAddress310) {
        	Interface::get()->logInfo("Adding hook at function CCNode::onExitTransitionDidStart", Severity::Debug);
            Interface::get()->addHook("CCNode::onExitTransitionDidStart", (void*)temp_name_find_better::address310(), (void*)addresser::getNonVirtual(derivedAddress310));
        }

    	using baseType311 = temp_name_find_better::ret311(CCNode::*)() ;
		constexpr auto baseAddress311 = (baseType311)(&CCNode::parentToNodeTransform);
		using derivedType311 = temp_name_find_better::ret311(D<baseAddress311, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress311 = (derivedType311)(&D<baseAddress311, UUID>::parentToNodeTransform);
        if (baseAddress311 != derivedAddress311) {
        	Interface::get()->logInfo("Adding hook at function CCNode::parentToNodeTransform", Severity::Debug);
            Interface::get()->addHook("CCNode::parentToNodeTransform", (void*)temp_name_find_better::address311(), (void*)addresser::getNonVirtual(derivedAddress311));
        }

    	using baseType312 = temp_name_find_better::ret312(CCNode::*)() ;
		constexpr auto baseAddress312 = (baseType312)(&CCNode::pauseSchedulerAndActions);
		using derivedType312 = temp_name_find_better::ret312(D<baseAddress312, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress312 = (derivedType312)(&D<baseAddress312, UUID>::pauseSchedulerAndActions);
        if (baseAddress312 != derivedAddress312) {
        	Interface::get()->logInfo("Adding hook at function CCNode::pauseSchedulerAndActions", Severity::Debug);
            Interface::get()->addHook("CCNode::pauseSchedulerAndActions", (void*)temp_name_find_better::address312(), (void*)addresser::getNonVirtual(derivedAddress312));
        }

    	using baseType313 = temp_name_find_better::ret313(CCNode::*)(int) ;
		constexpr auto baseAddress313 = (baseType313)(&CCNode::registerScriptHandler);
		using derivedType313 = temp_name_find_better::ret313(D<baseAddress313, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress313 = (derivedType313)(&D<baseAddress313, UUID>::registerScriptHandler);
        if (baseAddress313 != derivedAddress313) {
        	Interface::get()->logInfo("Adding hook at function CCNode::registerScriptHandler", Severity::Debug);
            Interface::get()->addHook("CCNode::registerScriptHandler", (void*)temp_name_find_better::address313(), (void*)addresser::getNonVirtual(derivedAddress313));
        }

    	using baseType314 = temp_name_find_better::ret314(CCNode::*)() ;
		constexpr auto baseAddress314 = (baseType314)(&CCNode::removeAllChildren);
		using derivedType314 = temp_name_find_better::ret314(D<baseAddress314, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress314 = (derivedType314)(&D<baseAddress314, UUID>::removeAllChildren);
        if (baseAddress314 != derivedAddress314) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeAllChildren", Severity::Debug);
            Interface::get()->addHook("CCNode::removeAllChildren", (void*)temp_name_find_better::address314(), (void*)addresser::getNonVirtual(derivedAddress314));
        }

    	using baseType315 = temp_name_find_better::ret315(CCNode::*)(bool) ;
		constexpr auto baseAddress315 = (baseType315)(&CCNode::removeAllChildrenWithCleanup);
		using derivedType315 = temp_name_find_better::ret315(D<baseAddress315, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress315 = (derivedType315)(&D<baseAddress315, UUID>::removeAllChildrenWithCleanup);
        if (baseAddress315 != derivedAddress315) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeAllChildrenWithCleanup", Severity::Debug);
            Interface::get()->addHook("CCNode::removeAllChildrenWithCleanup", (void*)temp_name_find_better::address315(), (void*)addresser::getNonVirtual(derivedAddress315));
        }

    	using baseType316 = temp_name_find_better::ret316(CCNode::*)() ;
		constexpr auto baseAddress316 = (baseType316)(&CCNode::removeAllComponents);
		using derivedType316 = temp_name_find_better::ret316(D<baseAddress316, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress316 = (derivedType316)(&D<baseAddress316, UUID>::removeAllComponents);
        if (baseAddress316 != derivedAddress316) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeAllComponents", Severity::Debug);
            Interface::get()->addHook("CCNode::removeAllComponents", (void*)temp_name_find_better::address316(), (void*)addresser::getNonVirtual(derivedAddress316));
        }

    	using baseType317 = temp_name_find_better::ret317(CCNode::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress317 = (baseType317)(&CCNode::removeChild);
		using derivedType317 = temp_name_find_better::ret317(D<baseAddress317, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress317 = (derivedType317)(&D<baseAddress317, UUID>::removeChild);
        if (baseAddress317 != derivedAddress317) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeChild", Severity::Debug);
            Interface::get()->addHook("CCNode::removeChild", (void*)temp_name_find_better::address317(), (void*)addresser::getNonVirtual(derivedAddress317));
        }

    	using baseType318 = temp_name_find_better::ret318(CCNode::*)(cocos2d::CCNode*, bool) ;
		constexpr auto baseAddress318 = (baseType318)(&CCNode::removeChild);
		using derivedType318 = temp_name_find_better::ret318(D<baseAddress318, UUID>::*)(cocos2d::CCNode*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress318 = (derivedType318)(&D<baseAddress318, UUID>::removeChild);
        if (baseAddress318 != derivedAddress318) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeChild", Severity::Debug);
            Interface::get()->addHook("CCNode::removeChild", (void*)temp_name_find_better::address318(), (void*)addresser::getNonVirtual(derivedAddress318));
        }

    	using baseType319 = temp_name_find_better::ret319(CCNode::*)(int) ;
		constexpr auto baseAddress319 = (baseType319)(&CCNode::removeChildByTag);
		using derivedType319 = temp_name_find_better::ret319(D<baseAddress319, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress319 = (derivedType319)(&D<baseAddress319, UUID>::removeChildByTag);
        if (baseAddress319 != derivedAddress319) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeChildByTag", Severity::Debug);
            Interface::get()->addHook("CCNode::removeChildByTag", (void*)temp_name_find_better::address319(), (void*)addresser::getNonVirtual(derivedAddress319));
        }

    	using baseType320 = temp_name_find_better::ret320(CCNode::*)(int, bool) ;
		constexpr auto baseAddress320 = (baseType320)(&CCNode::removeChildByTag);
		using derivedType320 = temp_name_find_better::ret320(D<baseAddress320, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress320 = (derivedType320)(&D<baseAddress320, UUID>::removeChildByTag);
        if (baseAddress320 != derivedAddress320) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeChildByTag", Severity::Debug);
            Interface::get()->addHook("CCNode::removeChildByTag", (void*)temp_name_find_better::address320(), (void*)addresser::getNonVirtual(derivedAddress320));
        }

    	using baseType321 = temp_name_find_better::ret321(CCNode::*)(char const*) ;
		constexpr auto baseAddress321 = (baseType321)(&CCNode::removeComponent);
		using derivedType321 = temp_name_find_better::ret321(D<baseAddress321, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress321 = (derivedType321)(&D<baseAddress321, UUID>::removeComponent);
        if (baseAddress321 != derivedAddress321) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeComponent", Severity::Debug);
            Interface::get()->addHook("CCNode::removeComponent", (void*)temp_name_find_better::address321(), (void*)addresser::getNonVirtual(derivedAddress321));
        }

    	using baseType322 = temp_name_find_better::ret322(CCNode::*)(cocos2d::CCComponent*) ;
		constexpr auto baseAddress322 = (baseType322)(&CCNode::removeComponent);
		using derivedType322 = temp_name_find_better::ret322(D<baseAddress322, UUID>::*)(cocos2d::CCComponent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress322 = (derivedType322)(&D<baseAddress322, UUID>::removeComponent);
        if (baseAddress322 != derivedAddress322) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeComponent", Severity::Debug);
            Interface::get()->addHook("CCNode::removeComponent", (void*)temp_name_find_better::address322(), (void*)addresser::getNonVirtual(derivedAddress322));
        }

    	using baseType323 = temp_name_find_better::ret323(CCNode::*)() ;
		constexpr auto baseAddress323 = (baseType323)(&CCNode::removeFromParent);
		using derivedType323 = temp_name_find_better::ret323(D<baseAddress323, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress323 = (derivedType323)(&D<baseAddress323, UUID>::removeFromParent);
        if (baseAddress323 != derivedAddress323) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeFromParent", Severity::Debug);
            Interface::get()->addHook("CCNode::removeFromParent", (void*)temp_name_find_better::address323(), (void*)addresser::getNonVirtual(derivedAddress323));
        }

    	using baseType324 = temp_name_find_better::ret324(CCNode::*)(bool) ;
		constexpr auto baseAddress324 = (baseType324)(&CCNode::removeFromParentAndCleanup);
		using derivedType324 = temp_name_find_better::ret324(D<baseAddress324, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress324 = (derivedType324)(&D<baseAddress324, UUID>::removeFromParentAndCleanup);
        if (baseAddress324 != derivedAddress324) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeFromParentAndCleanup", Severity::Debug);
            Interface::get()->addHook("CCNode::removeFromParentAndCleanup", (void*)temp_name_find_better::address324(), (void*)addresser::getNonVirtual(derivedAddress324));
        }

    	using baseType325 = temp_name_find_better::ret325(CCNode::*)() ;
		constexpr auto baseAddress325 = (baseType325)(&CCNode::removeMeAndCleanup);
		using derivedType325 = temp_name_find_better::ret325(D<baseAddress325, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress325 = (derivedType325)(&D<baseAddress325, UUID>::removeMeAndCleanup);
        if (baseAddress325 != derivedAddress325) {
        	Interface::get()->logInfo("Adding hook at function CCNode::removeMeAndCleanup", Severity::Debug);
            Interface::get()->addHook("CCNode::removeMeAndCleanup", (void*)temp_name_find_better::address325(), (void*)addresser::getNonVirtual(derivedAddress325));
        }

    	using baseType326 = temp_name_find_better::ret326(CCNode::*)(cocos2d::CCNode*, int) ;
		constexpr auto baseAddress326 = (baseType326)(&CCNode::reorderChild);
		using derivedType326 = temp_name_find_better::ret326(D<baseAddress326, UUID>::*)(cocos2d::CCNode*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress326 = (derivedType326)(&D<baseAddress326, UUID>::reorderChild);
        if (baseAddress326 != derivedAddress326) {
        	Interface::get()->logInfo("Adding hook at function CCNode::reorderChild", Severity::Debug);
            Interface::get()->addHook("CCNode::reorderChild", (void*)temp_name_find_better::address326(), (void*)addresser::getNonVirtual(derivedAddress326));
        }

    	using baseType327 = temp_name_find_better::ret327(CCNode::*)() ;
		constexpr auto baseAddress327 = (baseType327)(&CCNode::resumeSchedulerAndActions);
		using derivedType327 = temp_name_find_better::ret327(D<baseAddress327, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress327 = (derivedType327)(&D<baseAddress327, UUID>::resumeSchedulerAndActions);
        if (baseAddress327 != derivedAddress327) {
        	Interface::get()->logInfo("Adding hook at function CCNode::resumeSchedulerAndActions", Severity::Debug);
            Interface::get()->addHook("CCNode::resumeSchedulerAndActions", (void*)temp_name_find_better::address327(), (void*)addresser::getNonVirtual(derivedAddress327));
        }

    	using baseType328 = temp_name_find_better::ret328(CCNode::*)(cocos2d::CCAction*) ;
		constexpr auto baseAddress328 = (baseType328)(&CCNode::runAction);
		using derivedType328 = temp_name_find_better::ret328(D<baseAddress328, UUID>::*)(cocos2d::CCAction*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress328 = (derivedType328)(&D<baseAddress328, UUID>::runAction);
        if (baseAddress328 != derivedAddress328) {
        	Interface::get()->logInfo("Adding hook at function CCNode::runAction", Severity::Debug);
            Interface::get()->addHook("CCNode::runAction", (void*)temp_name_find_better::address328(), (void*)addresser::getNonVirtual(derivedAddress328));
        }

    	using baseType329 = temp_name_find_better::ret329(CCNode::*)(cocos2d::SEL_SCHEDULE) ;
		constexpr auto baseAddress329 = (baseType329)(&CCNode::schedule);
		using derivedType329 = temp_name_find_better::ret329(D<baseAddress329, UUID>::*)(cocos2d::SEL_SCHEDULE) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress329 = (derivedType329)(&D<baseAddress329, UUID>::schedule);
        if (baseAddress329 != derivedAddress329) {
        	Interface::get()->logInfo("Adding hook at function CCNode::schedule", Severity::Debug);
            Interface::get()->addHook("CCNode::schedule", (void*)temp_name_find_better::address329(), (void*)addresser::getNonVirtual(derivedAddress329));
        }

    	using baseType330 = temp_name_find_better::ret330(CCNode::*)(cocos2d::SEL_SCHEDULE, float) ;
		constexpr auto baseAddress330 = (baseType330)(&CCNode::schedule);
		using derivedType330 = temp_name_find_better::ret330(D<baseAddress330, UUID>::*)(cocos2d::SEL_SCHEDULE, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress330 = (derivedType330)(&D<baseAddress330, UUID>::schedule);
        if (baseAddress330 != derivedAddress330) {
        	Interface::get()->logInfo("Adding hook at function CCNode::schedule", Severity::Debug);
            Interface::get()->addHook("CCNode::schedule", (void*)temp_name_find_better::address330(), (void*)addresser::getNonVirtual(derivedAddress330));
        }

    	using baseType331 = temp_name_find_better::ret331(CCNode::*)() ;
		constexpr auto baseAddress331 = (baseType331)(&CCNode::scheduleUpdate);
		using derivedType331 = temp_name_find_better::ret331(D<baseAddress331, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress331 = (derivedType331)(&D<baseAddress331, UUID>::scheduleUpdate);
        if (baseAddress331 != derivedAddress331) {
        	Interface::get()->logInfo("Adding hook at function CCNode::scheduleUpdate", Severity::Debug);
            Interface::get()->addHook("CCNode::scheduleUpdate", (void*)temp_name_find_better::address331(), (void*)addresser::getNonVirtual(derivedAddress331));
        }

    	using baseType332 = temp_name_find_better::ret332(CCNode::*)(cocos2d::CCActionManager*) ;
		constexpr auto baseAddress332 = (baseType332)(&CCNode::setActionManager);
		using derivedType332 = temp_name_find_better::ret332(D<baseAddress332, UUID>::*)(cocos2d::CCActionManager*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress332 = (derivedType332)(&D<baseAddress332, UUID>::setActionManager);
        if (baseAddress332 != derivedAddress332) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setActionManager", Severity::Debug);
            Interface::get()->addHook("CCNode::setActionManager", (void*)temp_name_find_better::address332(), (void*)addresser::getNonVirtual(derivedAddress332));
        }

    	using baseType333 = temp_name_find_better::ret333(CCNode::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress333 = (baseType333)(&CCNode::setAnchorPoint);
		using derivedType333 = temp_name_find_better::ret333(D<baseAddress333, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress333 = (derivedType333)(&D<baseAddress333, UUID>::setAnchorPoint);
        if (baseAddress333 != derivedAddress333) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setAnchorPoint", Severity::Debug);
            Interface::get()->addHook("CCNode::setAnchorPoint", (void*)temp_name_find_better::address333(), (void*)addresser::getNonVirtual(derivedAddress333));
        }

    	using baseType334 = temp_name_find_better::ret334(CCNode::*)(cocos2d::CCSize const&) ;
		constexpr auto baseAddress334 = (baseType334)(&CCNode::setContentSize);
		using derivedType334 = temp_name_find_better::ret334(D<baseAddress334, UUID>::*)(cocos2d::CCSize const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress334 = (derivedType334)(&D<baseAddress334, UUID>::setContentSize);
        if (baseAddress334 != derivedAddress334) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setContentSize", Severity::Debug);
            Interface::get()->addHook("CCNode::setContentSize", (void*)temp_name_find_better::address334(), (void*)addresser::getNonVirtual(derivedAddress334));
        }

    	using baseType335 = temp_name_find_better::ret335(CCNode::*)(cocos2d::ccGLServerState) ;
		constexpr auto baseAddress335 = (baseType335)(&CCNode::setGLServerState);
		using derivedType335 = temp_name_find_better::ret335(D<baseAddress335, UUID>::*)(cocos2d::ccGLServerState) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress335 = (derivedType335)(&D<baseAddress335, UUID>::setGLServerState);
        if (baseAddress335 != derivedAddress335) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setGLServerState", Severity::Debug);
            Interface::get()->addHook("CCNode::setGLServerState", (void*)temp_name_find_better::address335(), (void*)addresser::getNonVirtual(derivedAddress335));
        }

    	using baseType336 = temp_name_find_better::ret336(CCNode::*)(cocos2d::CCGridBase*) ;
		constexpr auto baseAddress336 = (baseType336)(&CCNode::setGrid);
		using derivedType336 = temp_name_find_better::ret336(D<baseAddress336, UUID>::*)(cocos2d::CCGridBase*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress336 = (derivedType336)(&D<baseAddress336, UUID>::setGrid);
        if (baseAddress336 != derivedAddress336) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setGrid", Severity::Debug);
            Interface::get()->addHook("CCNode::setGrid", (void*)temp_name_find_better::address336(), (void*)addresser::getNonVirtual(derivedAddress336));
        }

    	using baseType337 = temp_name_find_better::ret337(CCNode::*)(unsigned int) ;
		constexpr auto baseAddress337 = (baseType337)(&CCNode::setOrderOfArrival);
		using derivedType337 = temp_name_find_better::ret337(D<baseAddress337, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress337 = (derivedType337)(&D<baseAddress337, UUID>::setOrderOfArrival);
        if (baseAddress337 != derivedAddress337) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setOrderOfArrival", Severity::Debug);
            Interface::get()->addHook("CCNode::setOrderOfArrival", (void*)temp_name_find_better::address337(), (void*)addresser::getNonVirtual(derivedAddress337));
        }

    	using baseType338 = temp_name_find_better::ret338(CCNode::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress338 = (baseType338)(&CCNode::setParent);
		using derivedType338 = temp_name_find_better::ret338(D<baseAddress338, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress338 = (derivedType338)(&D<baseAddress338, UUID>::setParent);
        if (baseAddress338 != derivedAddress338) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setParent", Severity::Debug);
            Interface::get()->addHook("CCNode::setParent", (void*)temp_name_find_better::address338(), (void*)addresser::getNonVirtual(derivedAddress338));
        }

    	using baseType339 = temp_name_find_better::ret339(CCNode::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress339 = (baseType339)(&CCNode::setPosition);
		using derivedType339 = temp_name_find_better::ret339(D<baseAddress339, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress339 = (derivedType339)(&D<baseAddress339, UUID>::setPosition);
        if (baseAddress339 != derivedAddress339) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setPosition", Severity::Debug);
            Interface::get()->addHook("CCNode::setPosition", (void*)temp_name_find_better::address339(), (void*)addresser::getNonVirtual(derivedAddress339));
        }

    	using baseType340 = temp_name_find_better::ret340(CCNode::*)(float, float) ;
		constexpr auto baseAddress340 = (baseType340)(&CCNode::setPosition);
		using derivedType340 = temp_name_find_better::ret340(D<baseAddress340, UUID>::*)(float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress340 = (derivedType340)(&D<baseAddress340, UUID>::setPosition);
        if (baseAddress340 != derivedAddress340) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setPosition", Severity::Debug);
            Interface::get()->addHook("CCNode::setPosition", (void*)temp_name_find_better::address340(), (void*)addresser::getNonVirtual(derivedAddress340));
        }

    	using baseType341 = temp_name_find_better::ret341(CCNode::*)(float) ;
		constexpr auto baseAddress341 = (baseType341)(&CCNode::setPositionX);
		using derivedType341 = temp_name_find_better::ret341(D<baseAddress341, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress341 = (derivedType341)(&D<baseAddress341, UUID>::setPositionX);
        if (baseAddress341 != derivedAddress341) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setPositionX", Severity::Debug);
            Interface::get()->addHook("CCNode::setPositionX", (void*)temp_name_find_better::address341(), (void*)addresser::getNonVirtual(derivedAddress341));
        }

    	using baseType342 = temp_name_find_better::ret342(CCNode::*)(float) ;
		constexpr auto baseAddress342 = (baseType342)(&CCNode::setPositionY);
		using derivedType342 = temp_name_find_better::ret342(D<baseAddress342, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress342 = (derivedType342)(&D<baseAddress342, UUID>::setPositionY);
        if (baseAddress342 != derivedAddress342) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setPositionY", Severity::Debug);
            Interface::get()->addHook("CCNode::setPositionY", (void*)temp_name_find_better::address342(), (void*)addresser::getNonVirtual(derivedAddress342));
        }

    	using baseType343 = temp_name_find_better::ret343(CCNode::*)(float) ;
		constexpr auto baseAddress343 = (baseType343)(&CCNode::setRotation);
		using derivedType343 = temp_name_find_better::ret343(D<baseAddress343, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress343 = (derivedType343)(&D<baseAddress343, UUID>::setRotation);
        if (baseAddress343 != derivedAddress343) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setRotation", Severity::Debug);
            Interface::get()->addHook("CCNode::setRotation", (void*)temp_name_find_better::address343(), (void*)addresser::getNonVirtual(derivedAddress343));
        }

    	using baseType344 = temp_name_find_better::ret344(CCNode::*)(float) ;
		constexpr auto baseAddress344 = (baseType344)(&CCNode::setRotationX);
		using derivedType344 = temp_name_find_better::ret344(D<baseAddress344, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress344 = (derivedType344)(&D<baseAddress344, UUID>::setRotationX);
        if (baseAddress344 != derivedAddress344) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setRotationX", Severity::Debug);
            Interface::get()->addHook("CCNode::setRotationX", (void*)temp_name_find_better::address344(), (void*)addresser::getNonVirtual(derivedAddress344));
        }

    	using baseType345 = temp_name_find_better::ret345(CCNode::*)(float) ;
		constexpr auto baseAddress345 = (baseType345)(&CCNode::setRotationY);
		using derivedType345 = temp_name_find_better::ret345(D<baseAddress345, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress345 = (derivedType345)(&D<baseAddress345, UUID>::setRotationY);
        if (baseAddress345 != derivedAddress345) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setRotationY", Severity::Debug);
            Interface::get()->addHook("CCNode::setRotationY", (void*)temp_name_find_better::address345(), (void*)addresser::getNonVirtual(derivedAddress345));
        }

    	using baseType346 = temp_name_find_better::ret346(CCNode::*)(float) ;
		constexpr auto baseAddress346 = (baseType346)(&CCNode::setScale);
		using derivedType346 = temp_name_find_better::ret346(D<baseAddress346, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress346 = (derivedType346)(&D<baseAddress346, UUID>::setScale);
        if (baseAddress346 != derivedAddress346) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setScale", Severity::Debug);
            Interface::get()->addHook("CCNode::setScale", (void*)temp_name_find_better::address346(), (void*)addresser::getNonVirtual(derivedAddress346));
        }

    	using baseType347 = temp_name_find_better::ret347(CCNode::*)(float, float) ;
		constexpr auto baseAddress347 = (baseType347)(&CCNode::setScale);
		using derivedType347 = temp_name_find_better::ret347(D<baseAddress347, UUID>::*)(float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress347 = (derivedType347)(&D<baseAddress347, UUID>::setScale);
        if (baseAddress347 != derivedAddress347) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setScale", Severity::Debug);
            Interface::get()->addHook("CCNode::setScale", (void*)temp_name_find_better::address347(), (void*)addresser::getNonVirtual(derivedAddress347));
        }

    	using baseType348 = temp_name_find_better::ret348(CCNode::*)(float) ;
		constexpr auto baseAddress348 = (baseType348)(&CCNode::setScaleX);
		using derivedType348 = temp_name_find_better::ret348(D<baseAddress348, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress348 = (derivedType348)(&D<baseAddress348, UUID>::setScaleX);
        if (baseAddress348 != derivedAddress348) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setScaleX", Severity::Debug);
            Interface::get()->addHook("CCNode::setScaleX", (void*)temp_name_find_better::address348(), (void*)addresser::getNonVirtual(derivedAddress348));
        }

    	using baseType349 = temp_name_find_better::ret349(CCNode::*)(float) ;
		constexpr auto baseAddress349 = (baseType349)(&CCNode::setScaleY);
		using derivedType349 = temp_name_find_better::ret349(D<baseAddress349, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress349 = (derivedType349)(&D<baseAddress349, UUID>::setScaleY);
        if (baseAddress349 != derivedAddress349) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setScaleY", Severity::Debug);
            Interface::get()->addHook("CCNode::setScaleY", (void*)temp_name_find_better::address349(), (void*)addresser::getNonVirtual(derivedAddress349));
        }

    	using baseType350 = temp_name_find_better::ret350(CCNode::*)(cocos2d::CCScheduler*) ;
		constexpr auto baseAddress350 = (baseType350)(&CCNode::setScheduler);
		using derivedType350 = temp_name_find_better::ret350(D<baseAddress350, UUID>::*)(cocos2d::CCScheduler*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress350 = (derivedType350)(&D<baseAddress350, UUID>::setScheduler);
        if (baseAddress350 != derivedAddress350) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setScheduler", Severity::Debug);
            Interface::get()->addHook("CCNode::setScheduler", (void*)temp_name_find_better::address350(), (void*)addresser::getNonVirtual(derivedAddress350));
        }

    	using baseType351 = temp_name_find_better::ret351(CCNode::*)(cocos2d::CCGLProgram*) ;
		constexpr auto baseAddress351 = (baseType351)(&CCNode::setShaderProgram);
		using derivedType351 = temp_name_find_better::ret351(D<baseAddress351, UUID>::*)(cocos2d::CCGLProgram*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress351 = (derivedType351)(&D<baseAddress351, UUID>::setShaderProgram);
        if (baseAddress351 != derivedAddress351) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setShaderProgram", Severity::Debug);
            Interface::get()->addHook("CCNode::setShaderProgram", (void*)temp_name_find_better::address351(), (void*)addresser::getNonVirtual(derivedAddress351));
        }

    	using baseType352 = temp_name_find_better::ret352(CCNode::*)(float) ;
		constexpr auto baseAddress352 = (baseType352)(&CCNode::setSkewX);
		using derivedType352 = temp_name_find_better::ret352(D<baseAddress352, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress352 = (derivedType352)(&D<baseAddress352, UUID>::setSkewX);
        if (baseAddress352 != derivedAddress352) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setSkewX", Severity::Debug);
            Interface::get()->addHook("CCNode::setSkewX", (void*)temp_name_find_better::address352(), (void*)addresser::getNonVirtual(derivedAddress352));
        }

    	using baseType353 = temp_name_find_better::ret353(CCNode::*)(float) ;
		constexpr auto baseAddress353 = (baseType353)(&CCNode::setSkewY);
		using derivedType353 = temp_name_find_better::ret353(D<baseAddress353, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress353 = (derivedType353)(&D<baseAddress353, UUID>::setSkewY);
        if (baseAddress353 != derivedAddress353) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setSkewY", Severity::Debug);
            Interface::get()->addHook("CCNode::setSkewY", (void*)temp_name_find_better::address353(), (void*)addresser::getNonVirtual(derivedAddress353));
        }

    	using baseType354 = temp_name_find_better::ret354(CCNode::*)(void*) ;
		constexpr auto baseAddress354 = (baseType354)(&CCNode::setUserData);
		using derivedType354 = temp_name_find_better::ret354(D<baseAddress354, UUID>::*)(void*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress354 = (derivedType354)(&D<baseAddress354, UUID>::setUserData);
        if (baseAddress354 != derivedAddress354) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setUserData", Severity::Debug);
            Interface::get()->addHook("CCNode::setUserData", (void*)temp_name_find_better::address354(), (void*)addresser::getNonVirtual(derivedAddress354));
        }

    	using baseType355 = temp_name_find_better::ret355(CCNode::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress355 = (baseType355)(&CCNode::setUserObject);
		using derivedType355 = temp_name_find_better::ret355(D<baseAddress355, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress355 = (derivedType355)(&D<baseAddress355, UUID>::setUserObject);
        if (baseAddress355 != derivedAddress355) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setUserObject", Severity::Debug);
            Interface::get()->addHook("CCNode::setUserObject", (void*)temp_name_find_better::address355(), (void*)addresser::getNonVirtual(derivedAddress355));
        }

    	using baseType356 = temp_name_find_better::ret356(CCNode::*)(float) ;
		constexpr auto baseAddress356 = (baseType356)(&CCNode::setVertexZ);
		using derivedType356 = temp_name_find_better::ret356(D<baseAddress356, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress356 = (derivedType356)(&D<baseAddress356, UUID>::setVertexZ);
        if (baseAddress356 != derivedAddress356) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setVertexZ", Severity::Debug);
            Interface::get()->addHook("CCNode::setVertexZ", (void*)temp_name_find_better::address356(), (void*)addresser::getNonVirtual(derivedAddress356));
        }

    	using baseType357 = temp_name_find_better::ret357(CCNode::*)(bool) ;
		constexpr auto baseAddress357 = (baseType357)(&CCNode::setVisible);
		using derivedType357 = temp_name_find_better::ret357(D<baseAddress357, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress357 = (derivedType357)(&D<baseAddress357, UUID>::setVisible);
        if (baseAddress357 != derivedAddress357) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setVisible", Severity::Debug);
            Interface::get()->addHook("CCNode::setVisible", (void*)temp_name_find_better::address357(), (void*)addresser::getNonVirtual(derivedAddress357));
        }

    	using baseType358 = temp_name_find_better::ret358(CCNode::*)(int) ;
		constexpr auto baseAddress358 = (baseType358)(&CCNode::setZOrder);
		using derivedType358 = temp_name_find_better::ret358(D<baseAddress358, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress358 = (derivedType358)(&D<baseAddress358, UUID>::setZOrder);
        if (baseAddress358 != derivedAddress358) {
        	Interface::get()->logInfo("Adding hook at function CCNode::setZOrder", Severity::Debug);
            Interface::get()->addHook("CCNode::setZOrder", (void*)temp_name_find_better::address358(), (void*)addresser::getNonVirtual(derivedAddress358));
        }

    	using baseType359 = temp_name_find_better::ret359(CCNode::*)() ;
		constexpr auto baseAddress359 = (baseType359)(&CCNode::sortAllChildren);
		using derivedType359 = temp_name_find_better::ret359(D<baseAddress359, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress359 = (derivedType359)(&D<baseAddress359, UUID>::sortAllChildren);
        if (baseAddress359 != derivedAddress359) {
        	Interface::get()->logInfo("Adding hook at function CCNode::sortAllChildren", Severity::Debug);
            Interface::get()->addHook("CCNode::sortAllChildren", (void*)temp_name_find_better::address359(), (void*)addresser::getNonVirtual(derivedAddress359));
        }

    	using baseType360 = temp_name_find_better::ret360(CCNode::*)(int) ;
		constexpr auto baseAddress360 = (baseType360)(&CCNode::stopActionByTag);
		using derivedType360 = temp_name_find_better::ret360(D<baseAddress360, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress360 = (derivedType360)(&D<baseAddress360, UUID>::stopActionByTag);
        if (baseAddress360 != derivedAddress360) {
        	Interface::get()->logInfo("Adding hook at function CCNode::stopActionByTag", Severity::Debug);
            Interface::get()->addHook("CCNode::stopActionByTag", (void*)temp_name_find_better::address360(), (void*)addresser::getNonVirtual(derivedAddress360));
        }

    	using baseType361 = temp_name_find_better::ret361(CCNode::*)() ;
		constexpr auto baseAddress361 = (baseType361)(&CCNode::stopAllActions);
		using derivedType361 = temp_name_find_better::ret361(D<baseAddress361, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress361 = (derivedType361)(&D<baseAddress361, UUID>::stopAllActions);
        if (baseAddress361 != derivedAddress361) {
        	Interface::get()->logInfo("Adding hook at function CCNode::stopAllActions", Severity::Debug);
            Interface::get()->addHook("CCNode::stopAllActions", (void*)temp_name_find_better::address361(), (void*)addresser::getNonVirtual(derivedAddress361));
        }

    	using baseType362 = temp_name_find_better::ret362(CCNode::*)() ;
		constexpr auto baseAddress362 = (baseType362)(&CCNode::unregisterScriptHandler);
		using derivedType362 = temp_name_find_better::ret362(D<baseAddress362, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress362 = (derivedType362)(&D<baseAddress362, UUID>::unregisterScriptHandler);
        if (baseAddress362 != derivedAddress362) {
        	Interface::get()->logInfo("Adding hook at function CCNode::unregisterScriptHandler", Severity::Debug);
            Interface::get()->addHook("CCNode::unregisterScriptHandler", (void*)temp_name_find_better::address362(), (void*)addresser::getNonVirtual(derivedAddress362));
        }

    	using baseType363 = temp_name_find_better::ret363(CCNode::*)(cocos2d::SEL_SCHEDULE) ;
		constexpr auto baseAddress363 = (baseType363)(&CCNode::unschedule);
		using derivedType363 = temp_name_find_better::ret363(D<baseAddress363, UUID>::*)(cocos2d::SEL_SCHEDULE) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress363 = (derivedType363)(&D<baseAddress363, UUID>::unschedule);
        if (baseAddress363 != derivedAddress363) {
        	Interface::get()->logInfo("Adding hook at function CCNode::unschedule", Severity::Debug);
            Interface::get()->addHook("CCNode::unschedule", (void*)temp_name_find_better::address363(), (void*)addresser::getNonVirtual(derivedAddress363));
        }

    	using baseType364 = temp_name_find_better::ret364(CCNode::*)() ;
		constexpr auto baseAddress364 = (baseType364)(&CCNode::unscheduleAllSelectors);
		using derivedType364 = temp_name_find_better::ret364(D<baseAddress364, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress364 = (derivedType364)(&D<baseAddress364, UUID>::unscheduleAllSelectors);
        if (baseAddress364 != derivedAddress364) {
        	Interface::get()->logInfo("Adding hook at function CCNode::unscheduleAllSelectors", Severity::Debug);
            Interface::get()->addHook("CCNode::unscheduleAllSelectors", (void*)temp_name_find_better::address364(), (void*)addresser::getNonVirtual(derivedAddress364));
        }

    	using baseType365 = temp_name_find_better::ret365(CCNode::*)() ;
		constexpr auto baseAddress365 = (baseType365)(&CCNode::unscheduleUpdate);
		using derivedType365 = temp_name_find_better::ret365(D<baseAddress365, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress365 = (derivedType365)(&D<baseAddress365, UUID>::unscheduleUpdate);
        if (baseAddress365 != derivedAddress365) {
        	Interface::get()->logInfo("Adding hook at function CCNode::unscheduleUpdate", Severity::Debug);
            Interface::get()->addHook("CCNode::unscheduleUpdate", (void*)temp_name_find_better::address365(), (void*)addresser::getNonVirtual(derivedAddress365));
        }

    	using baseType366 = temp_name_find_better::ret366(CCNode::*)(float) ;
		constexpr auto baseAddress366 = (baseType366)(&CCNode::update);
		using derivedType366 = temp_name_find_better::ret366(D<baseAddress366, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress366 = (derivedType366)(&D<baseAddress366, UUID>::update);
        if (baseAddress366 != derivedAddress366) {
        	Interface::get()->logInfo("Adding hook at function CCNode::update", Severity::Debug);
            Interface::get()->addHook("CCNode::update", (void*)temp_name_find_better::address366(), (void*)addresser::getNonVirtual(derivedAddress366));
        }

    	using baseType367 = temp_name_find_better::ret367(CCNode::*)() ;
		constexpr auto baseAddress367 = (baseType367)(&CCNode::updateTransform);
		using derivedType367 = temp_name_find_better::ret367(D<baseAddress367, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress367 = (derivedType367)(&D<baseAddress367, UUID>::updateTransform);
        if (baseAddress367 != derivedAddress367) {
        	Interface::get()->logInfo("Adding hook at function CCNode::updateTransform", Severity::Debug);
            Interface::get()->addHook("CCNode::updateTransform", (void*)temp_name_find_better::address367(), (void*)addresser::getNonVirtual(derivedAddress367));
        }

    	using baseType368 = temp_name_find_better::ret368(CCNode::*)(float, char const*) ;
		constexpr auto baseAddress368 = (baseType368)(&CCNode::updateTweenAction);
		using derivedType368 = temp_name_find_better::ret368(D<baseAddress368, UUID>::*)(float, char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress368 = (derivedType368)(&D<baseAddress368, UUID>::updateTweenAction);
        if (baseAddress368 != derivedAddress368) {
        	Interface::get()->logInfo("Adding hook at function CCNode::updateTweenAction", Severity::Debug);
            Interface::get()->addHook("CCNode::updateTweenAction", (void*)temp_name_find_better::address368(), (void*)addresser::getNonVirtual(derivedAddress368));
        }

    	using baseType369 = temp_name_find_better::ret369(CCNode::*)() ;
		constexpr auto baseAddress369 = (baseType369)(&CCNode::visit);
		using derivedType369 = temp_name_find_better::ret369(D<baseAddress369, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress369 = (derivedType369)(&D<baseAddress369, UUID>::visit);
        if (baseAddress369 != derivedAddress369) {
        	Interface::get()->logInfo("Adding hook at function CCNode::visit", Severity::Debug);
            Interface::get()->addHook("CCNode::visit", (void*)temp_name_find_better::address369(), (void*)addresser::getNonVirtual(derivedAddress369));
        }

    	using baseType370 = temp_name_find_better::ret370(CCNode::*)() ;
		constexpr auto baseAddress370 = (baseType370)(&CCNode::worldToNodeTransform);
		using derivedType370 = temp_name_find_better::ret370(D<baseAddress370, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress370 = (derivedType370)(&D<baseAddress370, UUID>::worldToNodeTransform);
        if (baseAddress370 != derivedAddress370) {
        	Interface::get()->logInfo("Adding hook at function CCNode::worldToNodeTransform", Severity::Debug);
            Interface::get()->addHook("CCNode::worldToNodeTransform", (void*)temp_name_find_better::address370(), (void*)addresser::getNonVirtual(derivedAddress370));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCRenderTexture : cocos2d::CCRenderTexture, ModifierBase {
    $CCRenderTexture(const $CCRenderTexture& c) : CCRenderTexture(c) {}
    $CCRenderTexture() : $CCRenderTexture(*this) {}
    ~$CCRenderTexture() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCRenderTexture);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType404 = temp_name_find_better::ret404(CCRenderTexture::*)() ;
		constexpr auto baseAddress404 = (baseType404)(&CCRenderTexture::begin);
		using derivedType404 = temp_name_find_better::ret404(D<baseAddress404, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress404 = (derivedType404)(&D<baseAddress404, UUID>::begin);
        if (baseAddress404 != derivedAddress404) {
        	Interface::get()->logInfo("Adding hook at function CCRenderTexture::begin", Severity::Debug);
            Interface::get()->addHook("CCRenderTexture::begin", (void*)temp_name_find_better::address404(), (void*)addresser::getNonVirtual(derivedAddress404));
        }

    	using baseType405 = temp_name_find_better::ret405(CCRenderTexture::*)() ;
		constexpr auto baseAddress405 = (baseType405)(&CCRenderTexture::end);
		using derivedType405 = temp_name_find_better::ret405(D<baseAddress405, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress405 = (derivedType405)(&D<baseAddress405, UUID>::end);
        if (baseAddress405 != derivedAddress405) {
        	Interface::get()->logInfo("Adding hook at function CCRenderTexture::end", Severity::Debug);
            Interface::get()->addHook("CCRenderTexture::end", (void*)temp_name_find_better::address405(), (void*)addresser::getNonVirtual(derivedAddress405));
        }

		using baseType406 = temp_name_find_better::ret406(*)(int, int, cocos2d::CCTexture2DPixelFormat);
		constexpr auto baseAddress406 = (baseType406)(&CCRenderTexture::create);
		using derivedType406 = temp_name_find_better::ret406(*)(int, int, cocos2d::CCTexture2DPixelFormat);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress406 = (derivedType406)(&D<baseAddress406, UUID>::create);
        if (baseAddress406 != derivedAddress406) {
        	Interface::get()->logInfo("Adding hook at function CCRenderTexture::create", Severity::Debug);
            Interface::get()->addHook("CCRenderTexture::create", (void*)temp_name_find_better::address406(), (void*)addresser::getNonVirtual(derivedAddress406));
        }

    	using baseType407 = temp_name_find_better::ret407(CCRenderTexture::*)(bool) ;
		constexpr auto baseAddress407 = (baseType407)(&CCRenderTexture::newCCImage);
		using derivedType407 = temp_name_find_better::ret407(D<baseAddress407, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress407 = (derivedType407)(&D<baseAddress407, UUID>::newCCImage);
        if (baseAddress407 != derivedAddress407) {
        	Interface::get()->logInfo("Adding hook at function CCRenderTexture::newCCImage", Severity::Debug);
            Interface::get()->addHook("CCRenderTexture::newCCImage", (void*)temp_name_find_better::address407(), (void*)addresser::getNonVirtual(derivedAddress407));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCObject : cocos2d::CCObject, ModifierBase {
    $CCObject(const $CCObject& c) : CCObject(c) {}
    $CCObject() : $CCObject(*this) {}
    ~$CCObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType388 = temp_name_find_better::ret388(CCObject::*)(cocos2d::CCDataVisitor&) ;
		constexpr auto baseAddress388 = (baseType388)(&CCObject::acceptVisitor);
		using derivedType388 = temp_name_find_better::ret388(D<baseAddress388, UUID>::*)(cocos2d::CCDataVisitor&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress388 = (derivedType388)(&D<baseAddress388, UUID>::acceptVisitor);
        if (baseAddress388 != derivedAddress388) {
        	Interface::get()->logInfo("Adding hook at function CCObject::acceptVisitor", Severity::Debug);
            Interface::get()->addHook("CCObject::acceptVisitor", (void*)temp_name_find_better::address388(), (void*)addresser::getNonVirtual(derivedAddress388));
        }

    	using baseType389 = temp_name_find_better::ret389(CCObject::*)() ;
		constexpr auto baseAddress389 = (baseType389)(&CCObject::autorelease);
		using derivedType389 = temp_name_find_better::ret389(D<baseAddress389, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress389 = (derivedType389)(&D<baseAddress389, UUID>::autorelease);
        if (baseAddress389 != derivedAddress389) {
        	Interface::get()->logInfo("Adding hook at function CCObject::autorelease", Severity::Debug);
            Interface::get()->addHook("CCObject::autorelease", (void*)temp_name_find_better::address389(), (void*)addresser::getNonVirtual(derivedAddress389));
        }

    	using baseType390 = temp_name_find_better::ret390(CCObject::*)() ;
		constexpr auto baseAddress390 = (baseType390)(&CCObject::canEncode);
		using derivedType390 = temp_name_find_better::ret390(D<baseAddress390, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress390 = (derivedType390)(&D<baseAddress390, UUID>::canEncode);
        if (baseAddress390 != derivedAddress390) {
        	Interface::get()->logInfo("Adding hook at function CCObject::canEncode", Severity::Debug);
            Interface::get()->addHook("CCObject::canEncode", (void*)temp_name_find_better::address390(), (void*)addresser::getNonVirtual(derivedAddress390));
        }

    	using baseType391 = temp_name_find_better::ret391(CCObject::*)(DS_Dictionary*) ;
		constexpr auto baseAddress391 = (baseType391)(&CCObject::encodeWithCoder);
		using derivedType391 = temp_name_find_better::ret391(D<baseAddress391, UUID>::*)(DS_Dictionary*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress391 = (derivedType391)(&D<baseAddress391, UUID>::encodeWithCoder);
        if (baseAddress391 != derivedAddress391) {
        	Interface::get()->logInfo("Adding hook at function CCObject::encodeWithCoder", Severity::Debug);
            Interface::get()->addHook("CCObject::encodeWithCoder", (void*)temp_name_find_better::address391(), (void*)addresser::getNonVirtual(derivedAddress391));
        }

    	using baseType392 = temp_name_find_better::ret392(CCObject::*)() const ;
		constexpr auto baseAddress392 = (baseType392)(&CCObject::getTag);
		using derivedType392 = temp_name_find_better::ret392(D<baseAddress392, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress392 = (derivedType392)(&D<baseAddress392, UUID>::getTag);
        if (baseAddress392 != derivedAddress392) {
        	Interface::get()->logInfo("Adding hook at function CCObject::getTag", Severity::Debug);
            Interface::get()->addHook("CCObject::getTag", (void*)temp_name_find_better::address392(), (void*)addresser::getVirtual(derivedAddress392));
        }

    	using baseType393 = temp_name_find_better::ret393(CCObject::*)(cocos2d::CCObject const*) ;
		constexpr auto baseAddress393 = (baseType393)(&CCObject::isEqual);
		using derivedType393 = temp_name_find_better::ret393(D<baseAddress393, UUID>::*)(cocos2d::CCObject const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress393 = (derivedType393)(&D<baseAddress393, UUID>::isEqual);
        if (baseAddress393 != derivedAddress393) {
        	Interface::get()->logInfo("Adding hook at function CCObject::isEqual", Severity::Debug);
            Interface::get()->addHook("CCObject::isEqual", (void*)temp_name_find_better::address393(), (void*)addresser::getNonVirtual(derivedAddress393));
        }

    	using baseType394 = temp_name_find_better::ret394(CCObject::*)() ;
		constexpr auto baseAddress394 = (baseType394)(&CCObject::release);
		using derivedType394 = temp_name_find_better::ret394(D<baseAddress394, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress394 = (derivedType394)(&D<baseAddress394, UUID>::release);
        if (baseAddress394 != derivedAddress394) {
        	Interface::get()->logInfo("Adding hook at function CCObject::release", Severity::Debug);
            Interface::get()->addHook("CCObject::release", (void*)temp_name_find_better::address394(), (void*)addresser::getNonVirtual(derivedAddress394));
        }

    	using baseType395 = temp_name_find_better::ret395(CCObject::*)() ;
		constexpr auto baseAddress395 = (baseType395)(&CCObject::retain);
		using derivedType395 = temp_name_find_better::ret395(D<baseAddress395, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress395 = (derivedType395)(&D<baseAddress395, UUID>::retain);
        if (baseAddress395 != derivedAddress395) {
        	Interface::get()->logInfo("Adding hook at function CCObject::retain", Severity::Debug);
            Interface::get()->addHook("CCObject::retain", (void*)temp_name_find_better::address395(), (void*)addresser::getNonVirtual(derivedAddress395));
        }

    	using baseType396 = temp_name_find_better::ret396(CCObject::*)(int) ;
		constexpr auto baseAddress396 = (baseType396)(&CCObject::setTag);
		using derivedType396 = temp_name_find_better::ret396(D<baseAddress396, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress396 = (derivedType396)(&D<baseAddress396, UUID>::setTag);
        if (baseAddress396 != derivedAddress396) {
        	Interface::get()->logInfo("Adding hook at function CCObject::setTag", Severity::Debug);
            Interface::get()->addHook("CCObject::setTag", (void*)temp_name_find_better::address396(), (void*)addresser::getVirtual(derivedAddress396));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCParticleSystemQuad : cocos2d::CCParticleSystemQuad, ModifierBase {
    $CCParticleSystemQuad(const $CCParticleSystemQuad& c) : CCParticleSystemQuad(c) {}
    $CCParticleSystemQuad() : $CCParticleSystemQuad(*this) {}
    ~$CCParticleSystemQuad() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCParticleSystemQuad);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType401 = temp_name_find_better::ret401(*)(char const*);
		constexpr auto baseAddress401 = (baseType401)(&CCParticleSystemQuad::create);
		using derivedType401 = temp_name_find_better::ret401(*)(char const*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress401 = (derivedType401)(&D<baseAddress401, UUID>::create);
        if (baseAddress401 != derivedAddress401) {
        	Interface::get()->logInfo("Adding hook at function CCParticleSystemQuad::create", Severity::Debug);
            Interface::get()->addHook("CCParticleSystemQuad::create", (void*)temp_name_find_better::address401(), (void*)addresser::getNonVirtual(derivedAddress401));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScaleTo : cocos2d::CCScaleTo, ModifierBase {
    $CCScaleTo(const $CCScaleTo& c) : CCScaleTo(c) {}
    $CCScaleTo() : $CCScaleTo(*this) {}
    ~$CCScaleTo() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScaleTo);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType410 = temp_name_find_better::ret410(*)(float, float);
		constexpr auto baseAddress410 = (baseType410)(&CCScaleTo::create);
		using derivedType410 = temp_name_find_better::ret410(*)(float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress410 = (derivedType410)(&D<baseAddress410, UUID>::create);
        if (baseAddress410 != derivedAddress410) {
        	Interface::get()->logInfo("Adding hook at function CCScaleTo::create", Severity::Debug);
            Interface::get()->addHook("CCScaleTo::create", (void*)temp_name_find_better::address410(), (void*)addresser::getNonVirtual(derivedAddress410));
        }

		using baseType411 = temp_name_find_better::ret411(*)(float, float, float);
		constexpr auto baseAddress411 = (baseType411)(&CCScaleTo::create);
		using derivedType411 = temp_name_find_better::ret411(*)(float, float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress411 = (derivedType411)(&D<baseAddress411, UUID>::create);
        if (baseAddress411 != derivedAddress411) {
        	Interface::get()->logInfo("Adding hook at function CCScaleTo::create", Severity::Debug);
            Interface::get()->addHook("CCScaleTo::create", (void*)temp_name_find_better::address411(), (void*)addresser::getNonVirtual(derivedAddress411));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScene : cocos2d::CCScene, ModifierBase {
    $CCScene(const $CCScene& c) : CCScene(c) {}
    $CCScene() : $CCScene(*this) {}
    ~$CCScene() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScene);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType412 = temp_name_find_better::ret412(*)();
		constexpr auto baseAddress412 = (baseType412)(&CCScene::create);
		using derivedType412 = temp_name_find_better::ret412(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress412 = (derivedType412)(&D<baseAddress412, UUID>::create);
        if (baseAddress412 != derivedAddress412) {
        	Interface::get()->logInfo("Adding hook at function CCScene::create", Severity::Debug);
            Interface::get()->addHook("CCScene::create", (void*)temp_name_find_better::address412(), (void*)addresser::getNonVirtual(derivedAddress412));
        }

    	using baseType413 = temp_name_find_better::ret413(CCScene::*)() ;
		constexpr auto baseAddress413 = (baseType413)(&CCScene::getHighestChildZ);
		using derivedType413 = temp_name_find_better::ret413(D<baseAddress413, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress413 = (derivedType413)(&D<baseAddress413, UUID>::getHighestChildZ);
        if (baseAddress413 != derivedAddress413) {
        	Interface::get()->logInfo("Adding hook at function CCScene::getHighestChildZ", Severity::Debug);
            Interface::get()->addHook("CCScene::getHighestChildZ", (void*)temp_name_find_better::address413(), (void*)addresser::getNonVirtual(derivedAddress413));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScheduler : cocos2d::CCScheduler, ModifierBase {
    $CCScheduler(const $CCScheduler& c) : CCScheduler(c) {}
    $CCScheduler() : $CCScheduler(*this) {}
    ~$CCScheduler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScheduler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType414 = temp_name_find_better::ret414(CCScheduler::*)(cocos2d::SEL_SCHEDULE, cocos2d::CCObject*, float, unsigned int, float, bool) ;
		constexpr auto baseAddress414 = (baseType414)(&CCScheduler::scheduleSelector);
		using derivedType414 = temp_name_find_better::ret414(D<baseAddress414, UUID>::*)(cocos2d::SEL_SCHEDULE, cocos2d::CCObject*, float, unsigned int, float, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress414 = (derivedType414)(&D<baseAddress414, UUID>::scheduleSelector);
        if (baseAddress414 != derivedAddress414) {
        	Interface::get()->logInfo("Adding hook at function CCScheduler::scheduleSelector", Severity::Debug);
            Interface::get()->addHook("CCScheduler::scheduleSelector", (void*)temp_name_find_better::address414(), (void*)addresser::getNonVirtual(derivedAddress414));
        }

    	using baseType415 = temp_name_find_better::ret415(CCScheduler::*)(cocos2d::CCObject*, int, bool) ;
		constexpr auto baseAddress415 = (baseType415)(&CCScheduler::scheduleUpdateForTarget);
		using derivedType415 = temp_name_find_better::ret415(D<baseAddress415, UUID>::*)(cocos2d::CCObject*, int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress415 = (derivedType415)(&D<baseAddress415, UUID>::scheduleUpdateForTarget);
        if (baseAddress415 != derivedAddress415) {
        	Interface::get()->logInfo("Adding hook at function CCScheduler::scheduleUpdateForTarget", Severity::Debug);
            Interface::get()->addHook("CCScheduler::scheduleUpdateForTarget", (void*)temp_name_find_better::address415(), (void*)addresser::getNonVirtual(derivedAddress415));
        }

    	using baseType416 = temp_name_find_better::ret416(CCScheduler::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress416 = (baseType416)(&CCScheduler::unscheduleAllForTarget);
		using derivedType416 = temp_name_find_better::ret416(D<baseAddress416, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress416 = (derivedType416)(&D<baseAddress416, UUID>::unscheduleAllForTarget);
        if (baseAddress416 != derivedAddress416) {
        	Interface::get()->logInfo("Adding hook at function CCScheduler::unscheduleAllForTarget", Severity::Debug);
            Interface::get()->addHook("CCScheduler::unscheduleAllForTarget", (void*)temp_name_find_better::address416(), (void*)addresser::getNonVirtual(derivedAddress416));
        }

    	using baseType417 = temp_name_find_better::ret417(CCScheduler::*)(float) ;
		constexpr auto baseAddress417 = (baseType417)(&CCScheduler::update);
		using derivedType417 = temp_name_find_better::ret417(D<baseAddress417, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress417 = (derivedType417)(&D<baseAddress417, UUID>::update);
        if (baseAddress417 != derivedAddress417) {
        	Interface::get()->logInfo("Adding hook at function CCScheduler::update", Severity::Debug);
            Interface::get()->addHook("CCScheduler::update", (void*)temp_name_find_better::address417(), (void*)addresser::getNonVirtual(derivedAddress417));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSequence : cocos2d::CCSequence, ModifierBase {
    $CCSequence(const $CCSequence& c) : CCSequence(c) {}
    $CCSequence() : $CCSequence(*this) {}
    ~$CCSequence() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSequence);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSprite : cocos2d::CCSprite, ModifierBase {
    $CCSprite(const $CCSprite& c) : CCSprite(c) {}
    $CCSprite() : $CCSprite(*this) {}
    ~$CCSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType422 = temp_name_find_better::ret422(CCSprite::*)() ;
		constexpr auto baseAddress422 = (baseType422)(&CCSprite::init);
		using derivedType422 = temp_name_find_better::ret422(D<baseAddress422, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress422 = (derivedType422)(&D<baseAddress422, UUID>::init);
        if (baseAddress422 != derivedAddress422) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::init", Severity::Debug);
            Interface::get()->addHook("CCSprite::init", (void*)temp_name_find_better::address422(), (void*)addresser::getVirtual(derivedAddress422));
        }

    	using baseType423 = temp_name_find_better::ret423(CCSprite::*)(float) ;
		constexpr auto baseAddress423 = (baseType423)(&CCSprite::setVertexZ);
		using derivedType423 = temp_name_find_better::ret423(D<baseAddress423, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress423 = (derivedType423)(&D<baseAddress423, UUID>::setVertexZ);
        if (baseAddress423 != derivedAddress423) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setVertexZ", Severity::Debug);
            Interface::get()->addHook("CCSprite::setVertexZ", (void*)temp_name_find_better::address423(), (void*)addresser::getVirtual(derivedAddress423));
        }

    	using baseType424 = temp_name_find_better::ret424(CCSprite::*)(float) ;
		constexpr auto baseAddress424 = (baseType424)(&CCSprite::setScaleX);
		using derivedType424 = temp_name_find_better::ret424(D<baseAddress424, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress424 = (derivedType424)(&D<baseAddress424, UUID>::setScaleX);
        if (baseAddress424 != derivedAddress424) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setScaleX", Severity::Debug);
            Interface::get()->addHook("CCSprite::setScaleX", (void*)temp_name_find_better::address424(), (void*)addresser::getVirtual(derivedAddress424));
        }

    	using baseType425 = temp_name_find_better::ret425(CCSprite::*)(float) ;
		constexpr auto baseAddress425 = (baseType425)(&CCSprite::setScaleY);
		using derivedType425 = temp_name_find_better::ret425(D<baseAddress425, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress425 = (derivedType425)(&D<baseAddress425, UUID>::setScaleY);
        if (baseAddress425 != derivedAddress425) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setScaleY", Severity::Debug);
            Interface::get()->addHook("CCSprite::setScaleY", (void*)temp_name_find_better::address425(), (void*)addresser::getVirtual(derivedAddress425));
        }

    	using baseType426 = temp_name_find_better::ret426(CCSprite::*)(float) ;
		constexpr auto baseAddress426 = (baseType426)(&CCSprite::setScale);
		using derivedType426 = temp_name_find_better::ret426(D<baseAddress426, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress426 = (derivedType426)(&D<baseAddress426, UUID>::setScale);
        if (baseAddress426 != derivedAddress426) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setScale", Severity::Debug);
            Interface::get()->addHook("CCSprite::setScale", (void*)temp_name_find_better::address426(), (void*)addresser::getVirtual(derivedAddress426));
        }

    	using baseType427 = temp_name_find_better::ret427(CCSprite::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress427 = (baseType427)(&CCSprite::setPosition);
		using derivedType427 = temp_name_find_better::ret427(D<baseAddress427, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress427 = (derivedType427)(&D<baseAddress427, UUID>::setPosition);
        if (baseAddress427 != derivedAddress427) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setPosition", Severity::Debug);
            Interface::get()->addHook("CCSprite::setPosition", (void*)temp_name_find_better::address427(), (void*)addresser::getVirtual(derivedAddress427));
        }

    	using baseType428 = temp_name_find_better::ret428(CCSprite::*)(float) ;
		constexpr auto baseAddress428 = (baseType428)(&CCSprite::setSkewX);
		using derivedType428 = temp_name_find_better::ret428(D<baseAddress428, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress428 = (derivedType428)(&D<baseAddress428, UUID>::setSkewX);
        if (baseAddress428 != derivedAddress428) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setSkewX", Severity::Debug);
            Interface::get()->addHook("CCSprite::setSkewX", (void*)temp_name_find_better::address428(), (void*)addresser::getVirtual(derivedAddress428));
        }

    	using baseType429 = temp_name_find_better::ret429(CCSprite::*)(float) ;
		constexpr auto baseAddress429 = (baseType429)(&CCSprite::setSkewY);
		using derivedType429 = temp_name_find_better::ret429(D<baseAddress429, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress429 = (derivedType429)(&D<baseAddress429, UUID>::setSkewY);
        if (baseAddress429 != derivedAddress429) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setSkewY", Severity::Debug);
            Interface::get()->addHook("CCSprite::setSkewY", (void*)temp_name_find_better::address429(), (void*)addresser::getVirtual(derivedAddress429));
        }

    	using baseType430 = temp_name_find_better::ret430(CCSprite::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress430 = (baseType430)(&CCSprite::setAnchorPoint);
		using derivedType430 = temp_name_find_better::ret430(D<baseAddress430, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress430 = (derivedType430)(&D<baseAddress430, UUID>::setAnchorPoint);
        if (baseAddress430 != derivedAddress430) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setAnchorPoint", Severity::Debug);
            Interface::get()->addHook("CCSprite::setAnchorPoint", (void*)temp_name_find_better::address430(), (void*)addresser::getVirtual(derivedAddress430));
        }

    	using baseType431 = temp_name_find_better::ret431(CCSprite::*)(bool) ;
		constexpr auto baseAddress431 = (baseType431)(&CCSprite::setVisible);
		using derivedType431 = temp_name_find_better::ret431(D<baseAddress431, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress431 = (derivedType431)(&D<baseAddress431, UUID>::setVisible);
        if (baseAddress431 != derivedAddress431) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setVisible", Severity::Debug);
            Interface::get()->addHook("CCSprite::setVisible", (void*)temp_name_find_better::address431(), (void*)addresser::getVirtual(derivedAddress431));
        }

    	using baseType432 = temp_name_find_better::ret432(CCSprite::*)(float) ;
		constexpr auto baseAddress432 = (baseType432)(&CCSprite::setRotation);
		using derivedType432 = temp_name_find_better::ret432(D<baseAddress432, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress432 = (derivedType432)(&D<baseAddress432, UUID>::setRotation);
        if (baseAddress432 != derivedAddress432) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setRotation", Severity::Debug);
            Interface::get()->addHook("CCSprite::setRotation", (void*)temp_name_find_better::address432(), (void*)addresser::getVirtual(derivedAddress432));
        }

    	using baseType433 = temp_name_find_better::ret433(CCSprite::*)(float) ;
		constexpr auto baseAddress433 = (baseType433)(&CCSprite::setRotationX);
		using derivedType433 = temp_name_find_better::ret433(D<baseAddress433, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress433 = (derivedType433)(&D<baseAddress433, UUID>::setRotationX);
        if (baseAddress433 != derivedAddress433) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setRotationX", Severity::Debug);
            Interface::get()->addHook("CCSprite::setRotationX", (void*)temp_name_find_better::address433(), (void*)addresser::getVirtual(derivedAddress433));
        }

    	using baseType434 = temp_name_find_better::ret434(CCSprite::*)(float) ;
		constexpr auto baseAddress434 = (baseType434)(&CCSprite::setRotationY);
		using derivedType434 = temp_name_find_better::ret434(D<baseAddress434, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress434 = (derivedType434)(&D<baseAddress434, UUID>::setRotationY);
        if (baseAddress434 != derivedAddress434) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setRotationY", Severity::Debug);
            Interface::get()->addHook("CCSprite::setRotationY", (void*)temp_name_find_better::address434(), (void*)addresser::getVirtual(derivedAddress434));
        }

    	using baseType435 = temp_name_find_better::ret435(CCSprite::*)(bool) ;
		constexpr auto baseAddress435 = (baseType435)(&CCSprite::ignoreAnchorPointForPosition);
		using derivedType435 = temp_name_find_better::ret435(D<baseAddress435, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress435 = (derivedType435)(&D<baseAddress435, UUID>::ignoreAnchorPointForPosition);
        if (baseAddress435 != derivedAddress435) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::ignoreAnchorPointForPosition", Severity::Debug);
            Interface::get()->addHook("CCSprite::ignoreAnchorPointForPosition", (void*)temp_name_find_better::address435(), (void*)addresser::getVirtual(derivedAddress435));
        }

    	using baseType436 = temp_name_find_better::ret436(CCSprite::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress436 = (baseType436)(&CCSprite::addChild);
		using derivedType436 = temp_name_find_better::ret436(D<baseAddress436, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress436 = (derivedType436)(&D<baseAddress436, UUID>::addChild);
        if (baseAddress436 != derivedAddress436) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::addChild", Severity::Debug);
            Interface::get()->addHook("CCSprite::addChild", (void*)temp_name_find_better::address436(), (void*)addresser::getVirtual(derivedAddress436));
        }

    	using baseType437 = temp_name_find_better::ret437(CCSprite::*)(cocos2d::CCNode*, int) ;
		constexpr auto baseAddress437 = (baseType437)(&CCSprite::addChild);
		using derivedType437 = temp_name_find_better::ret437(D<baseAddress437, UUID>::*)(cocos2d::CCNode*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress437 = (derivedType437)(&D<baseAddress437, UUID>::addChild);
        if (baseAddress437 != derivedAddress437) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::addChild", Severity::Debug);
            Interface::get()->addHook("CCSprite::addChild", (void*)temp_name_find_better::address437(), (void*)addresser::getVirtual(derivedAddress437));
        }

    	using baseType438 = temp_name_find_better::ret438(CCSprite::*)(cocos2d::CCNode*, int, int) ;
		constexpr auto baseAddress438 = (baseType438)(&CCSprite::addChild);
		using derivedType438 = temp_name_find_better::ret438(D<baseAddress438, UUID>::*)(cocos2d::CCNode*, int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress438 = (derivedType438)(&D<baseAddress438, UUID>::addChild);
        if (baseAddress438 != derivedAddress438) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::addChild", Severity::Debug);
            Interface::get()->addHook("CCSprite::addChild", (void*)temp_name_find_better::address438(), (void*)addresser::getVirtual(derivedAddress438));
        }

    	using baseType439 = temp_name_find_better::ret439(CCSprite::*)(cocos2d::CCNode*, bool) ;
		constexpr auto baseAddress439 = (baseType439)(&CCSprite::removeChild);
		using derivedType439 = temp_name_find_better::ret439(D<baseAddress439, UUID>::*)(cocos2d::CCNode*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress439 = (derivedType439)(&D<baseAddress439, UUID>::removeChild);
        if (baseAddress439 != derivedAddress439) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::removeChild", Severity::Debug);
            Interface::get()->addHook("CCSprite::removeChild", (void*)temp_name_find_better::address439(), (void*)addresser::getVirtual(derivedAddress439));
        }

    	using baseType440 = temp_name_find_better::ret440(CCSprite::*)(bool) ;
		constexpr auto baseAddress440 = (baseType440)(&CCSprite::removeAllChildrenWithCleanup);
		using derivedType440 = temp_name_find_better::ret440(D<baseAddress440, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress440 = (derivedType440)(&D<baseAddress440, UUID>::removeAllChildrenWithCleanup);
        if (baseAddress440 != derivedAddress440) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::removeAllChildrenWithCleanup", Severity::Debug);
            Interface::get()->addHook("CCSprite::removeAllChildrenWithCleanup", (void*)temp_name_find_better::address440(), (void*)addresser::getVirtual(derivedAddress440));
        }

    	using baseType441 = temp_name_find_better::ret441(CCSprite::*)(cocos2d::CCNode*, int) ;
		constexpr auto baseAddress441 = (baseType441)(&CCSprite::reorderChild);
		using derivedType441 = temp_name_find_better::ret441(D<baseAddress441, UUID>::*)(cocos2d::CCNode*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress441 = (derivedType441)(&D<baseAddress441, UUID>::reorderChild);
        if (baseAddress441 != derivedAddress441) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::reorderChild", Severity::Debug);
            Interface::get()->addHook("CCSprite::reorderChild", (void*)temp_name_find_better::address441(), (void*)addresser::getVirtual(derivedAddress441));
        }

    	using baseType442 = temp_name_find_better::ret442(CCSprite::*)() ;
		constexpr auto baseAddress442 = (baseType442)(&CCSprite::sortAllChildren);
		using derivedType442 = temp_name_find_better::ret442(D<baseAddress442, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress442 = (derivedType442)(&D<baseAddress442, UUID>::sortAllChildren);
        if (baseAddress442 != derivedAddress442) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::sortAllChildren", Severity::Debug);
            Interface::get()->addHook("CCSprite::sortAllChildren", (void*)temp_name_find_better::address442(), (void*)addresser::getVirtual(derivedAddress442));
        }

    	using baseType443 = temp_name_find_better::ret443(CCSprite::*)() ;
		constexpr auto baseAddress443 = (baseType443)(&CCSprite::draw);
		using derivedType443 = temp_name_find_better::ret443(D<baseAddress443, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress443 = (derivedType443)(&D<baseAddress443, UUID>::draw);
        if (baseAddress443 != derivedAddress443) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::draw", Severity::Debug);
            Interface::get()->addHook("CCSprite::draw", (void*)temp_name_find_better::address443(), (void*)addresser::getVirtual(derivedAddress443));
        }

    	using baseType444 = temp_name_find_better::ret444(CCSprite::*)() ;
		constexpr auto baseAddress444 = (baseType444)(&CCSprite::updateTransform);
		using derivedType444 = temp_name_find_better::ret444(D<baseAddress444, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress444 = (derivedType444)(&D<baseAddress444, UUID>::updateTransform);
        if (baseAddress444 != derivedAddress444) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::updateTransform", Severity::Debug);
            Interface::get()->addHook("CCSprite::updateTransform", (void*)temp_name_find_better::address444(), (void*)addresser::getVirtual(derivedAddress444));
        }

    	using baseType445 = temp_name_find_better::ret445(CCSprite::*)(unsigned char) ;
		constexpr auto baseAddress445 = (baseType445)(&CCSprite::setOpacity);
		using derivedType445 = temp_name_find_better::ret445(D<baseAddress445, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress445 = (derivedType445)(&D<baseAddress445, UUID>::setOpacity);
        if (baseAddress445 != derivedAddress445) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setOpacity", Severity::Debug);
            Interface::get()->addHook("CCSprite::setOpacity", (void*)temp_name_find_better::address445(), (void*)addresser::getVirtual(derivedAddress445));
        }

    	using baseType446 = temp_name_find_better::ret446(CCSprite::*)(unsigned char) ;
		constexpr auto baseAddress446 = (baseType446)(&CCSprite::updateDisplayedOpacity);
		using derivedType446 = temp_name_find_better::ret446(D<baseAddress446, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress446 = (derivedType446)(&D<baseAddress446, UUID>::updateDisplayedOpacity);
        if (baseAddress446 != derivedAddress446) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::updateDisplayedOpacity", Severity::Debug);
            Interface::get()->addHook("CCSprite::updateDisplayedOpacity", (void*)temp_name_find_better::address446(), (void*)addresser::getVirtual(derivedAddress446));
        }

    	using baseType447 = temp_name_find_better::ret447(CCSprite::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress447 = (baseType447)(&CCSprite::setColor);
		using derivedType447 = temp_name_find_better::ret447(D<baseAddress447, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress447 = (derivedType447)(&D<baseAddress447, UUID>::setColor);
        if (baseAddress447 != derivedAddress447) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setColor", Severity::Debug);
            Interface::get()->addHook("CCSprite::setColor", (void*)temp_name_find_better::address447(), (void*)addresser::getVirtual(derivedAddress447));
        }

    	using baseType448 = temp_name_find_better::ret448(CCSprite::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress448 = (baseType448)(&CCSprite::updateDisplayedColor);
		using derivedType448 = temp_name_find_better::ret448(D<baseAddress448, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress448 = (derivedType448)(&D<baseAddress448, UUID>::updateDisplayedColor);
        if (baseAddress448 != derivedAddress448) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::updateDisplayedColor", Severity::Debug);
            Interface::get()->addHook("CCSprite::updateDisplayedColor", (void*)temp_name_find_better::address448(), (void*)addresser::getVirtual(derivedAddress448));
        }

    	using baseType449 = temp_name_find_better::ret449(CCSprite::*)(bool) ;
		constexpr auto baseAddress449 = (baseType449)(&CCSprite::setOpacityModifyRGB);
		using derivedType449 = temp_name_find_better::ret449(D<baseAddress449, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress449 = (derivedType449)(&D<baseAddress449, UUID>::setOpacityModifyRGB);
        if (baseAddress449 != derivedAddress449) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setOpacityModifyRGB", Severity::Debug);
            Interface::get()->addHook("CCSprite::setOpacityModifyRGB", (void*)temp_name_find_better::address449(), (void*)addresser::getVirtual(derivedAddress449));
        }

    	using baseType450 = temp_name_find_better::ret450(CCSprite::*)() ;
		constexpr auto baseAddress450 = (baseType450)(&CCSprite::isOpacityModifyRGB);
		using derivedType450 = temp_name_find_better::ret450(D<baseAddress450, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress450 = (derivedType450)(&D<baseAddress450, UUID>::isOpacityModifyRGB);
        if (baseAddress450 != derivedAddress450) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::isOpacityModifyRGB", Severity::Debug);
            Interface::get()->addHook("CCSprite::isOpacityModifyRGB", (void*)temp_name_find_better::address450(), (void*)addresser::getVirtual(derivedAddress450));
        }

    	using baseType451 = temp_name_find_better::ret451(CCSprite::*)(cocos2d::CCTexture2D*) ;
		constexpr auto baseAddress451 = (baseType451)(&CCSprite::initWithTexture);
		using derivedType451 = temp_name_find_better::ret451(D<baseAddress451, UUID>::*)(cocos2d::CCTexture2D*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress451 = (derivedType451)(&D<baseAddress451, UUID>::initWithTexture);
        if (baseAddress451 != derivedAddress451) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithTexture", (void*)temp_name_find_better::address451(), (void*)addresser::getVirtual(derivedAddress451));
        }

    	using baseType452 = temp_name_find_better::ret452(CCSprite::*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&) ;
		constexpr auto baseAddress452 = (baseType452)(&CCSprite::initWithTexture);
		using derivedType452 = temp_name_find_better::ret452(D<baseAddress452, UUID>::*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress452 = (derivedType452)(&D<baseAddress452, UUID>::initWithTexture);
        if (baseAddress452 != derivedAddress452) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithTexture", (void*)temp_name_find_better::address452(), (void*)addresser::getVirtual(derivedAddress452));
        }

    	using baseType453 = temp_name_find_better::ret453(CCSprite::*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool) ;
		constexpr auto baseAddress453 = (baseType453)(&CCSprite::initWithTexture);
		using derivedType453 = temp_name_find_better::ret453(D<baseAddress453, UUID>::*)(cocos2d::CCTexture2D*, cocos2d::CCRect const&, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress453 = (derivedType453)(&D<baseAddress453, UUID>::initWithTexture);
        if (baseAddress453 != derivedAddress453) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithTexture", (void*)temp_name_find_better::address453(), (void*)addresser::getVirtual(derivedAddress453));
        }

    	using baseType454 = temp_name_find_better::ret454(CCSprite::*)(cocos2d::CCSpriteFrame*) ;
		constexpr auto baseAddress454 = (baseType454)(&CCSprite::initWithSpriteFrame);
		using derivedType454 = temp_name_find_better::ret454(D<baseAddress454, UUID>::*)(cocos2d::CCSpriteFrame*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress454 = (derivedType454)(&D<baseAddress454, UUID>::initWithSpriteFrame);
        if (baseAddress454 != derivedAddress454) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithSpriteFrame", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithSpriteFrame", (void*)temp_name_find_better::address454(), (void*)addresser::getVirtual(derivedAddress454));
        }

    	using baseType455 = temp_name_find_better::ret455(CCSprite::*)(char const*) ;
		constexpr auto baseAddress455 = (baseType455)(&CCSprite::initWithSpriteFrameName);
		using derivedType455 = temp_name_find_better::ret455(D<baseAddress455, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress455 = (derivedType455)(&D<baseAddress455, UUID>::initWithSpriteFrameName);
        if (baseAddress455 != derivedAddress455) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithSpriteFrameName", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithSpriteFrameName", (void*)temp_name_find_better::address455(), (void*)addresser::getVirtual(derivedAddress455));
        }

    	using baseType456 = temp_name_find_better::ret456(CCSprite::*)(char const*) ;
		constexpr auto baseAddress456 = (baseType456)(&CCSprite::initWithFile);
		using derivedType456 = temp_name_find_better::ret456(D<baseAddress456, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress456 = (derivedType456)(&D<baseAddress456, UUID>::initWithFile);
        if (baseAddress456 != derivedAddress456) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithFile", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithFile", (void*)temp_name_find_better::address456(), (void*)addresser::getVirtual(derivedAddress456));
        }

    	using baseType457 = temp_name_find_better::ret457(CCSprite::*)(char const*, cocos2d::CCRect const&) ;
		constexpr auto baseAddress457 = (baseType457)(&CCSprite::initWithFile);
		using derivedType457 = temp_name_find_better::ret457(D<baseAddress457, UUID>::*)(char const*, cocos2d::CCRect const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress457 = (derivedType457)(&D<baseAddress457, UUID>::initWithFile);
        if (baseAddress457 != derivedAddress457) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::initWithFile", Severity::Debug);
            Interface::get()->addHook("CCSprite::initWithFile", (void*)temp_name_find_better::address457(), (void*)addresser::getVirtual(derivedAddress457));
        }

    	using baseType458 = temp_name_find_better::ret458(CCSprite::*)(cocos2d::CCTexture2D*) ;
		constexpr auto baseAddress458 = (baseType458)(&CCSprite::setTexture);
		using derivedType458 = temp_name_find_better::ret458(D<baseAddress458, UUID>::*)(cocos2d::CCTexture2D*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress458 = (derivedType458)(&D<baseAddress458, UUID>::setTexture);
        if (baseAddress458 != derivedAddress458) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setTexture", Severity::Debug);
            Interface::get()->addHook("CCSprite::setTexture", (void*)temp_name_find_better::address458(), (void*)addresser::getVirtual(derivedAddress458));
        }

    	using baseType459 = temp_name_find_better::ret459(CCSprite::*)() ;
		constexpr auto baseAddress459 = (baseType459)(&CCSprite::getTexture);
		using derivedType459 = temp_name_find_better::ret459(D<baseAddress459, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress459 = (derivedType459)(&D<baseAddress459, UUID>::getTexture);
        if (baseAddress459 != derivedAddress459) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::getTexture", Severity::Debug);
            Interface::get()->addHook("CCSprite::getTexture", (void*)temp_name_find_better::address459(), (void*)addresser::getVirtual(derivedAddress459));
        }

    	using baseType460 = temp_name_find_better::ret460(CCSprite::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress460 = (baseType460)(&CCSprite::setChildColor);
		using derivedType460 = temp_name_find_better::ret460(D<baseAddress460, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress460 = (derivedType460)(&D<baseAddress460, UUID>::setChildColor);
        if (baseAddress460 != derivedAddress460) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setChildColor", Severity::Debug);
            Interface::get()->addHook("CCSprite::setChildColor", (void*)temp_name_find_better::address460(), (void*)addresser::getVirtual(derivedAddress460));
        }

    	using baseType461 = temp_name_find_better::ret461(CCSprite::*)(unsigned char) ;
		constexpr auto baseAddress461 = (baseType461)(&CCSprite::setChildOpacity);
		using derivedType461 = temp_name_find_better::ret461(D<baseAddress461, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress461 = (derivedType461)(&D<baseAddress461, UUID>::setChildOpacity);
        if (baseAddress461 != derivedAddress461) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setChildOpacity", Severity::Debug);
            Interface::get()->addHook("CCSprite::setChildOpacity", (void*)temp_name_find_better::address461(), (void*)addresser::getVirtual(derivedAddress461));
        }

    	using baseType462 = temp_name_find_better::ret462(CCSprite::*)() ;
		constexpr auto baseAddress462 = (baseType462)(&CCSprite::getBatchNode);
		using derivedType462 = temp_name_find_better::ret462(D<baseAddress462, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress462 = (derivedType462)(&D<baseAddress462, UUID>::getBatchNode);
        if (baseAddress462 != derivedAddress462) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::getBatchNode", Severity::Debug);
            Interface::get()->addHook("CCSprite::getBatchNode", (void*)temp_name_find_better::address462(), (void*)addresser::getVirtual(derivedAddress462));
        }

    	using baseType463 = temp_name_find_better::ret463(CCSprite::*)(cocos2d::CCSpriteBatchNode*) ;
		constexpr auto baseAddress463 = (baseType463)(&CCSprite::setBatchNode);
		using derivedType463 = temp_name_find_better::ret463(D<baseAddress463, UUID>::*)(cocos2d::CCSpriteBatchNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress463 = (derivedType463)(&D<baseAddress463, UUID>::setBatchNode);
        if (baseAddress463 != derivedAddress463) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setBatchNode", Severity::Debug);
            Interface::get()->addHook("CCSprite::setBatchNode", (void*)temp_name_find_better::address463(), (void*)addresser::getVirtual(derivedAddress463));
        }

    	using baseType464 = temp_name_find_better::ret464(CCSprite::*)() ;
		constexpr auto baseAddress464 = (baseType464)(&CCSprite::refreshTextureRect);
		using derivedType464 = temp_name_find_better::ret464(D<baseAddress464, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress464 = (derivedType464)(&D<baseAddress464, UUID>::refreshTextureRect);
        if (baseAddress464 != derivedAddress464) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::refreshTextureRect", Severity::Debug);
            Interface::get()->addHook("CCSprite::refreshTextureRect", (void*)temp_name_find_better::address464(), (void*)addresser::getVirtual(derivedAddress464));
        }

    	using baseType465 = temp_name_find_better::ret465(CCSprite::*)(cocos2d::CCRect const&) ;
		constexpr auto baseAddress465 = (baseType465)(&CCSprite::setTextureRect);
		using derivedType465 = temp_name_find_better::ret465(D<baseAddress465, UUID>::*)(cocos2d::CCRect const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress465 = (derivedType465)(&D<baseAddress465, UUID>::setTextureRect);
        if (baseAddress465 != derivedAddress465) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setTextureRect", Severity::Debug);
            Interface::get()->addHook("CCSprite::setTextureRect", (void*)temp_name_find_better::address465(), (void*)addresser::getVirtual(derivedAddress465));
        }

    	using baseType466 = temp_name_find_better::ret466(CCSprite::*)(cocos2d::CCRect const&, bool, cocos2d::CCSize const&) ;
		constexpr auto baseAddress466 = (baseType466)(&CCSprite::setTextureRect);
		using derivedType466 = temp_name_find_better::ret466(D<baseAddress466, UUID>::*)(cocos2d::CCRect const&, bool, cocos2d::CCSize const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress466 = (derivedType466)(&D<baseAddress466, UUID>::setTextureRect);
        if (baseAddress466 != derivedAddress466) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setTextureRect", Severity::Debug);
            Interface::get()->addHook("CCSprite::setTextureRect", (void*)temp_name_find_better::address466(), (void*)addresser::getVirtual(derivedAddress466));
        }

    	using baseType467 = temp_name_find_better::ret467(CCSprite::*)(cocos2d::CCRect const&) ;
		constexpr auto baseAddress467 = (baseType467)(&CCSprite::setVertexRect);
		using derivedType467 = temp_name_find_better::ret467(D<baseAddress467, UUID>::*)(cocos2d::CCRect const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress467 = (derivedType467)(&D<baseAddress467, UUID>::setVertexRect);
        if (baseAddress467 != derivedAddress467) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setVertexRect", Severity::Debug);
            Interface::get()->addHook("CCSprite::setVertexRect", (void*)temp_name_find_better::address467(), (void*)addresser::getVirtual(derivedAddress467));
        }

    	using baseType468 = temp_name_find_better::ret468(CCSprite::*)(cocos2d::CCSpriteFrame*) ;
		constexpr auto baseAddress468 = (baseType468)(&CCSprite::setDisplayFrame);
		using derivedType468 = temp_name_find_better::ret468(D<baseAddress468, UUID>::*)(cocos2d::CCSpriteFrame*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress468 = (derivedType468)(&D<baseAddress468, UUID>::setDisplayFrame);
        if (baseAddress468 != derivedAddress468) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setDisplayFrame", Severity::Debug);
            Interface::get()->addHook("CCSprite::setDisplayFrame", (void*)temp_name_find_better::address468(), (void*)addresser::getVirtual(derivedAddress468));
        }

    	using baseType469 = temp_name_find_better::ret469(CCSprite::*)(cocos2d::CCSpriteFrame*) ;
		constexpr auto baseAddress469 = (baseType469)(&CCSprite::isFrameDisplayed);
		using derivedType469 = temp_name_find_better::ret469(D<baseAddress469, UUID>::*)(cocos2d::CCSpriteFrame*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress469 = (derivedType469)(&D<baseAddress469, UUID>::isFrameDisplayed);
        if (baseAddress469 != derivedAddress469) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::isFrameDisplayed", Severity::Debug);
            Interface::get()->addHook("CCSprite::isFrameDisplayed", (void*)temp_name_find_better::address469(), (void*)addresser::getVirtual(derivedAddress469));
        }

    	using baseType470 = temp_name_find_better::ret470(CCSprite::*)() ;
		constexpr auto baseAddress470 = (baseType470)(&CCSprite::displayFrame);
		using derivedType470 = temp_name_find_better::ret470(D<baseAddress470, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress470 = (derivedType470)(&D<baseAddress470, UUID>::displayFrame);
        if (baseAddress470 != derivedAddress470) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::displayFrame", Severity::Debug);
            Interface::get()->addHook("CCSprite::displayFrame", (void*)temp_name_find_better::address470(), (void*)addresser::getVirtual(derivedAddress470));
        }

    	using baseType471 = temp_name_find_better::ret471(CCSprite::*)(char const*, int) ;
		constexpr auto baseAddress471 = (baseType471)(&CCSprite::setDisplayFrameWithAnimationName);
		using derivedType471 = temp_name_find_better::ret471(D<baseAddress471, UUID>::*)(char const*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress471 = (derivedType471)(&D<baseAddress471, UUID>::setDisplayFrameWithAnimationName);
        if (baseAddress471 != derivedAddress471) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setDisplayFrameWithAnimationName", Severity::Debug);
            Interface::get()->addHook("CCSprite::setDisplayFrameWithAnimationName", (void*)temp_name_find_better::address471(), (void*)addresser::getVirtual(derivedAddress471));
        }

    	using baseType472 = temp_name_find_better::ret472(CCSprite::*)(cocos2d::CCRect const&) ;
		constexpr auto baseAddress472 = (baseType472)(&CCSprite::setTextureCoords);
		using derivedType472 = temp_name_find_better::ret472(D<baseAddress472, UUID>::*)(cocos2d::CCRect const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress472 = (derivedType472)(&D<baseAddress472, UUID>::setTextureCoords);
        if (baseAddress472 != derivedAddress472) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setTextureCoords", Severity::Debug);
            Interface::get()->addHook("CCSprite::setTextureCoords", (void*)temp_name_find_better::address472(), (void*)addresser::getVirtual(derivedAddress472));
        }

    	using baseType473 = temp_name_find_better::ret473(CCSprite::*)() ;
		constexpr auto baseAddress473 = (baseType473)(&CCSprite::updateBlendFunc);
		using derivedType473 = temp_name_find_better::ret473(D<baseAddress473, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress473 = (derivedType473)(&D<baseAddress473, UUID>::updateBlendFunc);
        if (baseAddress473 != derivedAddress473) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::updateBlendFunc", Severity::Debug);
            Interface::get()->addHook("CCSprite::updateBlendFunc", (void*)temp_name_find_better::address473(), (void*)addresser::getVirtual(derivedAddress473));
        }

    	using baseType474 = temp_name_find_better::ret474(CCSprite::*)() ;
		constexpr auto baseAddress474 = (baseType474)(&CCSprite::setReorderChildDirtyRecursively);
		using derivedType474 = temp_name_find_better::ret474(D<baseAddress474, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress474 = (derivedType474)(&D<baseAddress474, UUID>::setReorderChildDirtyRecursively);
        if (baseAddress474 != derivedAddress474) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setReorderChildDirtyRecursively", Severity::Debug);
            Interface::get()->addHook("CCSprite::setReorderChildDirtyRecursively", (void*)temp_name_find_better::address474(), (void*)addresser::getVirtual(derivedAddress474));
        }

    	using baseType475 = temp_name_find_better::ret475(CCSprite::*)(bool) ;
		constexpr auto baseAddress475 = (baseType475)(&CCSprite::setDirtyRecursively);
		using derivedType475 = temp_name_find_better::ret475(D<baseAddress475, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress475 = (derivedType475)(&D<baseAddress475, UUID>::setDirtyRecursively);
        if (baseAddress475 != derivedAddress475) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setDirtyRecursively", Severity::Debug);
            Interface::get()->addHook("CCSprite::setDirtyRecursively", (void*)temp_name_find_better::address475(), (void*)addresser::getVirtual(derivedAddress475));
        }

		using baseType477 = temp_name_find_better::ret477(*)();
		constexpr auto baseAddress477 = (baseType477)(&CCSprite::create);
		using derivedType477 = temp_name_find_better::ret477(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress477 = (derivedType477)(&D<baseAddress477, UUID>::create);
        if (baseAddress477 != derivedAddress477) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::create", Severity::Debug);
            Interface::get()->addHook("CCSprite::create", (void*)temp_name_find_better::address477(), (void*)addresser::getNonVirtual(derivedAddress477));
        }

		using baseType478 = temp_name_find_better::ret478(*)(char const*);
		constexpr auto baseAddress478 = (baseType478)(&CCSprite::create);
		using derivedType478 = temp_name_find_better::ret478(*)(char const*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress478 = (derivedType478)(&D<baseAddress478, UUID>::create);
        if (baseAddress478 != derivedAddress478) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::create", Severity::Debug);
            Interface::get()->addHook("CCSprite::create", (void*)temp_name_find_better::address478(), (void*)addresser::getNonVirtual(derivedAddress478));
        }

		using baseType479 = temp_name_find_better::ret479(*)(cocos2d::CCSpriteFrame*);
		constexpr auto baseAddress479 = (baseType479)(&CCSprite::createWithSpriteFrame);
		using derivedType479 = temp_name_find_better::ret479(*)(cocos2d::CCSpriteFrame*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress479 = (derivedType479)(&D<baseAddress479, UUID>::createWithSpriteFrame);
        if (baseAddress479 != derivedAddress479) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::createWithSpriteFrame", Severity::Debug);
            Interface::get()->addHook("CCSprite::createWithSpriteFrame", (void*)temp_name_find_better::address479(), (void*)addresser::getNonVirtual(derivedAddress479));
        }

		using baseType480 = temp_name_find_better::ret480(*)(char const*);
		constexpr auto baseAddress480 = (baseType480)(&CCSprite::createWithSpriteFrameName);
		using derivedType480 = temp_name_find_better::ret480(*)(char const*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress480 = (derivedType480)(&D<baseAddress480, UUID>::createWithSpriteFrameName);
        if (baseAddress480 != derivedAddress480) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::createWithSpriteFrameName", Severity::Debug);
            Interface::get()->addHook("CCSprite::createWithSpriteFrameName", (void*)temp_name_find_better::address480(), (void*)addresser::getNonVirtual(derivedAddress480));
        }

		using baseType481 = temp_name_find_better::ret481(*)(cocos2d::CCTexture2D*);
		constexpr auto baseAddress481 = (baseType481)(&CCSprite::createWithTexture);
		using derivedType481 = temp_name_find_better::ret481(*)(cocos2d::CCTexture2D*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress481 = (derivedType481)(&D<baseAddress481, UUID>::createWithTexture);
        if (baseAddress481 != derivedAddress481) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::createWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSprite::createWithTexture", (void*)temp_name_find_better::address481(), (void*)addresser::getNonVirtual(derivedAddress481));
        }

    	using baseType482 = temp_name_find_better::ret482(CCSprite::*)(bool) ;
		constexpr auto baseAddress482 = (baseType482)(&CCSprite::setFlipX);
		using derivedType482 = temp_name_find_better::ret482(D<baseAddress482, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress482 = (derivedType482)(&D<baseAddress482, UUID>::setFlipX);
        if (baseAddress482 != derivedAddress482) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setFlipX", Severity::Debug);
            Interface::get()->addHook("CCSprite::setFlipX", (void*)temp_name_find_better::address482(), (void*)addresser::getNonVirtual(derivedAddress482));
        }

    	using baseType483 = temp_name_find_better::ret483(CCSprite::*)(bool) ;
		constexpr auto baseAddress483 = (baseType483)(&CCSprite::setFlipY);
		using derivedType483 = temp_name_find_better::ret483(D<baseAddress483, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress483 = (derivedType483)(&D<baseAddress483, UUID>::setFlipY);
        if (baseAddress483 != derivedAddress483) {
        	Interface::get()->logInfo("Adding hook at function CCSprite::setFlipY", Severity::Debug);
            Interface::get()->addHook("CCSprite::setFlipY", (void*)temp_name_find_better::address483(), (void*)addresser::getNonVirtual(derivedAddress483));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSpriteBatchNode : cocos2d::CCSpriteBatchNode, ModifierBase {
    $CCSpriteBatchNode(const $CCSpriteBatchNode& c) : CCSpriteBatchNode(c) {}
    $CCSpriteBatchNode() : $CCSpriteBatchNode(*this) {}
    ~$CCSpriteBatchNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSpriteBatchNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType484 = temp_name_find_better::ret484(*)(char const*, unsigned int);
		constexpr auto baseAddress484 = (baseType484)(&CCSpriteBatchNode::create);
		using derivedType484 = temp_name_find_better::ret484(*)(char const*, unsigned int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress484 = (derivedType484)(&D<baseAddress484, UUID>::create);
        if (baseAddress484 != derivedAddress484) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteBatchNode::create", Severity::Debug);
            Interface::get()->addHook("CCSpriteBatchNode::create", (void*)temp_name_find_better::address484(), (void*)addresser::getNonVirtual(derivedAddress484));
        }

		using baseType485 = temp_name_find_better::ret485(*)(cocos2d::CCTexture2D*, unsigned int);
		constexpr auto baseAddress485 = (baseType485)(&CCSpriteBatchNode::createWithTexture);
		using derivedType485 = temp_name_find_better::ret485(*)(cocos2d::CCTexture2D*, unsigned int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress485 = (derivedType485)(&D<baseAddress485, UUID>::createWithTexture);
        if (baseAddress485 != derivedAddress485) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteBatchNode::createWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSpriteBatchNode::createWithTexture", (void*)temp_name_find_better::address485(), (void*)addresser::getNonVirtual(derivedAddress485));
        }

    	using baseType486 = temp_name_find_better::ret486(CCSpriteBatchNode::*)() ;
		constexpr auto baseAddress486 = (baseType486)(&CCSpriteBatchNode::getUsedAtlasCapacity);
		using derivedType486 = temp_name_find_better::ret486(D<baseAddress486, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress486 = (derivedType486)(&D<baseAddress486, UUID>::getUsedAtlasCapacity);
        if (baseAddress486 != derivedAddress486) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteBatchNode::getUsedAtlasCapacity", Severity::Debug);
            Interface::get()->addHook("CCSpriteBatchNode::getUsedAtlasCapacity", (void*)temp_name_find_better::address486(), (void*)addresser::getNonVirtual(derivedAddress486));
        }

    	using baseType487 = temp_name_find_better::ret487(CCSpriteBatchNode::*)(unsigned int) ;
		constexpr auto baseAddress487 = (baseType487)(&CCSpriteBatchNode::increaseAtlasCapacity);
		using derivedType487 = temp_name_find_better::ret487(D<baseAddress487, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress487 = (derivedType487)(&D<baseAddress487, UUID>::increaseAtlasCapacity);
        if (baseAddress487 != derivedAddress487) {
        	Interface::get()->logInfo("Adding hook at function CCSpriteBatchNode::increaseAtlasCapacity", Severity::Debug);
            Interface::get()->addHook("CCSpriteBatchNode::increaseAtlasCapacity", (void*)temp_name_find_better::address487(), (void*)addresser::getNonVirtual(derivedAddress487));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJUserScore : GJUserScore, ModifierBase {
    $GJUserScore(const $GJUserScore& c) : GJUserScore(c) {}
    $GJUserScore() : $GJUserScore(*this) {}
    ~$GJUserScore() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJUserScore);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTargetedTouchHandler : cocos2d::CCTargetedTouchHandler, ModifierBase {
    $CCTargetedTouchHandler(const $CCTargetedTouchHandler& c) : CCTargetedTouchHandler(c) {}
    $CCTargetedTouchHandler() : $CCTargetedTouchHandler(*this) {}
    ~$CCTargetedTouchHandler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTargetedTouchHandler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType504 = temp_name_find_better::ret504(*)(cocos2d::CCTouchDelegate*, int, bool);
		constexpr auto baseAddress504 = (baseType504)(&CCTargetedTouchHandler::handlerWithDelegate);
		using derivedType504 = temp_name_find_better::ret504(*)(cocos2d::CCTouchDelegate*, int, bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress504 = (derivedType504)(&D<baseAddress504, UUID>::handlerWithDelegate);
        if (baseAddress504 != derivedAddress504) {
        	Interface::get()->logInfo("Adding hook at function CCTargetedTouchHandler::handlerWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCTargetedTouchHandler::handlerWithDelegate", (void*)temp_name_find_better::address504(), (void*)addresser::getNonVirtual(derivedAddress504));
        }

    	using baseType505 = temp_name_find_better::ret505(CCTargetedTouchHandler::*)(cocos2d::CCTouchDelegate*, int, bool) ;
		constexpr auto baseAddress505 = (baseType505)(&CCTargetedTouchHandler::initWithDelegate);
		using derivedType505 = temp_name_find_better::ret505(D<baseAddress505, UUID>::*)(cocos2d::CCTouchDelegate*, int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress505 = (derivedType505)(&D<baseAddress505, UUID>::initWithDelegate);
        if (baseAddress505 != derivedAddress505) {
        	Interface::get()->logInfo("Adding hook at function CCTargetedTouchHandler::initWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCTargetedTouchHandler::initWithDelegate", (void*)temp_name_find_better::address505(), (void*)addresser::getNonVirtual(derivedAddress505));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupCountTriggerPopup : SetupCountTriggerPopup, ModifierBase {
    $SetupCountTriggerPopup(const $SetupCountTriggerPopup& c) : SetupCountTriggerPopup(c) {}
    $SetupCountTriggerPopup() : $SetupCountTriggerPopup(*this) {}
    ~$SetupCountTriggerPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupCountTriggerPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTexture2D : cocos2d::CCTexture2D, ModifierBase {
    $CCTexture2D(const $CCTexture2D& c) : CCTexture2D(c) {}
    $CCTexture2D() : $CCTexture2D(*this) {}
    ~$CCTexture2D() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTexture2D);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType509 = temp_name_find_better::ret509(CCTexture2D::*)() ;
		constexpr auto baseAddress509 = (baseType509)(&CCTexture2D::getContentSize);
		using derivedType509 = temp_name_find_better::ret509(D<baseAddress509, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress509 = (derivedType509)(&D<baseAddress509, UUID>::getContentSize);
        if (baseAddress509 != derivedAddress509) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getContentSize", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getContentSize", (void*)temp_name_find_better::address509(), (void*)addresser::getNonVirtual(derivedAddress509));
        }

    	using baseType510 = temp_name_find_better::ret510(CCTexture2D::*)() ;
		constexpr auto baseAddress510 = (baseType510)(&CCTexture2D::getMaxS);
		using derivedType510 = temp_name_find_better::ret510(D<baseAddress510, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress510 = (derivedType510)(&D<baseAddress510, UUID>::getMaxS);
        if (baseAddress510 != derivedAddress510) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getMaxS", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getMaxS", (void*)temp_name_find_better::address510(), (void*)addresser::getNonVirtual(derivedAddress510));
        }

    	using baseType511 = temp_name_find_better::ret511(CCTexture2D::*)() ;
		constexpr auto baseAddress511 = (baseType511)(&CCTexture2D::getMaxT);
		using derivedType511 = temp_name_find_better::ret511(D<baseAddress511, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress511 = (derivedType511)(&D<baseAddress511, UUID>::getMaxT);
        if (baseAddress511 != derivedAddress511) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getMaxT", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getMaxT", (void*)temp_name_find_better::address511(), (void*)addresser::getNonVirtual(derivedAddress511));
        }

    	using baseType512 = temp_name_find_better::ret512(CCTexture2D::*)() ;
		constexpr auto baseAddress512 = (baseType512)(&CCTexture2D::getName);
		using derivedType512 = temp_name_find_better::ret512(D<baseAddress512, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress512 = (derivedType512)(&D<baseAddress512, UUID>::getName);
        if (baseAddress512 != derivedAddress512) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getName", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getName", (void*)temp_name_find_better::address512(), (void*)addresser::getNonVirtual(derivedAddress512));
        }

    	using baseType513 = temp_name_find_better::ret513(CCTexture2D::*)() ;
		constexpr auto baseAddress513 = (baseType513)(&CCTexture2D::getPixelFormat);
		using derivedType513 = temp_name_find_better::ret513(D<baseAddress513, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress513 = (derivedType513)(&D<baseAddress513, UUID>::getPixelFormat);
        if (baseAddress513 != derivedAddress513) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getPixelFormat", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getPixelFormat", (void*)temp_name_find_better::address513(), (void*)addresser::getNonVirtual(derivedAddress513));
        }

    	using baseType514 = temp_name_find_better::ret514(CCTexture2D::*)() ;
		constexpr auto baseAddress514 = (baseType514)(&CCTexture2D::getPixelsHigh);
		using derivedType514 = temp_name_find_better::ret514(D<baseAddress514, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress514 = (derivedType514)(&D<baseAddress514, UUID>::getPixelsHigh);
        if (baseAddress514 != derivedAddress514) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getPixelsHigh", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getPixelsHigh", (void*)temp_name_find_better::address514(), (void*)addresser::getNonVirtual(derivedAddress514));
        }

    	using baseType515 = temp_name_find_better::ret515(CCTexture2D::*)() ;
		constexpr auto baseAddress515 = (baseType515)(&CCTexture2D::getPixelsWide);
		using derivedType515 = temp_name_find_better::ret515(D<baseAddress515, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress515 = (derivedType515)(&D<baseAddress515, UUID>::getPixelsWide);
        if (baseAddress515 != derivedAddress515) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getPixelsWide", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getPixelsWide", (void*)temp_name_find_better::address515(), (void*)addresser::getNonVirtual(derivedAddress515));
        }

    	using baseType516 = temp_name_find_better::ret516(CCTexture2D::*)() ;
		constexpr auto baseAddress516 = (baseType516)(&CCTexture2D::getShaderProgram);
		using derivedType516 = temp_name_find_better::ret516(D<baseAddress516, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress516 = (derivedType516)(&D<baseAddress516, UUID>::getShaderProgram);
        if (baseAddress516 != derivedAddress516) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::getShaderProgram", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::getShaderProgram", (void*)temp_name_find_better::address516(), (void*)addresser::getNonVirtual(derivedAddress516));
        }

    	using baseType517 = temp_name_find_better::ret517(CCTexture2D::*)(cocos2d::CCImage*, unsigned int, unsigned int) ;
		constexpr auto baseAddress517 = (baseType517)(&CCTexture2D::initPremultipliedATextureWithImage);
		using derivedType517 = temp_name_find_better::ret517(D<baseAddress517, UUID>::*)(cocos2d::CCImage*, unsigned int, unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress517 = (derivedType517)(&D<baseAddress517, UUID>::initPremultipliedATextureWithImage);
        if (baseAddress517 != derivedAddress517) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::initPremultipliedATextureWithImage", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::initPremultipliedATextureWithImage", (void*)temp_name_find_better::address517(), (void*)addresser::getNonVirtual(derivedAddress517));
        }

    	using baseType518 = temp_name_find_better::ret518(CCTexture2D::*)(void const*, cocos2d::CCTexture2DPixelFormat, unsigned int, unsigned int, cocos2d::CCSize const&) ;
		constexpr auto baseAddress518 = (baseType518)(&CCTexture2D::initWithData);
		using derivedType518 = temp_name_find_better::ret518(D<baseAddress518, UUID>::*)(void const*, cocos2d::CCTexture2DPixelFormat, unsigned int, unsigned int, cocos2d::CCSize const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress518 = (derivedType518)(&D<baseAddress518, UUID>::initWithData);
        if (baseAddress518 != derivedAddress518) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::initWithData", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::initWithData", (void*)temp_name_find_better::address518(), (void*)addresser::getNonVirtual(derivedAddress518));
        }

    	using baseType519 = temp_name_find_better::ret519(CCTexture2D::*)() ;
		constexpr auto baseAddress519 = (baseType519)(&CCTexture2D::setAliasTexParameters);
		using derivedType519 = temp_name_find_better::ret519(D<baseAddress519, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress519 = (derivedType519)(&D<baseAddress519, UUID>::setAliasTexParameters);
        if (baseAddress519 != derivedAddress519) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::setAliasTexParameters", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::setAliasTexParameters", (void*)temp_name_find_better::address519(), (void*)addresser::getNonVirtual(derivedAddress519));
        }

    	using baseType520 = temp_name_find_better::ret520(CCTexture2D::*)() ;
		constexpr auto baseAddress520 = (baseType520)(&CCTexture2D::setAntiAliasTexParameters);
		using derivedType520 = temp_name_find_better::ret520(D<baseAddress520, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress520 = (derivedType520)(&D<baseAddress520, UUID>::setAntiAliasTexParameters);
        if (baseAddress520 != derivedAddress520) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::setAntiAliasTexParameters", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::setAntiAliasTexParameters", (void*)temp_name_find_better::address520(), (void*)addresser::getNonVirtual(derivedAddress520));
        }

    	using baseType521 = temp_name_find_better::ret521(CCTexture2D::*)(float) ;
		constexpr auto baseAddress521 = (baseType521)(&CCTexture2D::setMaxS);
		using derivedType521 = temp_name_find_better::ret521(D<baseAddress521, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress521 = (derivedType521)(&D<baseAddress521, UUID>::setMaxS);
        if (baseAddress521 != derivedAddress521) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::setMaxS", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::setMaxS", (void*)temp_name_find_better::address521(), (void*)addresser::getNonVirtual(derivedAddress521));
        }

    	using baseType522 = temp_name_find_better::ret522(CCTexture2D::*)(float) ;
		constexpr auto baseAddress522 = (baseType522)(&CCTexture2D::setMaxT);
		using derivedType522 = temp_name_find_better::ret522(D<baseAddress522, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress522 = (derivedType522)(&D<baseAddress522, UUID>::setMaxT);
        if (baseAddress522 != derivedAddress522) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::setMaxT", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::setMaxT", (void*)temp_name_find_better::address522(), (void*)addresser::getNonVirtual(derivedAddress522));
        }

    	using baseType523 = temp_name_find_better::ret523(CCTexture2D::*)(cocos2d::CCGLProgram*) ;
		constexpr auto baseAddress523 = (baseType523)(&CCTexture2D::setShaderProgram);
		using derivedType523 = temp_name_find_better::ret523(D<baseAddress523, UUID>::*)(cocos2d::CCGLProgram*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress523 = (derivedType523)(&D<baseAddress523, UUID>::setShaderProgram);
        if (baseAddress523 != derivedAddress523) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::setShaderProgram", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::setShaderProgram", (void*)temp_name_find_better::address523(), (void*)addresser::getNonVirtual(derivedAddress523));
        }

    	using baseType524 = temp_name_find_better::ret524(CCTexture2D::*)(cocos2d::CCImage*) ;
		constexpr auto baseAddress524 = (baseType524)(&CCTexture2D::initWithImage);
		using derivedType524 = temp_name_find_better::ret524(D<baseAddress524, UUID>::*)(cocos2d::CCImage*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress524 = (derivedType524)(&D<baseAddress524, UUID>::initWithImage);
        if (baseAddress524 != derivedAddress524) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::initWithImage", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::initWithImage", (void*)temp_name_find_better::address524(), (void*)addresser::getNonVirtual(derivedAddress524));
        }

    	using baseType525 = temp_name_find_better::ret525(CCTexture2D::*)(cocos2d::_ccTexParams*) ;
		constexpr auto baseAddress525 = (baseType525)(&CCTexture2D::setTexParameters);
		using derivedType525 = temp_name_find_better::ret525(D<baseAddress525, UUID>::*)(cocos2d::_ccTexParams*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress525 = (derivedType525)(&D<baseAddress525, UUID>::setTexParameters);
        if (baseAddress525 != derivedAddress525) {
        	Interface::get()->logInfo("Adding hook at function CCTexture2D::setTexParameters", Severity::Debug);
            Interface::get()->addHook("CCTexture2D::setTexParameters", (void*)temp_name_find_better::address525(), (void*)addresser::getNonVirtual(derivedAddress525));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTextFieldDelegate : cocos2d::CCTextFieldDelegate, ModifierBase {
    $CCTextFieldDelegate(const $CCTextFieldDelegate& c) : CCTextFieldDelegate(c) {}
    $CCTextFieldDelegate() : $CCTextFieldDelegate(*this) {}
    ~$CCTextFieldDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTextFieldDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCCircleWaveDelegate : CCCircleWaveDelegate, ModifierBase {
    $CCCircleWaveDelegate(const $CCCircleWaveDelegate& c) : CCCircleWaveDelegate(c) {}
    $CCCircleWaveDelegate() : $CCCircleWaveDelegate(*this) {}
    ~$CCCircleWaveDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCCircleWaveDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTextureCache : cocos2d::CCTextureCache, ModifierBase {
    $CCTextureCache(const $CCTextureCache& c) : CCTextureCache(c) {}
    $CCTextureCache() : $CCTextureCache(*this) {}
    ~$CCTextureCache() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTextureCache);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType526 = temp_name_find_better::ret526(CCTextureCache::*)(char const*, bool) ;
		constexpr auto baseAddress526 = (baseType526)(&CCTextureCache::addImage);
		using derivedType526 = temp_name_find_better::ret526(D<baseAddress526, UUID>::*)(char const*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress526 = (derivedType526)(&D<baseAddress526, UUID>::addImage);
        if (baseAddress526 != derivedAddress526) {
        	Interface::get()->logInfo("Adding hook at function CCTextureCache::addImage", Severity::Debug);
            Interface::get()->addHook("CCTextureCache::addImage", (void*)temp_name_find_better::address526(), (void*)addresser::getNonVirtual(derivedAddress526));
        }

		using baseType527 = temp_name_find_better::ret527(*)();
		constexpr auto baseAddress527 = (baseType527)(&CCTextureCache::sharedTextureCache);
		using derivedType527 = temp_name_find_better::ret527(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress527 = (derivedType527)(&D<baseAddress527, UUID>::sharedTextureCache);
        if (baseAddress527 != derivedAddress527) {
        	Interface::get()->logInfo("Adding hook at function CCTextureCache::sharedTextureCache", Severity::Debug);
            Interface::get()->addHook("CCTextureCache::sharedTextureCache", (void*)temp_name_find_better::address527(), (void*)addresser::getNonVirtual(derivedAddress527));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PauseLayer : PauseLayer, ModifierBase {
    $PauseLayer(const $PauseLayer& c) : PauseLayer(c) {}
    $PauseLayer() : $PauseLayer(*this) {}
    ~$PauseLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PauseLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1663 = temp_name_find_better::ret1663(PauseLayer::*)(cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, struct gd::string, struct cocos2d::CCPoint) ;
		constexpr auto baseAddress1663 = (baseType1663)(&PauseLayer::createToggleButton);
		using derivedType1663 = temp_name_find_better::ret1663(D<baseAddress1663, UUID>::*)(cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, struct gd::string, struct cocos2d::CCPoint) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1663 = (derivedType1663)(&D<baseAddress1663, UUID>::createToggleButton);
        if (baseAddress1663 != derivedAddress1663) {
        	Interface::get()->logInfo("Adding hook at function PauseLayer::createToggleButton", Severity::Debug);
            Interface::get()->addHook("PauseLayer::createToggleButton", (void*)temp_name_find_better::address1663(), (void*)addresser::getNonVirtual(derivedAddress1663));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTintTo : cocos2d::CCTintTo, ModifierBase {
    $CCTintTo(const $CCTintTo& c) : CCTintTo(c) {}
    $CCTintTo() : $CCTintTo(*this) {}
    ~$CCTintTo() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTintTo);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType528 = temp_name_find_better::ret528(*)(float, unsigned char, unsigned char, unsigned char);
		constexpr auto baseAddress528 = (baseType528)(&CCTintTo::create);
		using derivedType528 = temp_name_find_better::ret528(*)(float, unsigned char, unsigned char, unsigned char);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress528 = (derivedType528)(&D<baseAddress528, UUID>::create);
        if (baseAddress528 != derivedAddress528) {
        	Interface::get()->logInfo("Adding hook at function CCTintTo::create", Severity::Debug);
            Interface::get()->addHook("CCTintTo::create", (void*)temp_name_find_better::address528(), (void*)addresser::getNonVirtual(derivedAddress528));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameSoundManager : GameSoundManager, ModifierBase {
    $GameSoundManager(const $GameSoundManager& c) : GameSoundManager(c) {}
    $GameSoundManager() : $GameSoundManager(*this) {}
    ~$GameSoundManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameSoundManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1471 = temp_name_find_better::ret1471(GameSoundManager::*)(struct gd::string, float, float, float) ;
		constexpr auto baseAddress1471 = (baseType1471)(&GameSoundManager::playEffect);
		using derivedType1471 = temp_name_find_better::ret1471(D<baseAddress1471, UUID>::*)(struct gd::string, float, float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1471 = (derivedType1471)(&D<baseAddress1471, UUID>::playEffect);
        if (baseAddress1471 != derivedAddress1471) {
        	Interface::get()->logInfo("Adding hook at function GameSoundManager::playEffect", Severity::Debug);
            Interface::get()->addHook("GameSoundManager::playEffect", (void*)temp_name_find_better::address1471(), (void*)addresser::getNonVirtual(derivedAddress1471));
        }

		using baseType1475 = temp_name_find_better::ret1475(*)();
		constexpr auto baseAddress1475 = (baseType1475)(&GameSoundManager::sharedState);
		using derivedType1475 = temp_name_find_better::ret1475(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1475 = (derivedType1475)(&D<baseAddress1475, UUID>::sharedState);
        if (baseAddress1475 != derivedAddress1475) {
        	Interface::get()->logInfo("Adding hook at function GameSoundManager::sharedState", Severity::Debug);
            Interface::get()->addHook("GameSoundManager::sharedState", (void*)temp_name_find_better::address1475(), (void*)addresser::getNonVirtual(derivedAddress1475));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTouch : cocos2d::CCTouch, ModifierBase {
    $CCTouch(const $CCTouch& c) : CCTouch(c) {}
    $CCTouch() : $CCTouch(*this) {}
    ~$CCTouch() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTouch);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType529 = temp_name_find_better::ret529(CCTouch::*)() const ;
		constexpr auto baseAddress529 = (baseType529)(&CCTouch::getDelta);
		using derivedType529 = temp_name_find_better::ret529(D<baseAddress529, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress529 = (derivedType529)(&D<baseAddress529, UUID>::getDelta);
        if (baseAddress529 != derivedAddress529) {
        	Interface::get()->logInfo("Adding hook at function CCTouch::getDelta", Severity::Debug);
            Interface::get()->addHook("CCTouch::getDelta", (void*)temp_name_find_better::address529(), (void*)addresser::getNonVirtual(derivedAddress529));
        }

    	using baseType530 = temp_name_find_better::ret530(CCTouch::*)() const ;
		constexpr auto baseAddress530 = (baseType530)(&CCTouch::getLocationInView);
		using derivedType530 = temp_name_find_better::ret530(D<baseAddress530, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress530 = (derivedType530)(&D<baseAddress530, UUID>::getLocationInView);
        if (baseAddress530 != derivedAddress530) {
        	Interface::get()->logInfo("Adding hook at function CCTouch::getLocationInView", Severity::Debug);
            Interface::get()->addHook("CCTouch::getLocationInView", (void*)temp_name_find_better::address530(), (void*)addresser::getNonVirtual(derivedAddress530));
        }

    	using baseType531 = temp_name_find_better::ret531(CCTouch::*)() const ;
		constexpr auto baseAddress531 = (baseType531)(&CCTouch::getPreviousLocationInView);
		using derivedType531 = temp_name_find_better::ret531(D<baseAddress531, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress531 = (derivedType531)(&D<baseAddress531, UUID>::getPreviousLocationInView);
        if (baseAddress531 != derivedAddress531) {
        	Interface::get()->logInfo("Adding hook at function CCTouch::getPreviousLocationInView", Severity::Debug);
            Interface::get()->addHook("CCTouch::getPreviousLocationInView", (void*)temp_name_find_better::address531(), (void*)addresser::getNonVirtual(derivedAddress531));
        }

    	using baseType532 = temp_name_find_better::ret532(CCTouch::*)() const ;
		constexpr auto baseAddress532 = (baseType532)(&CCTouch::getLocation);
		using derivedType532 = temp_name_find_better::ret532(D<baseAddress532, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress532 = (derivedType532)(&D<baseAddress532, UUID>::getLocation);
        if (baseAddress532 != derivedAddress532) {
        	Interface::get()->logInfo("Adding hook at function CCTouch::getLocation", Severity::Debug);
            Interface::get()->addHook("CCTouch::getLocation", (void*)temp_name_find_better::address532(), (void*)addresser::getNonVirtual(derivedAddress532));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTouchDispatcher : cocos2d::CCTouchDispatcher, ModifierBase {
    $CCTouchDispatcher(const $CCTouchDispatcher& c) : CCTouchDispatcher(c) {}
    $CCTouchDispatcher() : $CCTouchDispatcher(*this) {}
    ~$CCTouchDispatcher() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTouchDispatcher);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType533 = temp_name_find_better::ret533(CCTouchDispatcher::*)(int) ;
		constexpr auto baseAddress533 = (baseType533)(&CCTouchDispatcher::decrementForcePrio);
		using derivedType533 = temp_name_find_better::ret533(D<baseAddress533, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress533 = (derivedType533)(&D<baseAddress533, UUID>::decrementForcePrio);
        if (baseAddress533 != derivedAddress533) {
        	Interface::get()->logInfo("Adding hook at function CCTouchDispatcher::decrementForcePrio", Severity::Debug);
            Interface::get()->addHook("CCTouchDispatcher::decrementForcePrio", (void*)temp_name_find_better::address533(), (void*)addresser::getNonVirtual(derivedAddress533));
        }

    	using baseType534 = temp_name_find_better::ret534(CCTouchDispatcher::*)(int) ;
		constexpr auto baseAddress534 = (baseType534)(&CCTouchDispatcher::incrementForcePrio);
		using derivedType534 = temp_name_find_better::ret534(D<baseAddress534, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress534 = (derivedType534)(&D<baseAddress534, UUID>::incrementForcePrio);
        if (baseAddress534 != derivedAddress534) {
        	Interface::get()->logInfo("Adding hook at function CCTouchDispatcher::incrementForcePrio", Severity::Debug);
            Interface::get()->addHook("CCTouchDispatcher::incrementForcePrio", (void*)temp_name_find_better::address534(), (void*)addresser::getNonVirtual(derivedAddress534));
        }

    	using baseType535 = temp_name_find_better::ret535(CCTouchDispatcher::*)(cocos2d::CCSet*, cocos2d::CCEvent*, unsigned int) ;
		constexpr auto baseAddress535 = (baseType535)(&CCTouchDispatcher::touches);
		using derivedType535 = temp_name_find_better::ret535(D<baseAddress535, UUID>::*)(cocos2d::CCSet*, cocos2d::CCEvent*, unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress535 = (derivedType535)(&D<baseAddress535, UUID>::touches);
        if (baseAddress535 != derivedAddress535) {
        	Interface::get()->logInfo("Adding hook at function CCTouchDispatcher::touches", Severity::Debug);
            Interface::get()->addHook("CCTouchDispatcher::touches", (void*)temp_name_find_better::address535(), (void*)addresser::getNonVirtual(derivedAddress535));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTouchHandler : cocos2d::CCTouchHandler, ModifierBase {
    $CCTouchHandler(const $CCTouchHandler& c) : CCTouchHandler(c) {}
    $CCTouchHandler() : $CCTouchHandler(*this) {}
    ~$CCTouchHandler() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTouchHandler);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType536 = temp_name_find_better::ret536(CCTouchHandler::*)(cocos2d::CCTouchDelegate*, int) ;
		constexpr auto baseAddress536 = (baseType536)(&CCTouchHandler::initWithDelegate);
		using derivedType536 = temp_name_find_better::ret536(D<baseAddress536, UUID>::*)(cocos2d::CCTouchDelegate*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress536 = (derivedType536)(&D<baseAddress536, UUID>::initWithDelegate);
        if (baseAddress536 != derivedAddress536) {
        	Interface::get()->logInfo("Adding hook at function CCTouchHandler::initWithDelegate", Severity::Debug);
            Interface::get()->addHook("CCTouchHandler::initWithDelegate", (void*)temp_name_find_better::address536(), (void*)addresser::getVirtual(derivedAddress536));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTransitionFade : cocos2d::CCTransitionFade, ModifierBase {
    $CCTransitionFade(const $CCTransitionFade& c) : CCTransitionFade(c) {}
    $CCTransitionFade() : $CCTransitionFade(*this) {}
    ~$CCTransitionFade() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTransitionFade);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType538 = temp_name_find_better::ret538(*)(float, cocos2d::CCScene*);
		constexpr auto baseAddress538 = (baseType538)(&CCTransitionFade::create);
		using derivedType538 = temp_name_find_better::ret538(*)(float, cocos2d::CCScene*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress538 = (derivedType538)(&D<baseAddress538, UUID>::create);
        if (baseAddress538 != derivedAddress538) {
        	Interface::get()->logInfo("Adding hook at function CCTransitionFade::create", Severity::Debug);
            Interface::get()->addHook("CCTransitionFade::create", (void*)temp_name_find_better::address538(), (void*)addresser::getNonVirtual(derivedAddress538));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameLevelManager : GameLevelManager, ModifierBase {
    $GameLevelManager(const $GameLevelManager& c) : GameLevelManager(c) {}
    $GameLevelManager() : $GameLevelManager(*this) {}
    ~$GameLevelManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameLevelManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1270 = temp_name_find_better::ret1270(GameLevelManager::*)() ;
		constexpr auto baseAddress1270 = (baseType1270)(&GameLevelManager::createNewLevel);
		using derivedType1270 = temp_name_find_better::ret1270(D<baseAddress1270, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1270 = (derivedType1270)(&D<baseAddress1270, UUID>::createNewLevel);
        if (baseAddress1270 != derivedAddress1270) {
        	Interface::get()->logInfo("Adding hook at function GameLevelManager::createNewLevel", Severity::Debug);
            Interface::get()->addHook("GameLevelManager::createNewLevel", (void*)temp_name_find_better::address1270(), (void*)addresser::getNonVirtual(derivedAddress1270));
        }

		using baseType1271 = temp_name_find_better::ret1271(*)();
		constexpr auto baseAddress1271 = (baseType1271)(&GameLevelManager::sharedState);
		using derivedType1271 = temp_name_find_better::ret1271(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1271 = (derivedType1271)(&D<baseAddress1271, UUID>::sharedState);
        if (baseAddress1271 != derivedAddress1271) {
        	Interface::get()->logInfo("Adding hook at function GameLevelManager::sharedState", Severity::Debug);
            Interface::get()->addHook("GameLevelManager::sharedState", (void*)temp_name_find_better::address1271(), (void*)addresser::getNonVirtual(derivedAddress1271));
        }

    	using baseType1277 = temp_name_find_better::ret1277(GameLevelManager::*)(int, bool) ;
		constexpr auto baseAddress1277 = (baseType1277)(&GameLevelManager::getMainLevel);
		using derivedType1277 = temp_name_find_better::ret1277(D<baseAddress1277, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1277 = (derivedType1277)(&D<baseAddress1277, UUID>::getMainLevel);
        if (baseAddress1277 != derivedAddress1277) {
        	Interface::get()->logInfo("Adding hook at function GameLevelManager::getMainLevel", Severity::Debug);
            Interface::get()->addHook("GameLevelManager::getMainLevel", (void*)temp_name_find_better::address1277(), (void*)addresser::getNonVirtual(derivedAddress1277));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCControlColourPicker : cocos2d::extension::CCControlColourPicker, ModifierBase {
    $CCControlColourPicker(const $CCControlColourPicker& c) : CCControlColourPicker(c) {}
    $CCControlColourPicker() : $CCControlColourPicker(*this) {}
    ~$CCControlColourPicker() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCControlColourPicker);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType539 = temp_name_find_better::ret539(CCControlColourPicker::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress539 = (baseType539)(&CCControlColourPicker::setColorValue);
		using derivedType539 = temp_name_find_better::ret539(D<baseAddress539, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress539 = (derivedType539)(&D<baseAddress539, UUID>::setColorValue);
        if (baseAddress539 != derivedAddress539) {
        	Interface::get()->logInfo("Adding hook at function CCControlColourPicker::setColorValue", Severity::Debug);
            Interface::get()->addHook("CCControlColourPicker::setColorValue", (void*)temp_name_find_better::address539(), (void*)addresser::getNonVirtual(derivedAddress539));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCControlUtils : cocos2d::extension::CCControlUtils, ModifierBase {
    $CCControlUtils(const $CCControlUtils& c) : CCControlUtils(c) {}
    $CCControlUtils() : $CCControlUtils(*this) {}
    ~$CCControlUtils() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCControlUtils);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType540 = temp_name_find_better::ret540(*)(cocos2d::extension::RGBA);
		constexpr auto baseAddress540 = (baseType540)(&CCControlUtils::HSVfromRGB);
		using derivedType540 = temp_name_find_better::ret540(*)(cocos2d::extension::RGBA);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress540 = (derivedType540)(&D<baseAddress540, UUID>::HSVfromRGB);
        if (baseAddress540 != derivedAddress540) {
        	Interface::get()->logInfo("Adding hook at function CCControlUtils::HSVfromRGB", Severity::Debug);
            Interface::get()->addHook("CCControlUtils::HSVfromRGB", (void*)temp_name_find_better::address540(), (void*)addresser::getNonVirtual(derivedAddress540));
        }

		using baseType541 = temp_name_find_better::ret541(*)(cocos2d::extension::HSV);
		constexpr auto baseAddress541 = (baseType541)(&CCControlUtils::RGBfromHSV);
		using derivedType541 = temp_name_find_better::ret541(*)(cocos2d::extension::HSV);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress541 = (derivedType541)(&D<baseAddress541, UUID>::RGBfromHSV);
        if (baseAddress541 != derivedAddress541) {
        	Interface::get()->logInfo("Adding hook at function CCControlUtils::RGBfromHSV", Severity::Debug);
            Interface::get()->addHook("CCControlUtils::RGBfromHSV", (void*)temp_name_find_better::address541(), (void*)addresser::getNonVirtual(derivedAddress541));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetIDLayer : SetIDLayer, ModifierBase {
    $SetIDLayer(const $SetIDLayer& c) : SetIDLayer(c) {}
    $SetIDLayer() : $SetIDLayer(*this) {}
    ~$SetIDLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetIDLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CustomSongCell : CustomSongCell, ModifierBase {
    $CustomSongCell(const $CustomSongCell& c) : CustomSongCell(c) {}
    $CustomSongCell() : $CustomSongCell(*this) {}
    ~$CustomSongCell() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CustomSongCell);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScale9Sprite : cocos2d::extension::CCScale9Sprite, ModifierBase {
    $CCScale9Sprite(const $CCScale9Sprite& c) : CCScale9Sprite(c) {}
    $CCScale9Sprite() : $CCScale9Sprite(*this) {}
    ~$CCScale9Sprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScale9Sprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType543 = temp_name_find_better::ret543(*)(char const*);
		constexpr auto baseAddress543 = (baseType543)(&CCScale9Sprite::create);
		using derivedType543 = temp_name_find_better::ret543(*)(char const*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress543 = (derivedType543)(&D<baseAddress543, UUID>::create);
        if (baseAddress543 != derivedAddress543) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::create", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::create", (void*)temp_name_find_better::address543(), (void*)addresser::getNonVirtual(derivedAddress543));
        }

		using baseType544 = temp_name_find_better::ret544(*)(char const*, cocos2d::CCRect);
		constexpr auto baseAddress544 = (baseType544)(&CCScale9Sprite::create);
		using derivedType544 = temp_name_find_better::ret544(*)(char const*, cocos2d::CCRect);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress544 = (derivedType544)(&D<baseAddress544, UUID>::create);
        if (baseAddress544 != derivedAddress544) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::create", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::create", (void*)temp_name_find_better::address544(), (void*)addresser::getNonVirtual(derivedAddress544));
        }

    	using baseType546 = temp_name_find_better::ret546(CCScale9Sprite::*)() ;
		constexpr auto baseAddress546 = (baseType546)(&CCScale9Sprite::init);
		using derivedType546 = temp_name_find_better::ret546(D<baseAddress546, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress546 = (derivedType546)(&D<baseAddress546, UUID>::init);
        if (baseAddress546 != derivedAddress546) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::init", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::init", (void*)temp_name_find_better::address546(), (void*)addresser::getVirtual(derivedAddress546));
        }

    	using baseType547 = temp_name_find_better::ret547(CCScale9Sprite::*)(cocos2d::CCSize const&) ;
		constexpr auto baseAddress547 = (baseType547)(&CCScale9Sprite::setContentSize);
		using derivedType547 = temp_name_find_better::ret547(D<baseAddress547, UUID>::*)(cocos2d::CCSize const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress547 = (derivedType547)(&D<baseAddress547, UUID>::setContentSize);
        if (baseAddress547 != derivedAddress547) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setContentSize", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setContentSize", (void*)temp_name_find_better::address547(), (void*)addresser::getVirtual(derivedAddress547));
        }

    	using baseType548 = temp_name_find_better::ret548(CCScale9Sprite::*)() ;
		constexpr auto baseAddress548 = (baseType548)(&CCScale9Sprite::visit);
		using derivedType548 = temp_name_find_better::ret548(D<baseAddress548, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress548 = (derivedType548)(&D<baseAddress548, UUID>::visit);
        if (baseAddress548 != derivedAddress548) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::visit", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::visit", (void*)temp_name_find_better::address548(), (void*)addresser::getVirtual(derivedAddress548));
        }

    	using baseType549 = temp_name_find_better::ret549(CCScale9Sprite::*)() ;
		constexpr auto baseAddress549 = (baseType549)(&CCScale9Sprite::getOpacity);
		using derivedType549 = temp_name_find_better::ret549(D<baseAddress549, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress549 = (derivedType549)(&D<baseAddress549, UUID>::getOpacity);
        if (baseAddress549 != derivedAddress549) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getOpacity", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getOpacity", (void*)temp_name_find_better::address549(), (void*)addresser::getVirtual(derivedAddress549));
        }

    	using baseType550 = temp_name_find_better::ret550(CCScale9Sprite::*)(unsigned char) ;
		constexpr auto baseAddress550 = (baseType550)(&CCScale9Sprite::setOpacity);
		using derivedType550 = temp_name_find_better::ret550(D<baseAddress550, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress550 = (derivedType550)(&D<baseAddress550, UUID>::setOpacity);
        if (baseAddress550 != derivedAddress550) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setOpacity", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setOpacity", (void*)temp_name_find_better::address550(), (void*)addresser::getVirtual(derivedAddress550));
        }

    	using baseType551 = temp_name_find_better::ret551(CCScale9Sprite::*)(unsigned char) ;
		constexpr auto baseAddress551 = (baseType551)(&CCScale9Sprite::updateDisplayedOpacity);
		using derivedType551 = temp_name_find_better::ret551(D<baseAddress551, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress551 = (derivedType551)(&D<baseAddress551, UUID>::updateDisplayedOpacity);
        if (baseAddress551 != derivedAddress551) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::updateDisplayedOpacity", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::updateDisplayedOpacity", (void*)temp_name_find_better::address551(), (void*)addresser::getVirtual(derivedAddress551));
        }

    	using baseType552 = temp_name_find_better::ret552(CCScale9Sprite::*)() ;
		constexpr auto baseAddress552 = (baseType552)(&CCScale9Sprite::getColor);
		using derivedType552 = temp_name_find_better::ret552(D<baseAddress552, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress552 = (derivedType552)(&D<baseAddress552, UUID>::getColor);
        if (baseAddress552 != derivedAddress552) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getColor", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getColor", (void*)temp_name_find_better::address552(), (void*)addresser::getVirtual(derivedAddress552));
        }

    	using baseType553 = temp_name_find_better::ret553(CCScale9Sprite::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress553 = (baseType553)(&CCScale9Sprite::setColor);
		using derivedType553 = temp_name_find_better::ret553(D<baseAddress553, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress553 = (derivedType553)(&D<baseAddress553, UUID>::setColor);
        if (baseAddress553 != derivedAddress553) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setColor", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setColor", (void*)temp_name_find_better::address553(), (void*)addresser::getVirtual(derivedAddress553));
        }

    	using baseType554 = temp_name_find_better::ret554(CCScale9Sprite::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress554 = (baseType554)(&CCScale9Sprite::updateDisplayedColor);
		using derivedType554 = temp_name_find_better::ret554(D<baseAddress554, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress554 = (derivedType554)(&D<baseAddress554, UUID>::updateDisplayedColor);
        if (baseAddress554 != derivedAddress554) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::updateDisplayedColor", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::updateDisplayedColor", (void*)temp_name_find_better::address554(), (void*)addresser::getVirtual(derivedAddress554));
        }

    	using baseType555 = temp_name_find_better::ret555(CCScale9Sprite::*)(bool) ;
		constexpr auto baseAddress555 = (baseType555)(&CCScale9Sprite::setOpacityModifyRGB);
		using derivedType555 = temp_name_find_better::ret555(D<baseAddress555, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress555 = (derivedType555)(&D<baseAddress555, UUID>::setOpacityModifyRGB);
        if (baseAddress555 != derivedAddress555) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setOpacityModifyRGB", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setOpacityModifyRGB", (void*)temp_name_find_better::address555(), (void*)addresser::getVirtual(derivedAddress555));
        }

    	using baseType556 = temp_name_find_better::ret556(CCScale9Sprite::*)() ;
		constexpr auto baseAddress556 = (baseType556)(&CCScale9Sprite::isOpacityModifyRGB);
		using derivedType556 = temp_name_find_better::ret556(D<baseAddress556, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress556 = (derivedType556)(&D<baseAddress556, UUID>::isOpacityModifyRGB);
        if (baseAddress556 != derivedAddress556) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::isOpacityModifyRGB", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::isOpacityModifyRGB", (void*)temp_name_find_better::address556(), (void*)addresser::getVirtual(derivedAddress556));
        }

    	using baseType557 = temp_name_find_better::ret557(CCScale9Sprite::*)() ;
		constexpr auto baseAddress557 = (baseType557)(&CCScale9Sprite::getPreferredSize);
		using derivedType557 = temp_name_find_better::ret557(D<baseAddress557, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress557 = (derivedType557)(&D<baseAddress557, UUID>::getPreferredSize);
        if (baseAddress557 != derivedAddress557) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getPreferredSize", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getPreferredSize", (void*)temp_name_find_better::address557(), (void*)addresser::getVirtual(derivedAddress557));
        }

    	using baseType558 = temp_name_find_better::ret558(CCScale9Sprite::*)(cocos2d::CCSize) ;
		constexpr auto baseAddress558 = (baseType558)(&CCScale9Sprite::setPreferredSize);
		using derivedType558 = temp_name_find_better::ret558(D<baseAddress558, UUID>::*)(cocos2d::CCSize) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress558 = (derivedType558)(&D<baseAddress558, UUID>::setPreferredSize);
        if (baseAddress558 != derivedAddress558) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setPreferredSize", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setPreferredSize", (void*)temp_name_find_better::address558(), (void*)addresser::getVirtual(derivedAddress558));
        }

    	using baseType559 = temp_name_find_better::ret559(CCScale9Sprite::*)() ;
		constexpr auto baseAddress559 = (baseType559)(&CCScale9Sprite::getCapInsets);
		using derivedType559 = temp_name_find_better::ret559(D<baseAddress559, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress559 = (derivedType559)(&D<baseAddress559, UUID>::getCapInsets);
        if (baseAddress559 != derivedAddress559) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getCapInsets", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getCapInsets", (void*)temp_name_find_better::address559(), (void*)addresser::getVirtual(derivedAddress559));
        }

    	using baseType560 = temp_name_find_better::ret560(CCScale9Sprite::*)(cocos2d::CCRect) ;
		constexpr auto baseAddress560 = (baseType560)(&CCScale9Sprite::setCapInsets);
		using derivedType560 = temp_name_find_better::ret560(D<baseAddress560, UUID>::*)(cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress560 = (derivedType560)(&D<baseAddress560, UUID>::setCapInsets);
        if (baseAddress560 != derivedAddress560) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setCapInsets", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setCapInsets", (void*)temp_name_find_better::address560(), (void*)addresser::getVirtual(derivedAddress560));
        }

    	using baseType561 = temp_name_find_better::ret561(CCScale9Sprite::*)() ;
		constexpr auto baseAddress561 = (baseType561)(&CCScale9Sprite::getInsetLeft);
		using derivedType561 = temp_name_find_better::ret561(D<baseAddress561, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress561 = (derivedType561)(&D<baseAddress561, UUID>::getInsetLeft);
        if (baseAddress561 != derivedAddress561) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getInsetLeft", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getInsetLeft", (void*)temp_name_find_better::address561(), (void*)addresser::getVirtual(derivedAddress561));
        }

    	using baseType562 = temp_name_find_better::ret562(CCScale9Sprite::*)(float) ;
		constexpr auto baseAddress562 = (baseType562)(&CCScale9Sprite::setInsetLeft);
		using derivedType562 = temp_name_find_better::ret562(D<baseAddress562, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress562 = (derivedType562)(&D<baseAddress562, UUID>::setInsetLeft);
        if (baseAddress562 != derivedAddress562) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setInsetLeft", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setInsetLeft", (void*)temp_name_find_better::address562(), (void*)addresser::getVirtual(derivedAddress562));
        }

    	using baseType563 = temp_name_find_better::ret563(CCScale9Sprite::*)() ;
		constexpr auto baseAddress563 = (baseType563)(&CCScale9Sprite::getInsetTop);
		using derivedType563 = temp_name_find_better::ret563(D<baseAddress563, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress563 = (derivedType563)(&D<baseAddress563, UUID>::getInsetTop);
        if (baseAddress563 != derivedAddress563) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getInsetTop", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getInsetTop", (void*)temp_name_find_better::address563(), (void*)addresser::getVirtual(derivedAddress563));
        }

    	using baseType564 = temp_name_find_better::ret564(CCScale9Sprite::*)(float) ;
		constexpr auto baseAddress564 = (baseType564)(&CCScale9Sprite::setInsetTop);
		using derivedType564 = temp_name_find_better::ret564(D<baseAddress564, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress564 = (derivedType564)(&D<baseAddress564, UUID>::setInsetTop);
        if (baseAddress564 != derivedAddress564) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setInsetTop", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setInsetTop", (void*)temp_name_find_better::address564(), (void*)addresser::getVirtual(derivedAddress564));
        }

    	using baseType565 = temp_name_find_better::ret565(CCScale9Sprite::*)() ;
		constexpr auto baseAddress565 = (baseType565)(&CCScale9Sprite::getInsetRight);
		using derivedType565 = temp_name_find_better::ret565(D<baseAddress565, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress565 = (derivedType565)(&D<baseAddress565, UUID>::getInsetRight);
        if (baseAddress565 != derivedAddress565) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getInsetRight", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getInsetRight", (void*)temp_name_find_better::address565(), (void*)addresser::getVirtual(derivedAddress565));
        }

    	using baseType566 = temp_name_find_better::ret566(CCScale9Sprite::*)(float) ;
		constexpr auto baseAddress566 = (baseType566)(&CCScale9Sprite::setInsetRight);
		using derivedType566 = temp_name_find_better::ret566(D<baseAddress566, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress566 = (derivedType566)(&D<baseAddress566, UUID>::setInsetRight);
        if (baseAddress566 != derivedAddress566) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setInsetRight", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setInsetRight", (void*)temp_name_find_better::address566(), (void*)addresser::getVirtual(derivedAddress566));
        }

    	using baseType567 = temp_name_find_better::ret567(CCScale9Sprite::*)() ;
		constexpr auto baseAddress567 = (baseType567)(&CCScale9Sprite::getInsetBottom);
		using derivedType567 = temp_name_find_better::ret567(D<baseAddress567, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress567 = (derivedType567)(&D<baseAddress567, UUID>::getInsetBottom);
        if (baseAddress567 != derivedAddress567) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::getInsetBottom", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::getInsetBottom", (void*)temp_name_find_better::address567(), (void*)addresser::getVirtual(derivedAddress567));
        }

    	using baseType568 = temp_name_find_better::ret568(CCScale9Sprite::*)(float) ;
		constexpr auto baseAddress568 = (baseType568)(&CCScale9Sprite::setInsetBottom);
		using derivedType568 = temp_name_find_better::ret568(D<baseAddress568, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress568 = (derivedType568)(&D<baseAddress568, UUID>::setInsetBottom);
        if (baseAddress568 != derivedAddress568) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setInsetBottom", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setInsetBottom", (void*)temp_name_find_better::address568(), (void*)addresser::getVirtual(derivedAddress568));
        }

    	using baseType569 = temp_name_find_better::ret569(CCScale9Sprite::*)(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect) ;
		constexpr auto baseAddress569 = (baseType569)(&CCScale9Sprite::initWithBatchNode);
		using derivedType569 = temp_name_find_better::ret569(D<baseAddress569, UUID>::*)(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress569 = (derivedType569)(&D<baseAddress569, UUID>::initWithBatchNode);
        if (baseAddress569 != derivedAddress569) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithBatchNode", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithBatchNode", (void*)temp_name_find_better::address569(), (void*)addresser::getVirtual(derivedAddress569));
        }

    	using baseType570 = temp_name_find_better::ret570(CCScale9Sprite::*)(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, cocos2d::CCRect) ;
		constexpr auto baseAddress570 = (baseType570)(&CCScale9Sprite::initWithBatchNode);
		using derivedType570 = temp_name_find_better::ret570(D<baseAddress570, UUID>::*)(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress570 = (derivedType570)(&D<baseAddress570, UUID>::initWithBatchNode);
        if (baseAddress570 != derivedAddress570) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithBatchNode", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithBatchNode", (void*)temp_name_find_better::address570(), (void*)addresser::getVirtual(derivedAddress570));
        }

    	using baseType571 = temp_name_find_better::ret571(CCScale9Sprite::*)(char const*, cocos2d::CCRect, cocos2d::CCRect) ;
		constexpr auto baseAddress571 = (baseType571)(&CCScale9Sprite::initWithFile);
		using derivedType571 = temp_name_find_better::ret571(D<baseAddress571, UUID>::*)(char const*, cocos2d::CCRect, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress571 = (derivedType571)(&D<baseAddress571, UUID>::initWithFile);
        if (baseAddress571 != derivedAddress571) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithFile", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithFile", (void*)temp_name_find_better::address571(), (void*)addresser::getVirtual(derivedAddress571));
        }

    	using baseType572 = temp_name_find_better::ret572(CCScale9Sprite::*)(char const*, cocos2d::CCRect) ;
		constexpr auto baseAddress572 = (baseType572)(&CCScale9Sprite::initWithFile);
		using derivedType572 = temp_name_find_better::ret572(D<baseAddress572, UUID>::*)(char const*, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress572 = (derivedType572)(&D<baseAddress572, UUID>::initWithFile);
        if (baseAddress572 != derivedAddress572) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithFile", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithFile", (void*)temp_name_find_better::address572(), (void*)addresser::getVirtual(derivedAddress572));
        }

    	using baseType573 = temp_name_find_better::ret573(CCScale9Sprite::*)(cocos2d::CCRect, char const*) ;
		constexpr auto baseAddress573 = (baseType573)(&CCScale9Sprite::initWithFile);
		using derivedType573 = temp_name_find_better::ret573(D<baseAddress573, UUID>::*)(cocos2d::CCRect, char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress573 = (derivedType573)(&D<baseAddress573, UUID>::initWithFile);
        if (baseAddress573 != derivedAddress573) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithFile", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithFile", (void*)temp_name_find_better::address573(), (void*)addresser::getVirtual(derivedAddress573));
        }

    	using baseType574 = temp_name_find_better::ret574(CCScale9Sprite::*)(char const*) ;
		constexpr auto baseAddress574 = (baseType574)(&CCScale9Sprite::initWithFile);
		using derivedType574 = temp_name_find_better::ret574(D<baseAddress574, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress574 = (derivedType574)(&D<baseAddress574, UUID>::initWithFile);
        if (baseAddress574 != derivedAddress574) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithFile", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithFile", (void*)temp_name_find_better::address574(), (void*)addresser::getVirtual(derivedAddress574));
        }

    	using baseType575 = temp_name_find_better::ret575(CCScale9Sprite::*)(cocos2d::CCSpriteFrame*, cocos2d::CCRect) ;
		constexpr auto baseAddress575 = (baseType575)(&CCScale9Sprite::initWithSpriteFrame);
		using derivedType575 = temp_name_find_better::ret575(D<baseAddress575, UUID>::*)(cocos2d::CCSpriteFrame*, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress575 = (derivedType575)(&D<baseAddress575, UUID>::initWithSpriteFrame);
        if (baseAddress575 != derivedAddress575) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithSpriteFrame", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithSpriteFrame", (void*)temp_name_find_better::address575(), (void*)addresser::getVirtual(derivedAddress575));
        }

    	using baseType576 = temp_name_find_better::ret576(CCScale9Sprite::*)(cocos2d::CCSpriteFrame*) ;
		constexpr auto baseAddress576 = (baseType576)(&CCScale9Sprite::initWithSpriteFrame);
		using derivedType576 = temp_name_find_better::ret576(D<baseAddress576, UUID>::*)(cocos2d::CCSpriteFrame*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress576 = (derivedType576)(&D<baseAddress576, UUID>::initWithSpriteFrame);
        if (baseAddress576 != derivedAddress576) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithSpriteFrame", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithSpriteFrame", (void*)temp_name_find_better::address576(), (void*)addresser::getVirtual(derivedAddress576));
        }

    	using baseType577 = temp_name_find_better::ret577(CCScale9Sprite::*)(char const*, cocos2d::CCRect) ;
		constexpr auto baseAddress577 = (baseType577)(&CCScale9Sprite::initWithSpriteFrameName);
		using derivedType577 = temp_name_find_better::ret577(D<baseAddress577, UUID>::*)(char const*, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress577 = (derivedType577)(&D<baseAddress577, UUID>::initWithSpriteFrameName);
        if (baseAddress577 != derivedAddress577) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithSpriteFrameName", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithSpriteFrameName", (void*)temp_name_find_better::address577(), (void*)addresser::getVirtual(derivedAddress577));
        }

    	using baseType578 = temp_name_find_better::ret578(CCScale9Sprite::*)(char const*) ;
		constexpr auto baseAddress578 = (baseType578)(&CCScale9Sprite::initWithSpriteFrameName);
		using derivedType578 = temp_name_find_better::ret578(D<baseAddress578, UUID>::*)(char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress578 = (derivedType578)(&D<baseAddress578, UUID>::initWithSpriteFrameName);
        if (baseAddress578 != derivedAddress578) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::initWithSpriteFrameName", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::initWithSpriteFrameName", (void*)temp_name_find_better::address578(), (void*)addresser::getVirtual(derivedAddress578));
        }

    	using baseType579 = temp_name_find_better::ret579(CCScale9Sprite::*)(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect) ;
		constexpr auto baseAddress579 = (baseType579)(&CCScale9Sprite::updateWithBatchNode);
		using derivedType579 = temp_name_find_better::ret579(D<baseAddress579, UUID>::*)(cocos2d::CCSpriteBatchNode*, cocos2d::CCRect, bool, cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress579 = (derivedType579)(&D<baseAddress579, UUID>::updateWithBatchNode);
        if (baseAddress579 != derivedAddress579) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::updateWithBatchNode", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::updateWithBatchNode", (void*)temp_name_find_better::address579(), (void*)addresser::getVirtual(derivedAddress579));
        }

    	using baseType580 = temp_name_find_better::ret580(CCScale9Sprite::*)(cocos2d::CCSpriteFrame*) ;
		constexpr auto baseAddress580 = (baseType580)(&CCScale9Sprite::setSpriteFrame);
		using derivedType580 = temp_name_find_better::ret580(D<baseAddress580, UUID>::*)(cocos2d::CCSpriteFrame*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress580 = (derivedType580)(&D<baseAddress580, UUID>::setSpriteFrame);
        if (baseAddress580 != derivedAddress580) {
        	Interface::get()->logInfo("Adding hook at function CCScale9Sprite::setSpriteFrame", Severity::Debug);
            Interface::get()->addHook("CCScale9Sprite::setSpriteFrame", (void*)temp_name_find_better::address580(), (void*)addresser::getVirtual(derivedAddress580));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScrollView : cocos2d::extension::CCScrollView, ModifierBase {
    $CCScrollView(const $CCScrollView& c) : CCScrollView(c) {}
    $CCScrollView() : $CCScrollView(*this) {}
    ~$CCScrollView() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScrollView);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType583 = temp_name_find_better::ret583(CCScrollView::*)() ;
		constexpr auto baseAddress583 = (baseType583)(&CCScrollView::init);
		using derivedType583 = temp_name_find_better::ret583(D<baseAddress583, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress583 = (derivedType583)(&D<baseAddress583, UUID>::init);
        if (baseAddress583 != derivedAddress583) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::init", Severity::Debug);
            Interface::get()->addHook("CCScrollView::init", (void*)temp_name_find_better::address583(), (void*)addresser::getVirtual(derivedAddress583));
        }

    	using baseType584 = temp_name_find_better::ret584(CCScrollView::*)(cocos2d::CCSize const&) ;
		constexpr auto baseAddress584 = (baseType584)(&CCScrollView::setContentSize);
		using derivedType584 = temp_name_find_better::ret584(D<baseAddress584, UUID>::*)(cocos2d::CCSize const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress584 = (derivedType584)(&D<baseAddress584, UUID>::setContentSize);
        if (baseAddress584 != derivedAddress584) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::setContentSize", Severity::Debug);
            Interface::get()->addHook("CCScrollView::setContentSize", (void*)temp_name_find_better::address584(), (void*)addresser::getVirtual(derivedAddress584));
        }

    	using baseType585 = temp_name_find_better::ret585(CCScrollView::*)() const ;
		constexpr auto baseAddress585 = (baseType585)(&CCScrollView::getContentSize);
		using derivedType585 = temp_name_find_better::ret585(D<baseAddress585, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress585 = (derivedType585)(&D<baseAddress585, UUID>::getContentSize);
        if (baseAddress585 != derivedAddress585) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::getContentSize", Severity::Debug);
            Interface::get()->addHook("CCScrollView::getContentSize", (void*)temp_name_find_better::address585(), (void*)addresser::getVirtual(derivedAddress585));
        }

    	using baseType586 = temp_name_find_better::ret586(CCScrollView::*)(cocos2d::CCNode*) ;
		constexpr auto baseAddress586 = (baseType586)(&CCScrollView::addChild);
		using derivedType586 = temp_name_find_better::ret586(D<baseAddress586, UUID>::*)(cocos2d::CCNode*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress586 = (derivedType586)(&D<baseAddress586, UUID>::addChild);
        if (baseAddress586 != derivedAddress586) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::addChild", Severity::Debug);
            Interface::get()->addHook("CCScrollView::addChild", (void*)temp_name_find_better::address586(), (void*)addresser::getVirtual(derivedAddress586));
        }

    	using baseType587 = temp_name_find_better::ret587(CCScrollView::*)(cocos2d::CCNode*, int) ;
		constexpr auto baseAddress587 = (baseType587)(&CCScrollView::addChild);
		using derivedType587 = temp_name_find_better::ret587(D<baseAddress587, UUID>::*)(cocos2d::CCNode*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress587 = (derivedType587)(&D<baseAddress587, UUID>::addChild);
        if (baseAddress587 != derivedAddress587) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::addChild", Severity::Debug);
            Interface::get()->addHook("CCScrollView::addChild", (void*)temp_name_find_better::address587(), (void*)addresser::getVirtual(derivedAddress587));
        }

    	using baseType588 = temp_name_find_better::ret588(CCScrollView::*)(cocos2d::CCNode*, int, int) ;
		constexpr auto baseAddress588 = (baseType588)(&CCScrollView::addChild);
		using derivedType588 = temp_name_find_better::ret588(D<baseAddress588, UUID>::*)(cocos2d::CCNode*, int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress588 = (derivedType588)(&D<baseAddress588, UUID>::addChild);
        if (baseAddress588 != derivedAddress588) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::addChild", Severity::Debug);
            Interface::get()->addHook("CCScrollView::addChild", (void*)temp_name_find_better::address588(), (void*)addresser::getVirtual(derivedAddress588));
        }

    	using baseType589 = temp_name_find_better::ret589(CCScrollView::*)() ;
		constexpr auto baseAddress589 = (baseType589)(&CCScrollView::visit);
		using derivedType589 = temp_name_find_better::ret589(D<baseAddress589, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress589 = (derivedType589)(&D<baseAddress589, UUID>::visit);
        if (baseAddress589 != derivedAddress589) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::visit", Severity::Debug);
            Interface::get()->addHook("CCScrollView::visit", (void*)temp_name_find_better::address589(), (void*)addresser::getVirtual(derivedAddress589));
        }

    	using baseType590 = temp_name_find_better::ret590(CCScrollView::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress590 = (baseType590)(&CCScrollView::ccTouchBegan);
		using derivedType590 = temp_name_find_better::ret590(D<baseAddress590, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress590 = (derivedType590)(&D<baseAddress590, UUID>::ccTouchBegan);
        if (baseAddress590 != derivedAddress590) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::ccTouchBegan", Severity::Debug);
            Interface::get()->addHook("CCScrollView::ccTouchBegan", (void*)temp_name_find_better::address590(), (void*)addresser::getVirtual(derivedAddress590));
        }

    	using baseType591 = temp_name_find_better::ret591(CCScrollView::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress591 = (baseType591)(&CCScrollView::ccTouchMoved);
		using derivedType591 = temp_name_find_better::ret591(D<baseAddress591, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress591 = (derivedType591)(&D<baseAddress591, UUID>::ccTouchMoved);
        if (baseAddress591 != derivedAddress591) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::ccTouchMoved", Severity::Debug);
            Interface::get()->addHook("CCScrollView::ccTouchMoved", (void*)temp_name_find_better::address591(), (void*)addresser::getVirtual(derivedAddress591));
        }

    	using baseType592 = temp_name_find_better::ret592(CCScrollView::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress592 = (baseType592)(&CCScrollView::ccTouchEnded);
		using derivedType592 = temp_name_find_better::ret592(D<baseAddress592, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress592 = (derivedType592)(&D<baseAddress592, UUID>::ccTouchEnded);
        if (baseAddress592 != derivedAddress592) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::ccTouchEnded", Severity::Debug);
            Interface::get()->addHook("CCScrollView::ccTouchEnded", (void*)temp_name_find_better::address592(), (void*)addresser::getVirtual(derivedAddress592));
        }

    	using baseType593 = temp_name_find_better::ret593(CCScrollView::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress593 = (baseType593)(&CCScrollView::ccTouchCancelled);
		using derivedType593 = temp_name_find_better::ret593(D<baseAddress593, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress593 = (derivedType593)(&D<baseAddress593, UUID>::ccTouchCancelled);
        if (baseAddress593 != derivedAddress593) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::ccTouchCancelled", Severity::Debug);
            Interface::get()->addHook("CCScrollView::ccTouchCancelled", (void*)temp_name_find_better::address593(), (void*)addresser::getVirtual(derivedAddress593));
        }

    	using baseType594 = temp_name_find_better::ret594(CCScrollView::*)() ;
		constexpr auto baseAddress594 = (baseType594)(&CCScrollView::registerWithTouchDispatcher);
		using derivedType594 = temp_name_find_better::ret594(D<baseAddress594, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress594 = (derivedType594)(&D<baseAddress594, UUID>::registerWithTouchDispatcher);
        if (baseAddress594 != derivedAddress594) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCScrollView::registerWithTouchDispatcher", (void*)temp_name_find_better::address594(), (void*)addresser::getVirtual(derivedAddress594));
        }

    	using baseType595 = temp_name_find_better::ret595(CCScrollView::*)(bool) ;
		constexpr auto baseAddress595 = (baseType595)(&CCScrollView::setTouchEnabled);
		using derivedType595 = temp_name_find_better::ret595(D<baseAddress595, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress595 = (derivedType595)(&D<baseAddress595, UUID>::setTouchEnabled);
        if (baseAddress595 != derivedAddress595) {
        	Interface::get()->logInfo("Adding hook at function CCScrollView::setTouchEnabled", Severity::Debug);
            Interface::get()->addHook("CCScrollView::setTouchEnabled", (void*)temp_name_find_better::address595(), (void*)addresser::getVirtual(derivedAddress595));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AccountHelpLayer : AccountHelpLayer, ModifierBase {
    $AccountHelpLayer(const $AccountHelpLayer& c) : AccountHelpLayer(c) {}
    $AccountHelpLayer() : $AccountHelpLayer(*this) {}
    ~$AccountHelpLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AccountHelpLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AccountLayer : AccountLayer, ModifierBase {
    $AccountLayer(const $AccountLayer& c) : AccountLayer(c) {}
    $AccountLayer() : $AccountLayer(*this) {}
    ~$AccountLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AccountLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EndLevelLayer : EndLevelLayer, ModifierBase {
    $EndLevelLayer(const $EndLevelLayer& c) : EndLevelLayer(c) {}
    $EndLevelLayer() : $EndLevelLayer(*this) {}
    ~$EndLevelLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EndLevelLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AchievementBar : AchievementBar, ModifierBase {
    $AchievementBar(const $AchievementBar& c) : AchievementBar(c) {}
    $AchievementBar() : $AchievementBar(*this) {}
    ~$AchievementBar() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AchievementBar);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType631 = temp_name_find_better::ret631(*)(const char*, const char*, const char*, bool);
		constexpr auto baseAddress631 = (baseType631)(&AchievementBar::create);
		using derivedType631 = temp_name_find_better::ret631(*)(const char*, const char*, const char*, bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress631 = (derivedType631)(&D<baseAddress631, UUID>::create);
        if (baseAddress631 != derivedAddress631) {
        	Interface::get()->logInfo("Adding hook at function AchievementBar::create", Severity::Debug);
            Interface::get()->addHook("AchievementBar::create", (void*)temp_name_find_better::address631(), (void*)addresser::getNonVirtual(derivedAddress631));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AchievementCell : AchievementCell, ModifierBase {
    $AchievementCell(const $AchievementCell& c) : AchievementCell(c) {}
    $AchievementCell() : $AchievementCell(*this) {}
    ~$AchievementCell() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AchievementCell);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AchievementManager : AchievementManager, ModifierBase {
    $AchievementManager(const $AchievementManager& c) : AchievementManager(c) {}
    $AchievementManager() : $AchievementManager(*this) {}
    ~$AchievementManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AchievementManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType634 = temp_name_find_better::ret634(AchievementManager::*)() ;
		constexpr auto baseAddress634 = (baseType634)(&AchievementManager::sharedState);
		using derivedType634 = temp_name_find_better::ret634(D<baseAddress634, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress634 = (derivedType634)(&D<baseAddress634, UUID>::sharedState);
        if (baseAddress634 != derivedAddress634) {
        	Interface::get()->logInfo("Adding hook at function AchievementManager::sharedState", Severity::Debug);
            Interface::get()->addHook("AchievementManager::sharedState", (void*)temp_name_find_better::address634(), (void*)addresser::getNonVirtual(derivedAddress634));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AnimatedSpriteDelegate : AnimatedSpriteDelegate, ModifierBase {
    $AnimatedSpriteDelegate(const $AnimatedSpriteDelegate& c) : AnimatedSpriteDelegate(c) {}
    $AnimatedSpriteDelegate() : $AnimatedSpriteDelegate(*this) {}
    ~$AnimatedSpriteDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AnimatedSpriteDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AchievementNotifier : AchievementNotifier, ModifierBase {
    $AchievementNotifier(const $AchievementNotifier& c) : AchievementNotifier(c) {}
    $AchievementNotifier() : $AchievementNotifier(*this) {}
    ~$AchievementNotifier() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AchievementNotifier);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType636 = temp_name_find_better::ret636(AchievementNotifier::*)() ;
		constexpr auto baseAddress636 = (baseType636)(&AchievementNotifier::sharedState);
		using derivedType636 = temp_name_find_better::ret636(D<baseAddress636, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress636 = (derivedType636)(&D<baseAddress636, UUID>::sharedState);
        if (baseAddress636 != derivedAddress636) {
        	Interface::get()->logInfo("Adding hook at function AchievementNotifier::sharedState", Severity::Debug);
            Interface::get()->addHook("AchievementNotifier::sharedState", (void*)temp_name_find_better::address636(), (void*)addresser::getNonVirtual(derivedAddress636));
        }

    	using baseType638 = temp_name_find_better::ret638(AchievementNotifier::*)() ;
		constexpr auto baseAddress638 = (baseType638)(&AchievementNotifier::showNextAchievement);
		using derivedType638 = temp_name_find_better::ret638(D<baseAddress638, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress638 = (derivedType638)(&D<baseAddress638, UUID>::showNextAchievement);
        if (baseAddress638 != derivedAddress638) {
        	Interface::get()->logInfo("Adding hook at function AchievementNotifier::showNextAchievement", Severity::Debug);
            Interface::get()->addHook("AchievementNotifier::showNextAchievement", (void*)temp_name_find_better::address638(), (void*)addresser::getNonVirtual(derivedAddress638));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PlatformToolbox : PlatformToolbox, ModifierBase {
    $PlatformToolbox(const $PlatformToolbox& c) : PlatformToolbox(c) {}
    $PlatformToolbox() : $PlatformToolbox(*this) {}
    ~$PlatformToolbox() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PlatformToolbox);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AnimatedGameObject : AnimatedGameObject, ModifierBase {
    $AnimatedGameObject(const $AnimatedGameObject& c) : AnimatedGameObject(c) {}
    $AnimatedGameObject() : $AnimatedGameObject(*this) {}
    ~$AnimatedGameObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AnimatedGameObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AnimatedShopKeeper : AnimatedShopKeeper, ModifierBase {
    $AnimatedShopKeeper(const $AnimatedShopKeeper& c) : AnimatedShopKeeper(c) {}
    $AnimatedShopKeeper() : $AnimatedShopKeeper(*this) {}
    ~$AnimatedShopKeeper() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AnimatedShopKeeper);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType644 = temp_name_find_better::ret644(*)(ShopType);
		constexpr auto baseAddress644 = (baseType644)(&AnimatedShopKeeper::create);
		using derivedType644 = temp_name_find_better::ret644(*)(ShopType);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress644 = (derivedType644)(&D<baseAddress644, UUID>::create);
        if (baseAddress644 != derivedAddress644) {
        	Interface::get()->logInfo("Adding hook at function AnimatedShopKeeper::create", Severity::Debug);
            Interface::get()->addHook("AnimatedShopKeeper::create", (void*)temp_name_find_better::address644(), (void*)addresser::getNonVirtual(derivedAddress644));
        }

    	using baseType645 = temp_name_find_better::ret645(AnimatedShopKeeper::*)() ;
		constexpr auto baseAddress645 = (baseType645)(&AnimatedShopKeeper::startAnimating);
		using derivedType645 = temp_name_find_better::ret645(D<baseAddress645, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress645 = (derivedType645)(&D<baseAddress645, UUID>::startAnimating);
        if (baseAddress645 != derivedAddress645) {
        	Interface::get()->logInfo("Adding hook at function AnimatedShopKeeper::startAnimating", Severity::Debug);
            Interface::get()->addHook("AnimatedShopKeeper::startAnimating", (void*)temp_name_find_better::address645(), (void*)addresser::getNonVirtual(derivedAddress645));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AppDelegate : AppDelegate, ModifierBase {
    $AppDelegate(const $AppDelegate& c) : AppDelegate(c) {}
    $AppDelegate() : $AppDelegate(*this) {}
    ~$AppDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AppDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType647 = temp_name_find_better::ret647(AppDelegate::*)() ;
		constexpr auto baseAddress647 = (baseType647)(&AppDelegate::applicationDidFinishLaunching);
		using derivedType647 = temp_name_find_better::ret647(D<baseAddress647, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress647 = (derivedType647)(&D<baseAddress647, UUID>::applicationDidFinishLaunching);
        if (baseAddress647 != derivedAddress647) {
        	Interface::get()->logInfo("Adding hook at function AppDelegate::applicationDidFinishLaunching", Severity::Debug);
            Interface::get()->addHook("AppDelegate::applicationDidFinishLaunching", (void*)temp_name_find_better::address647(), (void*)addresser::getVirtual(derivedAddress647));
        }

    	using baseType648 = temp_name_find_better::ret648(AppDelegate::*)() ;
		constexpr auto baseAddress648 = (baseType648)(&AppDelegate::applicationDidEnterBackground);
		using derivedType648 = temp_name_find_better::ret648(D<baseAddress648, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress648 = (derivedType648)(&D<baseAddress648, UUID>::applicationDidEnterBackground);
        if (baseAddress648 != derivedAddress648) {
        	Interface::get()->logInfo("Adding hook at function AppDelegate::applicationDidEnterBackground", Severity::Debug);
            Interface::get()->addHook("AppDelegate::applicationDidEnterBackground", (void*)temp_name_find_better::address648(), (void*)addresser::getVirtual(derivedAddress648));
        }

    	using baseType649 = temp_name_find_better::ret649(AppDelegate::*)() ;
		constexpr auto baseAddress649 = (baseType649)(&AppDelegate::applicationWillEnterForeground);
		using derivedType649 = temp_name_find_better::ret649(D<baseAddress649, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress649 = (derivedType649)(&D<baseAddress649, UUID>::applicationWillEnterForeground);
        if (baseAddress649 != derivedAddress649) {
        	Interface::get()->logInfo("Adding hook at function AppDelegate::applicationWillEnterForeground", Severity::Debug);
            Interface::get()->addHook("AppDelegate::applicationWillEnterForeground", (void*)temp_name_find_better::address649(), (void*)addresser::getVirtual(derivedAddress649));
        }

    	using baseType650 = temp_name_find_better::ret650(AppDelegate::*)() ;
		constexpr auto baseAddress650 = (baseType650)(&AppDelegate::applicationWillBecomeActive);
		using derivedType650 = temp_name_find_better::ret650(D<baseAddress650, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress650 = (derivedType650)(&D<baseAddress650, UUID>::applicationWillBecomeActive);
        if (baseAddress650 != derivedAddress650) {
        	Interface::get()->logInfo("Adding hook at function AppDelegate::applicationWillBecomeActive", Severity::Debug);
            Interface::get()->addHook("AppDelegate::applicationWillBecomeActive", (void*)temp_name_find_better::address650(), (void*)addresser::getVirtual(derivedAddress650));
        }

    	using baseType651 = temp_name_find_better::ret651(AppDelegate::*)() ;
		constexpr auto baseAddress651 = (baseType651)(&AppDelegate::applicationWillResignActive);
		using derivedType651 = temp_name_find_better::ret651(D<baseAddress651, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress651 = (derivedType651)(&D<baseAddress651, UUID>::applicationWillResignActive);
        if (baseAddress651 != derivedAddress651) {
        	Interface::get()->logInfo("Adding hook at function AppDelegate::applicationWillResignActive", Severity::Debug);
            Interface::get()->addHook("AppDelegate::applicationWillResignActive", (void*)temp_name_find_better::address651(), (void*)addresser::getVirtual(derivedAddress651));
        }

    	using baseType652 = temp_name_find_better::ret652(AppDelegate::*)() ;
		constexpr auto baseAddress652 = (baseType652)(&AppDelegate::trySaveGame);
		using derivedType652 = temp_name_find_better::ret652(D<baseAddress652, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress652 = (derivedType652)(&D<baseAddress652, UUID>::trySaveGame);
        if (baseAddress652 != derivedAddress652) {
        	Interface::get()->logInfo("Adding hook at function AppDelegate::trySaveGame", Severity::Debug);
            Interface::get()->addHook("AppDelegate::trySaveGame", (void*)temp_name_find_better::address652(), (void*)addresser::getVirtual(derivedAddress652));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $AudioEffectsLayer : AudioEffectsLayer, ModifierBase {
    $AudioEffectsLayer(const $AudioEffectsLayer& c) : AudioEffectsLayer(c) {}
    $AudioEffectsLayer() : $AudioEffectsLayer(*this) {}
    ~$AudioEffectsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($AudioEffectsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MenuLayer : MenuLayer, ModifierBase {
    $MenuLayer(const $MenuLayer& c) : MenuLayer(c) {}
    $MenuLayer() : $MenuLayer(*this) {}
    ~$MenuLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MenuLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1622 = temp_name_find_better::ret1622(MenuLayer::*)() ;
		constexpr auto baseAddress1622 = (baseType1622)(&MenuLayer::init);
		using derivedType1622 = temp_name_find_better::ret1622(D<baseAddress1622, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1622 = (derivedType1622)(&D<baseAddress1622, UUID>::init);
        if (baseAddress1622 != derivedAddress1622) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::init", Severity::Debug);
            Interface::get()->addHook("MenuLayer::init", (void*)temp_name_find_better::address1622(), (void*)addresser::getVirtual(derivedAddress1622));
        }

    	using baseType1623 = temp_name_find_better::ret1623(MenuLayer::*)() ;
		constexpr auto baseAddress1623 = (baseType1623)(&MenuLayer::keyBackClicked);
		using derivedType1623 = temp_name_find_better::ret1623(D<baseAddress1623, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1623 = (derivedType1623)(&D<baseAddress1623, UUID>::keyBackClicked);
        if (baseAddress1623 != derivedAddress1623) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::keyBackClicked", Severity::Debug);
            Interface::get()->addHook("MenuLayer::keyBackClicked", (void*)temp_name_find_better::address1623(), (void*)addresser::getVirtual(derivedAddress1623));
        }

    	using baseType1624 = temp_name_find_better::ret1624(MenuLayer::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress1624 = (baseType1624)(&MenuLayer::keyDown);
		using derivedType1624 = temp_name_find_better::ret1624(D<baseAddress1624, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1624 = (derivedType1624)(&D<baseAddress1624, UUID>::keyDown);
        if (baseAddress1624 != derivedAddress1624) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::keyDown", Severity::Debug);
            Interface::get()->addHook("MenuLayer::keyDown", (void*)temp_name_find_better::address1624(), (void*)addresser::getVirtual(derivedAddress1624));
        }

    	using baseType1627 = temp_name_find_better::ret1627(MenuLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1627 = (baseType1627)(&MenuLayer::onMoreGames);
		using derivedType1627 = temp_name_find_better::ret1627(D<baseAddress1627, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1627 = (derivedType1627)(&D<baseAddress1627, UUID>::onMoreGames);
        if (baseAddress1627 != derivedAddress1627) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::onMoreGames", Severity::Debug);
            Interface::get()->addHook("MenuLayer::onMoreGames", (void*)temp_name_find_better::address1627(), (void*)addresser::getNonVirtual(derivedAddress1627));
        }

    	using baseType1628 = temp_name_find_better::ret1628(MenuLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1628 = (baseType1628)(&MenuLayer::onGarage);
		using derivedType1628 = temp_name_find_better::ret1628(D<baseAddress1628, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1628 = (derivedType1628)(&D<baseAddress1628, UUID>::onGarage);
        if (baseAddress1628 != derivedAddress1628) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::onGarage", Severity::Debug);
            Interface::get()->addHook("MenuLayer::onGarage", (void*)temp_name_find_better::address1628(), (void*)addresser::getNonVirtual(derivedAddress1628));
        }

		using baseType1630 = temp_name_find_better::ret1630(*)(bool);
		constexpr auto baseAddress1630 = (baseType1630)(&MenuLayer::scene);
		using derivedType1630 = temp_name_find_better::ret1630(*)(bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1630 = (derivedType1630)(&D<baseAddress1630, UUID>::scene);
        if (baseAddress1630 != derivedAddress1630) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::scene", Severity::Debug);
            Interface::get()->addHook("MenuLayer::scene", (void*)temp_name_find_better::address1630(), (void*)addresser::getNonVirtual(derivedAddress1630));
        }

    	using baseType1631 = temp_name_find_better::ret1631(MenuLayer::*)() ;
		constexpr auto baseAddress1631 = (baseType1631)(&MenuLayer::node);
		using derivedType1631 = temp_name_find_better::ret1631(D<baseAddress1631, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1631 = (derivedType1631)(&D<baseAddress1631, UUID>::node);
        if (baseAddress1631 != derivedAddress1631) {
        	Interface::get()->logInfo("Adding hook at function MenuLayer::node", Severity::Debug);
            Interface::get()->addHook("MenuLayer::node", (void*)temp_name_find_better::address1631(), (void*)addresser::getNonVirtual(derivedAddress1631));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $BoomListView : BoomListView, ModifierBase {
    $BoomListView(const $BoomListView& c) : BoomListView(c) {}
    $BoomListView() : $BoomListView(*this) {}
    ~$BoomListView() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($BoomListView);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType664 = temp_name_find_better::ret664(BoomListView::*)(cocos2d::CCArray*, float, float, int, BoomListType) ;
		constexpr auto baseAddress664 = (baseType664)(&BoomListView::init);
		using derivedType664 = temp_name_find_better::ret664(D<baseAddress664, UUID>::*)(cocos2d::CCArray*, float, float, int, BoomListType) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress664 = (derivedType664)(&D<baseAddress664, UUID>::init);
        if (baseAddress664 != derivedAddress664) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::init", Severity::Debug);
            Interface::get()->addHook("BoomListView::init", (void*)temp_name_find_better::address664(), (void*)addresser::getNonVirtual(derivedAddress664));
        }

    	using baseType666 = temp_name_find_better::ret666(BoomListView::*)() ;
		constexpr auto baseAddress666 = (baseType666)(&BoomListView::setupList);
		using derivedType666 = temp_name_find_better::ret666(D<baseAddress666, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress666 = (derivedType666)(&D<baseAddress666, UUID>::setupList);
        if (baseAddress666 != derivedAddress666) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::setupList", Severity::Debug);
            Interface::get()->addHook("BoomListView::setupList", (void*)temp_name_find_better::address666(), (void*)addresser::getVirtual(derivedAddress666));
        }

    	using baseType668 = temp_name_find_better::ret668(BoomListView::*)(CCIndexPath&, TableView*) ;
		constexpr auto baseAddress668 = (baseType668)(&BoomListView::cellHeightForRowAtIndexPath);
		using derivedType668 = temp_name_find_better::ret668(D<baseAddress668, UUID>::*)(CCIndexPath&, TableView*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress668 = (derivedType668)(&D<baseAddress668, UUID>::cellHeightForRowAtIndexPath);
        if (baseAddress668 != derivedAddress668) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::cellHeightForRowAtIndexPath", Severity::Debug);
            Interface::get()->addHook("BoomListView::cellHeightForRowAtIndexPath", (void*)temp_name_find_better::address668(), (void*)addresser::getVirtual(derivedAddress668));
        }

    	using baseType670 = temp_name_find_better::ret670(BoomListView::*)(unsigned int, TableView*) ;
		constexpr auto baseAddress670 = (baseType670)(&BoomListView::numberOfRowsInSection);
		using derivedType670 = temp_name_find_better::ret670(D<baseAddress670, UUID>::*)(unsigned int, TableView*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress670 = (derivedType670)(&D<baseAddress670, UUID>::numberOfRowsInSection);
        if (baseAddress670 != derivedAddress670) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::numberOfRowsInSection", Severity::Debug);
            Interface::get()->addHook("BoomListView::numberOfRowsInSection", (void*)temp_name_find_better::address670(), (void*)addresser::getVirtual(derivedAddress670));
        }

    	using baseType671 = temp_name_find_better::ret671(BoomListView::*)(TableView*) ;
		constexpr auto baseAddress671 = (baseType671)(&BoomListView::numberOfSectionsInTableView);
		using derivedType671 = temp_name_find_better::ret671(D<baseAddress671, UUID>::*)(TableView*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress671 = (derivedType671)(&D<baseAddress671, UUID>::numberOfSectionsInTableView);
        if (baseAddress671 != derivedAddress671) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::numberOfSectionsInTableView", Severity::Debug);
            Interface::get()->addHook("BoomListView::numberOfSectionsInTableView", (void*)temp_name_find_better::address671(), (void*)addresser::getVirtual(derivedAddress671));
        }

    	using baseType672 = temp_name_find_better::ret672(BoomListView::*)(CCIndexPath&, TableView*) ;
		constexpr auto baseAddress672 = (baseType672)(&BoomListView::cellForRowAtIndexPath);
		using derivedType672 = temp_name_find_better::ret672(D<baseAddress672, UUID>::*)(CCIndexPath&, TableView*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress672 = (derivedType672)(&D<baseAddress672, UUID>::cellForRowAtIndexPath);
        if (baseAddress672 != derivedAddress672) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::cellForRowAtIndexPath", Severity::Debug);
            Interface::get()->addHook("BoomListView::cellForRowAtIndexPath", (void*)temp_name_find_better::address672(), (void*)addresser::getVirtual(derivedAddress672));
        }

    	using baseType675 = temp_name_find_better::ret675(BoomListView::*)(const char*) ;
		constexpr auto baseAddress675 = (baseType675)(&BoomListView::getListCell);
		using derivedType675 = temp_name_find_better::ret675(D<baseAddress675, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress675 = (derivedType675)(&D<baseAddress675, UUID>::getListCell);
        if (baseAddress675 != derivedAddress675) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::getListCell", Severity::Debug);
            Interface::get()->addHook("BoomListView::getListCell", (void*)temp_name_find_better::address675(), (void*)addresser::getVirtual(derivedAddress675));
        }

    	using baseType676 = temp_name_find_better::ret676(BoomListView::*)(TableViewCell*, unsigned int) ;
		constexpr auto baseAddress676 = (baseType676)(&BoomListView::loadCell);
		using derivedType676 = temp_name_find_better::ret676(D<baseAddress676, UUID>::*)(TableViewCell*, unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress676 = (derivedType676)(&D<baseAddress676, UUID>::loadCell);
        if (baseAddress676 != derivedAddress676) {
        	Interface::get()->logInfo("Adding hook at function BoomListView::loadCell", Severity::Debug);
            Interface::get()->addHook("BoomListView::loadCell", (void*)temp_name_find_better::address676(), (void*)addresser::getVirtual(derivedAddress676));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $BoomScrollLayer : BoomScrollLayer, ModifierBase {
    $BoomScrollLayer(const $BoomScrollLayer& c) : BoomScrollLayer(c) {}
    $BoomScrollLayer() : $BoomScrollLayer(*this) {}
    ~$BoomScrollLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($BoomScrollLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType678 = temp_name_find_better::ret678(BoomScrollLayer::*)(int) ;
		constexpr auto baseAddress678 = (baseType678)(&BoomScrollLayer::instantMoveToPage);
		using derivedType678 = temp_name_find_better::ret678(D<baseAddress678, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress678 = (derivedType678)(&D<baseAddress678, UUID>::instantMoveToPage);
        if (baseAddress678 != derivedAddress678) {
        	Interface::get()->logInfo("Adding hook at function BoomScrollLayer::instantMoveToPage", Severity::Debug);
            Interface::get()->addHook("BoomScrollLayer::instantMoveToPage", (void*)temp_name_find_better::address678(), (void*)addresser::getNonVirtual(derivedAddress678));
        }

    	using baseType679 = temp_name_find_better::ret679(BoomScrollLayer::*)(int) ;
		constexpr auto baseAddress679 = (baseType679)(&BoomScrollLayer::moveToPage);
		using derivedType679 = temp_name_find_better::ret679(D<baseAddress679, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress679 = (derivedType679)(&D<baseAddress679, UUID>::moveToPage);
        if (baseAddress679 != derivedAddress679) {
        	Interface::get()->logInfo("Adding hook at function BoomScrollLayer::moveToPage", Severity::Debug);
            Interface::get()->addHook("BoomScrollLayer::moveToPage", (void*)temp_name_find_better::address679(), (void*)addresser::getNonVirtual(derivedAddress679));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ButtonSprite : ButtonSprite, ModifierBase {
    $ButtonSprite(const $ButtonSprite& c) : ButtonSprite(c) {}
    $ButtonSprite() : $ButtonSprite(*this) {}
    ~$ButtonSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ButtonSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType680 = temp_name_find_better::ret680(*)(const char*, int, int, float, bool, const char*, const char*, float);
		constexpr auto baseAddress680 = (baseType680)(&ButtonSprite::create);
		using derivedType680 = temp_name_find_better::ret680(*)(const char*, int, int, float, bool, const char*, const char*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress680 = (derivedType680)(&D<baseAddress680, UUID>::create);
        if (baseAddress680 != derivedAddress680) {
        	Interface::get()->logInfo("Adding hook at function ButtonSprite::create", Severity::Debug);
            Interface::get()->addHook("ButtonSprite::create", (void*)temp_name_find_better::address680(), (void*)addresser::getNonVirtual(derivedAddress680));
        }

    	using baseType683 = temp_name_find_better::ret683(ButtonSprite::*)(const char*) ;
		constexpr auto baseAddress683 = (baseType683)(&ButtonSprite::updateBGImage);
		using derivedType683 = temp_name_find_better::ret683(D<baseAddress683, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress683 = (derivedType683)(&D<baseAddress683, UUID>::updateBGImage);
        if (baseAddress683 != derivedAddress683) {
        	Interface::get()->logInfo("Adding hook at function ButtonSprite::updateBGImage", Severity::Debug);
            Interface::get()->addHook("ButtonSprite::updateBGImage", (void*)temp_name_find_better::address683(), (void*)addresser::getNonVirtual(derivedAddress683));
        }

    	using baseType685 = temp_name_find_better::ret685(ButtonSprite::*)(const char*) ;
		constexpr auto baseAddress685 = (baseType685)(&ButtonSprite::setString);
		using derivedType685 = temp_name_find_better::ret685(D<baseAddress685, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress685 = (derivedType685)(&D<baseAddress685, UUID>::setString);
        if (baseAddress685 != derivedAddress685) {
        	Interface::get()->logInfo("Adding hook at function ButtonSprite::setString", Severity::Debug);
            Interface::get()->addHook("ButtonSprite::setString", (void*)temp_name_find_better::address685(), (void*)addresser::getNonVirtual(derivedAddress685));
        }

    	using baseType686 = temp_name_find_better::ret686(ButtonSprite::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress686 = (baseType686)(&ButtonSprite::updateSpriteBGSize);
		using derivedType686 = temp_name_find_better::ret686(D<baseAddress686, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress686 = (derivedType686)(&D<baseAddress686, UUID>::updateSpriteBGSize);
        if (baseAddress686 != derivedAddress686) {
        	Interface::get()->logInfo("Adding hook at function ButtonSprite::updateSpriteBGSize", Severity::Debug);
            Interface::get()->addHook("ButtonSprite::updateSpriteBGSize", (void*)temp_name_find_better::address686(), (void*)addresser::getNonVirtual(derivedAddress686));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SongInfoObject : SongInfoObject, ModifierBase {
    $SongInfoObject(const $SongInfoObject& c) : SongInfoObject(c) {}
    $SongInfoObject() : $SongInfoObject(*this) {}
    ~$SongInfoObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SongInfoObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCAnimatedSprite : CCAnimatedSprite, ModifierBase {
    $CCAnimatedSprite(const $CCAnimatedSprite& c) : CCAnimatedSprite(c) {}
    $CCAnimatedSprite() : $CCAnimatedSprite(*this) {}
    ~$CCAnimatedSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCAnimatedSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType687 = temp_name_find_better::ret687(CCAnimatedSprite::*)(struct gd::string) ;
		constexpr auto baseAddress687 = (baseType687)(&CCAnimatedSprite::runAnimation);
		using derivedType687 = temp_name_find_better::ret687(D<baseAddress687, UUID>::*)(struct gd::string) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress687 = (derivedType687)(&D<baseAddress687, UUID>::runAnimation);
        if (baseAddress687 != derivedAddress687) {
        	Interface::get()->logInfo("Adding hook at function CCAnimatedSprite::runAnimation", Severity::Debug);
            Interface::get()->addHook("CCAnimatedSprite::runAnimation", (void*)temp_name_find_better::address687(), (void*)addresser::getNonVirtual(derivedAddress687));
        }

		using baseType689 = temp_name_find_better::ret689(*)(const char*);
		constexpr auto baseAddress689 = (baseType689)(&CCAnimatedSprite::create);
		using derivedType689 = temp_name_find_better::ret689(*)(const char*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress689 = (derivedType689)(&D<baseAddress689, UUID>::create);
        if (baseAddress689 != derivedAddress689) {
        	Interface::get()->logInfo("Adding hook at function CCAnimatedSprite::create", Severity::Debug);
            Interface::get()->addHook("CCAnimatedSprite::create", (void*)temp_name_find_better::address689(), (void*)addresser::getNonVirtual(derivedAddress689));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCCircleWave : CCCircleWave, ModifierBase {
    $CCCircleWave(const $CCCircleWave& c) : CCCircleWave(c) {}
    $CCCircleWave() : $CCCircleWave(*this) {}
    ~$CCCircleWave() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCCircleWave);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType703 = temp_name_find_better::ret703(*)(float, float, float, bool, bool);
		constexpr auto baseAddress703 = (baseType703)(&CCCircleWave::create);
		using derivedType703 = temp_name_find_better::ret703(*)(float, float, float, bool, bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress703 = (derivedType703)(&D<baseAddress703, UUID>::create);
        if (baseAddress703 != derivedAddress703) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::create", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::create", (void*)temp_name_find_better::address703(), (void*)addresser::getNonVirtual(derivedAddress703));
        }

    	using baseType705 = temp_name_find_better::ret705(CCCircleWave::*)(cocos2d::CCNode, bool) ;
		constexpr auto baseAddress705 = (baseType705)(&CCCircleWave::followObject);
		using derivedType705 = temp_name_find_better::ret705(D<baseAddress705, UUID>::*)(cocos2d::CCNode, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress705 = (derivedType705)(&D<baseAddress705, UUID>::followObject);
        if (baseAddress705 != derivedAddress705) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::followObject", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::followObject", (void*)temp_name_find_better::address705(), (void*)addresser::getNonVirtual(derivedAddress705));
        }

    	using baseType706 = temp_name_find_better::ret706(CCCircleWave::*)(float) ;
		constexpr auto baseAddress706 = (baseType706)(&CCCircleWave::updatePosition);
		using derivedType706 = temp_name_find_better::ret706(D<baseAddress706, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress706 = (derivedType706)(&D<baseAddress706, UUID>::updatePosition);
        if (baseAddress706 != derivedAddress706) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::updatePosition", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::updatePosition", (void*)temp_name_find_better::address706(), (void*)addresser::getNonVirtual(derivedAddress706));
        }

    	using baseType707 = temp_name_find_better::ret707(CCCircleWave::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress707 = (baseType707)(&CCCircleWave::setPosition);
		using derivedType707 = temp_name_find_better::ret707(D<baseAddress707, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress707 = (derivedType707)(&D<baseAddress707, UUID>::setPosition);
        if (baseAddress707 != derivedAddress707) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::setPosition", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::setPosition", (void*)temp_name_find_better::address707(), (void*)addresser::getNonVirtual(derivedAddress707));
        }

    	using baseType708 = temp_name_find_better::ret708(CCCircleWave::*)() ;
		constexpr auto baseAddress708 = (baseType708)(&CCCircleWave::removeMeAndCleanup);
		using derivedType708 = temp_name_find_better::ret708(D<baseAddress708, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress708 = (derivedType708)(&D<baseAddress708, UUID>::removeMeAndCleanup);
        if (baseAddress708 != derivedAddress708) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::removeMeAndCleanup", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::removeMeAndCleanup", (void*)temp_name_find_better::address708(), (void*)addresser::getNonVirtual(derivedAddress708));
        }

    	using baseType709 = temp_name_find_better::ret709(CCCircleWave::*)() ;
		constexpr auto baseAddress709 = (baseType709)(&CCCircleWave::draw);
		using derivedType709 = temp_name_find_better::ret709(D<baseAddress709, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress709 = (derivedType709)(&D<baseAddress709, UUID>::draw);
        if (baseAddress709 != derivedAddress709) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::draw", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::draw", (void*)temp_name_find_better::address709(), (void*)addresser::getNonVirtual(derivedAddress709));
        }

    	using baseType710 = temp_name_find_better::ret710(CCCircleWave::*)(float, const char*) ;
		constexpr auto baseAddress710 = (baseType710)(&CCCircleWave::updateTweenAction);
		using derivedType710 = temp_name_find_better::ret710(D<baseAddress710, UUID>::*)(float, const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress710 = (derivedType710)(&D<baseAddress710, UUID>::updateTweenAction);
        if (baseAddress710 != derivedAddress710) {
        	Interface::get()->logInfo("Adding hook at function CCCircleWave::updateTweenAction", Severity::Debug);
            Interface::get()->addHook("CCCircleWave::updateTweenAction", (void*)temp_name_find_better::address710(), (void*)addresser::getNonVirtual(derivedAddress710));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCContentLayer : CCContentLayer, ModifierBase {
    $CCContentLayer(const $CCContentLayer& c) : CCContentLayer(c) {}
    $CCContentLayer() : $CCContentLayer(*this) {}
    ~$CCContentLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCContentLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType712 = temp_name_find_better::ret712(*)(cocos2d::ccColor4B const&, float, float);
		constexpr auto baseAddress712 = (baseType712)(&CCContentLayer::create);
		using derivedType712 = temp_name_find_better::ret712(*)(cocos2d::ccColor4B const&, float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress712 = (derivedType712)(&D<baseAddress712, UUID>::create);
        if (baseAddress712 != derivedAddress712) {
        	Interface::get()->logInfo("Adding hook at function CCContentLayer::create", Severity::Debug);
            Interface::get()->addHook("CCContentLayer::create", (void*)temp_name_find_better::address712(), (void*)addresser::getNonVirtual(derivedAddress712));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCIndexPath : CCIndexPath, ModifierBase {
    $CCIndexPath(const $CCIndexPath& c) : CCIndexPath(c) {}
    $CCIndexPath() : $CCIndexPath(*this) {}
    ~$CCIndexPath() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCIndexPath);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType713 = temp_name_find_better::ret713(*)(unsigned int, int);
		constexpr auto baseAddress713 = (baseType713)(&CCIndexPath::create);
		using derivedType713 = temp_name_find_better::ret713(*)(unsigned int, int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress713 = (derivedType713)(&D<baseAddress713, UUID>::create);
        if (baseAddress713 != derivedAddress713) {
        	Interface::get()->logInfo("Adding hook at function CCIndexPath::create", Severity::Debug);
            Interface::get()->addHook("CCIndexPath::create", (void*)temp_name_find_better::address713(), (void*)addresser::getNonVirtual(derivedAddress713));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCLightFlash : CCLightFlash, ModifierBase {
    $CCLightFlash(const $CCLightFlash& c) : CCLightFlash(c) {}
    $CCLightFlash() : $CCLightFlash(*this) {}
    ~$CCLightFlash() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCLightFlash);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType715 = temp_name_find_better::ret715(CCLightFlash::*)(struct cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float) ;
		constexpr auto baseAddress715 = (baseType715)(&CCLightFlash::playEffect);
		using derivedType715 = temp_name_find_better::ret715(D<baseAddress715, UUID>::*)(struct cocos2d::CCPoint, cocos2d::_ccColor3B, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, bool, bool, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress715 = (derivedType715)(&D<baseAddress715, UUID>::playEffect);
        if (baseAddress715 != derivedAddress715) {
        	Interface::get()->logInfo("Adding hook at function CCLightFlash::playEffect", Severity::Debug);
            Interface::get()->addHook("CCLightFlash::playEffect", (void*)temp_name_find_better::address715(), (void*)addresser::getNonVirtual(derivedAddress715));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TextArea : TextArea, ModifierBase {
    $TextArea(const $TextArea& c) : TextArea(c) {}
    $TextArea() : $TextArea(*this) {}
    ~$TextArea() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TextArea);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address2079)(this);
    }
    static bool _apply() {

    	using baseType2079 = temp_name_find_better::ret2079($TextArea::*)() ;
		constexpr auto baseAddress2079 = (baseType2079)(&$TextArea::constructor);
		using derivedType2079 = temp_name_find_better::ret2079(D<baseAddress2079, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2079 = (derivedType2079)(&D<baseAddress2079, UUID>::constructor);
        if (baseAddress2079 != derivedAddress2079) {
        	Interface::get()->logInfo("Adding hook at function TextArea::constructor", Severity::Debug);
            Interface::get()->addHook("TextArea::constructor", (void*)temp_name_find_better::address2079(), (void*)addresser::getNonVirtual(derivedAddress2079));
        }

    	using baseType2082 = temp_name_find_better::ret2082(TextArea::*)(struct gd::string, char const*, float, float, struct cocos2d::CCPoint, float, bool) ;
		constexpr auto baseAddress2082 = (baseType2082)(&TextArea::init);
		using derivedType2082 = temp_name_find_better::ret2082(D<baseAddress2082, UUID>::*)(struct gd::string, char const*, float, float, struct cocos2d::CCPoint, float, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2082 = (derivedType2082)(&D<baseAddress2082, UUID>::init);
        if (baseAddress2082 != derivedAddress2082) {
        	Interface::get()->logInfo("Adding hook at function TextArea::init", Severity::Debug);
            Interface::get()->addHook("TextArea::init", (void*)temp_name_find_better::address2082(), (void*)addresser::getNonVirtual(derivedAddress2082));
        }

    	using baseType2084 = temp_name_find_better::ret2084(TextArea::*)(cocos2d::ccColor3B) ;
		constexpr auto baseAddress2084 = (baseType2084)(&TextArea::colorAllCharactersTo);
		using derivedType2084 = temp_name_find_better::ret2084(D<baseAddress2084, UUID>::*)(cocos2d::ccColor3B) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2084 = (derivedType2084)(&D<baseAddress2084, UUID>::colorAllCharactersTo);
        if (baseAddress2084 != derivedAddress2084) {
        	Interface::get()->logInfo("Adding hook at function TextArea::colorAllCharactersTo", Severity::Debug);
            Interface::get()->addHook("TextArea::colorAllCharactersTo", (void*)temp_name_find_better::address2084(), (void*)addresser::getNonVirtual(derivedAddress2084));
        }

    	using baseType2085 = temp_name_find_better::ret2085(TextArea::*)(gd::string) ;
		constexpr auto baseAddress2085 = (baseType2085)(&TextArea::setString);
		using derivedType2085 = temp_name_find_better::ret2085(D<baseAddress2085, UUID>::*)(gd::string) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2085 = (derivedType2085)(&D<baseAddress2085, UUID>::setString);
        if (baseAddress2085 != derivedAddress2085) {
        	Interface::get()->logInfo("Adding hook at function TextArea::setString", Severity::Debug);
            Interface::get()->addHook("TextArea::setString", (void*)temp_name_find_better::address2085(), (void*)addresser::getNonVirtual(derivedAddress2085));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $InheritanceNode : InheritanceNode, ModifierBase {
    $InheritanceNode(const $InheritanceNode& c) : InheritanceNode(c) {}
    $InheritanceNode() : $InheritanceNode(*this) {}
    ~$InheritanceNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($InheritanceNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCMoveCNode : CCMoveCNode, ModifierBase {
    $CCMoveCNode(const $CCMoveCNode& c) : CCMoveCNode(c) {}
    $CCMoveCNode() : $CCMoveCNode(*this) {}
    ~$CCMoveCNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCMoveCNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameToolbox : GameToolbox, ModifierBase {
    $GameToolbox(const $GameToolbox& c) : GameToolbox(c) {}
    $GameToolbox() : $GameToolbox(*this) {}
    ~$GameToolbox() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameToolbox);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1491 = temp_name_find_better::ret1491(*)(struct gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, struct cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, float, float, float, struct cocos2d::CCPoint, const char*, bool, int, cocos2d::CCArray*);
		constexpr auto baseAddress1491 = (baseType1491)(&GameToolbox::createToggleButton);
		using derivedType1491 = temp_name_find_better::ret1491(*)(struct gd::string, cocos2d::SEL_MenuHandler, bool, cocos2d::CCMenu*, struct cocos2d::CCPoint, cocos2d::CCNode*, cocos2d::CCNode*, float, float, float, struct cocos2d::CCPoint, const char*, bool, int, cocos2d::CCArray*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1491 = (derivedType1491)(&D<baseAddress1491, UUID>::createToggleButton);
        if (baseAddress1491 != derivedAddress1491) {
        	Interface::get()->logInfo("Adding hook at function GameToolbox::createToggleButton", Severity::Debug);
            Interface::get()->addHook("GameToolbox::createToggleButton", (void*)temp_name_find_better::address1491(), (void*)addresser::getNonVirtual(derivedAddress1491));
        }

		using baseType1492 = temp_name_find_better::ret1492(*)(cocos2d::ccColor3B*, cocos2d::ccColor3B*, cocos2d::ccHSVValue);
		constexpr auto baseAddress1492 = (baseType1492)(&GameToolbox::transformColor);
		using derivedType1492 = temp_name_find_better::ret1492(*)(cocos2d::ccColor3B*, cocos2d::ccColor3B*, cocos2d::ccHSVValue);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1492 = (derivedType1492)(&D<baseAddress1492, UUID>::transformColor);
        if (baseAddress1492 != derivedAddress1492) {
        	Interface::get()->logInfo("Adding hook at function GameToolbox::transformColor", Severity::Debug);
            Interface::get()->addHook("GameToolbox::transformColor", (void*)temp_name_find_better::address1492(), (void*)addresser::getNonVirtual(derivedAddress1492));
        }

		using baseType1493 = temp_name_find_better::ret1493(*)(cocos2d::CCArray*, bool, struct cocos2d::CCPoint, float);
		constexpr auto baseAddress1493 = (baseType1493)(&GameToolbox::alignItemsHorisontally);
		using derivedType1493 = temp_name_find_better::ret1493(*)(cocos2d::CCArray*, bool, struct cocos2d::CCPoint, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1493 = (derivedType1493)(&D<baseAddress1493, UUID>::alignItemsHorisontally);
        if (baseAddress1493 != derivedAddress1493) {
        	Interface::get()->logInfo("Adding hook at function GameToolbox::alignItemsHorisontally", Severity::Debug);
            Interface::get()->addHook("GameToolbox::alignItemsHorisontally", (void*)temp_name_find_better::address1493(), (void*)addresser::getNonVirtual(derivedAddress1493));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCNodeContainer : CCNodeContainer, ModifierBase {
    $CCNodeContainer(const $CCNodeContainer& c) : CCNodeContainer(c) {}
    $CCNodeContainer() : $CCNodeContainer(*this) {}
    ~$CCNodeContainer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCNodeContainer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType746 = temp_name_find_better::ret746(*)();
		constexpr auto baseAddress746 = (baseType746)(&CCNodeContainer::create);
		using derivedType746 = temp_name_find_better::ret746(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress746 = (derivedType746)(&D<baseAddress746, UUID>::create);
        if (baseAddress746 != derivedAddress746) {
        	Interface::get()->logInfo("Adding hook at function CCNodeContainer::create", Severity::Debug);
            Interface::get()->addHook("CCNodeContainer::create", (void*)temp_name_find_better::address746(), (void*)addresser::getNonVirtual(derivedAddress746));
        }

    	using baseType747 = temp_name_find_better::ret747(CCNodeContainer::*)() ;
		constexpr auto baseAddress747 = (baseType747)(&CCNodeContainer::init);
		using derivedType747 = temp_name_find_better::ret747(D<baseAddress747, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress747 = (derivedType747)(&D<baseAddress747, UUID>::init);
        if (baseAddress747 != derivedAddress747) {
        	Interface::get()->logInfo("Adding hook at function CCNodeContainer::init", Severity::Debug);
            Interface::get()->addHook("CCNodeContainer::init", (void*)temp_name_find_better::address747(), (void*)addresser::getVirtual(derivedAddress747));
        }

    	using baseType748 = temp_name_find_better::ret748(CCNodeContainer::*)() ;
		constexpr auto baseAddress748 = (baseType748)(&CCNodeContainer::visit);
		using derivedType748 = temp_name_find_better::ret748(D<baseAddress748, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress748 = (derivedType748)(&D<baseAddress748, UUID>::visit);
        if (baseAddress748 != derivedAddress748) {
        	Interface::get()->logInfo("Adding hook at function CCNodeContainer::visit", Severity::Debug);
            Interface::get()->addHook("CCNodeContainer::visit", (void*)temp_name_find_better::address748(), (void*)addresser::getNonVirtual(derivedAddress748));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScrollLayerExt : CCScrollLayerExt, ModifierBase {
    $CCScrollLayerExt(const $CCScrollLayerExt& c) : CCScrollLayerExt(c) {}
    $CCScrollLayerExt() : $CCScrollLayerExt(*this) {}
    ~$CCScrollLayerExt() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScrollLayerExt);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor(cocos2d::CCRect p0) {
        reinterpret_cast<void(*)(decltype(this), cocos2d::CCRect)>(temp_name_find_better::address763)(this, p0);
    }
    static bool _apply() {

    	using baseType753 = temp_name_find_better::ret753(CCScrollLayerExt::*)() ;
		constexpr auto baseAddress753 = (baseType753)(&CCScrollLayerExt::visit);
		using derivedType753 = temp_name_find_better::ret753(D<baseAddress753, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress753 = (derivedType753)(&D<baseAddress753, UUID>::visit);
        if (baseAddress753 != derivedAddress753) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::visit", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::visit", (void*)temp_name_find_better::address753(), (void*)addresser::getVirtual(derivedAddress753));
        }

    	using baseType754 = temp_name_find_better::ret754(CCScrollLayerExt::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress754 = (baseType754)(&CCScrollLayerExt::ccTouchBegan);
		using derivedType754 = temp_name_find_better::ret754(D<baseAddress754, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress754 = (derivedType754)(&D<baseAddress754, UUID>::ccTouchBegan);
        if (baseAddress754 != derivedAddress754) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::ccTouchBegan", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::ccTouchBegan", (void*)temp_name_find_better::address754(), (void*)addresser::getVirtual(derivedAddress754));
        }

    	using baseType755 = temp_name_find_better::ret755(CCScrollLayerExt::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress755 = (baseType755)(&CCScrollLayerExt::ccTouchMoved);
		using derivedType755 = temp_name_find_better::ret755(D<baseAddress755, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress755 = (derivedType755)(&D<baseAddress755, UUID>::ccTouchMoved);
        if (baseAddress755 != derivedAddress755) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::ccTouchMoved", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::ccTouchMoved", (void*)temp_name_find_better::address755(), (void*)addresser::getVirtual(derivedAddress755));
        }

    	using baseType756 = temp_name_find_better::ret756(CCScrollLayerExt::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress756 = (baseType756)(&CCScrollLayerExt::ccTouchEnded);
		using derivedType756 = temp_name_find_better::ret756(D<baseAddress756, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress756 = (derivedType756)(&D<baseAddress756, UUID>::ccTouchEnded);
        if (baseAddress756 != derivedAddress756) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::ccTouchEnded", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::ccTouchEnded", (void*)temp_name_find_better::address756(), (void*)addresser::getVirtual(derivedAddress756));
        }

    	using baseType757 = temp_name_find_better::ret757(CCScrollLayerExt::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress757 = (baseType757)(&CCScrollLayerExt::ccTouchCancelled);
		using derivedType757 = temp_name_find_better::ret757(D<baseAddress757, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress757 = (derivedType757)(&D<baseAddress757, UUID>::ccTouchCancelled);
        if (baseAddress757 != derivedAddress757) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::ccTouchCancelled", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::ccTouchCancelled", (void*)temp_name_find_better::address757(), (void*)addresser::getVirtual(derivedAddress757));
        }

    	using baseType758 = temp_name_find_better::ret758(CCScrollLayerExt::*)() ;
		constexpr auto baseAddress758 = (baseType758)(&CCScrollLayerExt::registerWithTouchDispatcher);
		using derivedType758 = temp_name_find_better::ret758(D<baseAddress758, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress758 = (derivedType758)(&D<baseAddress758, UUID>::registerWithTouchDispatcher);
        if (baseAddress758 != derivedAddress758) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::registerWithTouchDispatcher", (void*)temp_name_find_better::address758(), (void*)addresser::getVirtual(derivedAddress758));
        }

    	using baseType759 = temp_name_find_better::ret759(CCScrollLayerExt::*)(struct cocos2d::CCRect) ;
		constexpr auto baseAddress759 = (baseType759)(&CCScrollLayerExt::preVisitWithClippingRect);
		using derivedType759 = temp_name_find_better::ret759(D<baseAddress759, UUID>::*)(struct cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress759 = (derivedType759)(&D<baseAddress759, UUID>::preVisitWithClippingRect);
        if (baseAddress759 != derivedAddress759) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::preVisitWithClippingRect", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::preVisitWithClippingRect", (void*)temp_name_find_better::address759(), (void*)addresser::getVirtual(derivedAddress759));
        }

    	using baseType760 = temp_name_find_better::ret760(CCScrollLayerExt::*)() ;
		constexpr auto baseAddress760 = (baseType760)(&CCScrollLayerExt::postVisit);
		using derivedType760 = temp_name_find_better::ret760(D<baseAddress760, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress760 = (derivedType760)(&D<baseAddress760, UUID>::postVisit);
        if (baseAddress760 != derivedAddress760) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::postVisit", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::postVisit", (void*)temp_name_find_better::address760(), (void*)addresser::getVirtual(derivedAddress760));
        }

    	using baseType761 = temp_name_find_better::ret761(CCScrollLayerExt::*)() ;
		constexpr auto baseAddress761 = (baseType761)(&CCScrollLayerExt::moveToTop);
		using derivedType761 = temp_name_find_better::ret761(D<baseAddress761, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress761 = (derivedType761)(&D<baseAddress761, UUID>::moveToTop);
        if (baseAddress761 != derivedAddress761) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::moveToTop", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::moveToTop", (void*)temp_name_find_better::address761(), (void*)addresser::getNonVirtual(derivedAddress761));
        }

    	using baseType762 = temp_name_find_better::ret762(CCScrollLayerExt::*)(float) ;
		constexpr auto baseAddress762 = (baseType762)(&CCScrollLayerExt::moveToTopWithOffset);
		using derivedType762 = temp_name_find_better::ret762(D<baseAddress762, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress762 = (derivedType762)(&D<baseAddress762, UUID>::moveToTopWithOffset);
        if (baseAddress762 != derivedAddress762) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::moveToTopWithOffset", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::moveToTopWithOffset", (void*)temp_name_find_better::address762(), (void*)addresser::getNonVirtual(derivedAddress762));
        }

    	using baseType763 = temp_name_find_better::ret763($CCScrollLayerExt::*)(cocos2d::CCRect) ;
		constexpr auto baseAddress763 = (baseType763)(&$CCScrollLayerExt::constructor);
		using derivedType763 = temp_name_find_better::ret763(D<baseAddress763, UUID>::*)(cocos2d::CCRect) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress763 = (derivedType763)(&D<baseAddress763, UUID>::constructor);
        if (baseAddress763 != derivedAddress763) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::constructor", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::constructor", (void*)temp_name_find_better::address763(), (void*)addresser::getNonVirtual(derivedAddress763));
        }

    	using baseType764 = temp_name_find_better::ret764(CCScrollLayerExt::*)(float) ;
		constexpr auto baseAddress764 = (baseType764)(&CCScrollLayerExt::scrollLayer);
		using derivedType764 = temp_name_find_better::ret764(D<baseAddress764, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress764 = (derivedType764)(&D<baseAddress764, UUID>::scrollLayer);
        if (baseAddress764 != derivedAddress764) {
        	Interface::get()->logInfo("Adding hook at function CCScrollLayerExt::scrollLayer", Severity::Debug);
            Interface::get()->addHook("CCScrollLayerExt::scrollLayer", (void*)temp_name_find_better::address764(), (void*)addresser::getNonVirtual(derivedAddress764));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SongInfoLayer : SongInfoLayer, ModifierBase {
    $SongInfoLayer(const $SongInfoLayer& c) : SongInfoLayer(c) {}
    $SongInfoLayer() : $SongInfoLayer(*this) {}
    ~$SongInfoLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SongInfoLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType2057 = temp_name_find_better::ret2057(*)(int);
		constexpr auto baseAddress2057 = (baseType2057)(&SongInfoLayer::create);
		using derivedType2057 = temp_name_find_better::ret2057(*)(int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2057 = (derivedType2057)(&D<baseAddress2057, UUID>::create);
        if (baseAddress2057 != derivedAddress2057) {
        	Interface::get()->logInfo("Adding hook at function SongInfoLayer::create", Severity::Debug);
            Interface::get()->addHook("SongInfoLayer::create", (void*)temp_name_find_better::address2057(), (void*)addresser::getNonVirtual(derivedAddress2057));
        }

		using baseType2058 = temp_name_find_better::ret2058(*)(struct gd::string, struct gd::string, struct gd::string, struct gd::string, struct gd::string, struct gd::string);
		constexpr auto baseAddress2058 = (baseType2058)(&SongInfoLayer::create);
		using derivedType2058 = temp_name_find_better::ret2058(*)(struct gd::string, struct gd::string, struct gd::string, struct gd::string, struct gd::string, struct gd::string);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2058 = (derivedType2058)(&D<baseAddress2058, UUID>::create);
        if (baseAddress2058 != derivedAddress2058) {
        	Interface::get()->logInfo("Adding hook at function SongInfoLayer::create", Severity::Debug);
            Interface::get()->addHook("SongInfoLayer::create", (void*)temp_name_find_better::address2058(), (void*)addresser::getNonVirtual(derivedAddress2058));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCScrollLayerExtDelegate : CCScrollLayerExtDelegate, ModifierBase {
    $CCScrollLayerExtDelegate(const $CCScrollLayerExtDelegate& c) : CCScrollLayerExtDelegate(c) {}
    $CCScrollLayerExtDelegate() : $CCScrollLayerExtDelegate(*this) {}
    ~$CCScrollLayerExtDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCScrollLayerExtDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJSpecialColorSelect : GJSpecialColorSelect, ModifierBase {
    $GJSpecialColorSelect(const $GJSpecialColorSelect& c) : GJSpecialColorSelect(c) {}
    $GJSpecialColorSelect() : $GJSpecialColorSelect(*this) {}
    ~$GJSpecialColorSelect() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJSpecialColorSelect);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1245 = temp_name_find_better::ret1245(*)(int);
		constexpr auto baseAddress1245 = (baseType1245)(&GJSpecialColorSelect::textForColorIdx);
		using derivedType1245 = temp_name_find_better::ret1245(*)(int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1245 = (derivedType1245)(&D<baseAddress1245, UUID>::textForColorIdx);
        if (baseAddress1245 != derivedAddress1245) {
        	Interface::get()->logInfo("Adding hook at function GJSpecialColorSelect::textForColorIdx", Severity::Debug);
            Interface::get()->addHook("GJSpecialColorSelect::textForColorIdx", (void*)temp_name_find_better::address1245(), (void*)addresser::getNonVirtual(derivedAddress1245));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCSpritePlus : CCSpritePlus, ModifierBase {
    $CCSpritePlus(const $CCSpritePlus& c) : CCSpritePlus(c) {}
    $CCSpritePlus() : $CCSpritePlus(*this) {}
    ~$CCSpritePlus() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCSpritePlus);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType771 = temp_name_find_better::ret771(CCSpritePlus::*)(const char*) ;
		constexpr auto baseAddress771 = (baseType771)(&CCSpritePlus::initWithSpriteFrameName);
		using derivedType771 = temp_name_find_better::ret771(D<baseAddress771, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress771 = (derivedType771)(&D<baseAddress771, UUID>::initWithSpriteFrameName);
        if (baseAddress771 != derivedAddress771) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::initWithSpriteFrameName", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::initWithSpriteFrameName", (void*)temp_name_find_better::address771(), (void*)addresser::getNonVirtual(derivedAddress771));
        }

    	using baseType772 = temp_name_find_better::ret772(CCSpritePlus::*)(float) ;
		constexpr auto baseAddress772 = (baseType772)(&CCSpritePlus::setScaleX);
		using derivedType772 = temp_name_find_better::ret772(D<baseAddress772, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress772 = (derivedType772)(&D<baseAddress772, UUID>::setScaleX);
        if (baseAddress772 != derivedAddress772) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setScaleX", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setScaleX", (void*)temp_name_find_better::address772(), (void*)addresser::getNonVirtual(derivedAddress772));
        }

    	using baseType773 = temp_name_find_better::ret773(CCSpritePlus::*)(float) ;
		constexpr auto baseAddress773 = (baseType773)(&CCSpritePlus::setScaleY);
		using derivedType773 = temp_name_find_better::ret773(D<baseAddress773, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress773 = (derivedType773)(&D<baseAddress773, UUID>::setScaleY);
        if (baseAddress773 != derivedAddress773) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setScaleY", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setScaleY", (void*)temp_name_find_better::address773(), (void*)addresser::getNonVirtual(derivedAddress773));
        }

    	using baseType774 = temp_name_find_better::ret774(CCSpritePlus::*)(float) ;
		constexpr auto baseAddress774 = (baseType774)(&CCSpritePlus::setScale);
		using derivedType774 = temp_name_find_better::ret774(D<baseAddress774, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress774 = (derivedType774)(&D<baseAddress774, UUID>::setScale);
        if (baseAddress774 != derivedAddress774) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setScale", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setScale", (void*)temp_name_find_better::address774(), (void*)addresser::getNonVirtual(derivedAddress774));
        }

    	using baseType775 = temp_name_find_better::ret775(CCSpritePlus::*)(const cocos2d::CCPoint&) ;
		constexpr auto baseAddress775 = (baseType775)(&CCSpritePlus::setPosition);
		using derivedType775 = temp_name_find_better::ret775(D<baseAddress775, UUID>::*)(const cocos2d::CCPoint&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress775 = (derivedType775)(&D<baseAddress775, UUID>::setPosition);
        if (baseAddress775 != derivedAddress775) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setPosition", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setPosition", (void*)temp_name_find_better::address775(), (void*)addresser::getNonVirtual(derivedAddress775));
        }

    	using baseType776 = temp_name_find_better::ret776(CCSpritePlus::*)(float) ;
		constexpr auto baseAddress776 = (baseType776)(&CCSpritePlus::setRotation);
		using derivedType776 = temp_name_find_better::ret776(D<baseAddress776, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress776 = (derivedType776)(&D<baseAddress776, UUID>::setRotation);
        if (baseAddress776 != derivedAddress776) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setRotation", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setRotation", (void*)temp_name_find_better::address776(), (void*)addresser::getNonVirtual(derivedAddress776));
        }

    	using baseType777 = temp_name_find_better::ret777(CCSpritePlus::*)(cocos2d::CCTexture2D*) ;
		constexpr auto baseAddress777 = (baseType777)(&CCSpritePlus::initWithTexture);
		using derivedType777 = temp_name_find_better::ret777(D<baseAddress777, UUID>::*)(cocos2d::CCTexture2D*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress777 = (derivedType777)(&D<baseAddress777, UUID>::initWithTexture);
        if (baseAddress777 != derivedAddress777) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::initWithTexture", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::initWithTexture", (void*)temp_name_find_better::address777(), (void*)addresser::getNonVirtual(derivedAddress777));
        }

    	using baseType778 = temp_name_find_better::ret778(CCSpritePlus::*)(bool) ;
		constexpr auto baseAddress778 = (baseType778)(&CCSpritePlus::setFlipX);
		using derivedType778 = temp_name_find_better::ret778(D<baseAddress778, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress778 = (derivedType778)(&D<baseAddress778, UUID>::setFlipX);
        if (baseAddress778 != derivedAddress778) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setFlipX", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setFlipX", (void*)temp_name_find_better::address778(), (void*)addresser::getNonVirtual(derivedAddress778));
        }

    	using baseType779 = temp_name_find_better::ret779(CCSpritePlus::*)(bool) ;
		constexpr auto baseAddress779 = (baseType779)(&CCSpritePlus::setFlipY);
		using derivedType779 = temp_name_find_better::ret779(D<baseAddress779, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress779 = (derivedType779)(&D<baseAddress779, UUID>::setFlipY);
        if (baseAddress779 != derivedAddress779) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::setFlipY", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::setFlipY", (void*)temp_name_find_better::address779(), (void*)addresser::getNonVirtual(derivedAddress779));
        }

		using baseType780 = temp_name_find_better::ret780(*)(cocos2d::CCSpriteFrame*);
		constexpr auto baseAddress780 = (baseType780)(&CCSpritePlus::createWithSpriteFrame);
		using derivedType780 = temp_name_find_better::ret780(*)(cocos2d::CCSpriteFrame*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress780 = (derivedType780)(&D<baseAddress780, UUID>::createWithSpriteFrame);
        if (baseAddress780 != derivedAddress780) {
        	Interface::get()->logInfo("Adding hook at function CCSpritePlus::createWithSpriteFrame", Severity::Debug);
            Interface::get()->addHook("CCSpritePlus::createWithSpriteFrame", (void*)temp_name_find_better::address780(), (void*)addresser::getNonVirtual(derivedAddress780));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CCTextInputNode : CCTextInputNode, ModifierBase {
    $CCTextInputNode(const $CCTextInputNode& c) : CCTextInputNode(c) {}
    $CCTextInputNode() : $CCTextInputNode(*this) {}
    ~$CCTextInputNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CCTextInputNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType788 = temp_name_find_better::ret788(CCTextInputNode::*)(gd::string) ;
		constexpr auto baseAddress788 = (baseType788)(&CCTextInputNode::setString);
		using derivedType788 = temp_name_find_better::ret788(D<baseAddress788, UUID>::*)(gd::string) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress788 = (derivedType788)(&D<baseAddress788, UUID>::setString);
        if (baseAddress788 != derivedAddress788) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::setString", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::setString", (void*)temp_name_find_better::address788(), (void*)addresser::getNonVirtual(derivedAddress788));
        }

    	using baseType793 = temp_name_find_better::ret793(CCTextInputNode::*)(float, float, const char*, const char*, int, const char*) ;
		constexpr auto baseAddress793 = (baseType793)(&CCTextInputNode::init);
		using derivedType793 = temp_name_find_better::ret793(D<baseAddress793, UUID>::*)(float, float, const char*, const char*, int, const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress793 = (derivedType793)(&D<baseAddress793, UUID>::init);
        if (baseAddress793 != derivedAddress793) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::init", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::init", (void*)temp_name_find_better::address793(), (void*)addresser::getNonVirtual(derivedAddress793));
        }

    	using baseType794 = temp_name_find_better::ret794(CCTextInputNode::*)() ;
		constexpr auto baseAddress794 = (baseType794)(&CCTextInputNode::refreshLabel);
		using derivedType794 = temp_name_find_better::ret794(D<baseAddress794, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress794 = (derivedType794)(&D<baseAddress794, UUID>::refreshLabel);
        if (baseAddress794 != derivedAddress794) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::refreshLabel", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::refreshLabel", (void*)temp_name_find_better::address794(), (void*)addresser::getNonVirtual(derivedAddress794));
        }

    	using baseType796 = temp_name_find_better::ret796(CCTextInputNode::*)() ;
		constexpr auto baseAddress796 = (baseType796)(&CCTextInputNode::registerWithTouchDispatcher);
		using derivedType796 = temp_name_find_better::ret796(D<baseAddress796, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress796 = (derivedType796)(&D<baseAddress796, UUID>::registerWithTouchDispatcher);
        if (baseAddress796 != derivedAddress796) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::registerWithTouchDispatcher", (void*)temp_name_find_better::address796(), (void*)addresser::getVirtual(derivedAddress796));
        }

    	using baseType797 = temp_name_find_better::ret797(CCTextInputNode::*)() ;
		constexpr auto baseAddress797 = (baseType797)(&CCTextInputNode::visit);
		using derivedType797 = temp_name_find_better::ret797(D<baseAddress797, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress797 = (derivedType797)(&D<baseAddress797, UUID>::visit);
        if (baseAddress797 != derivedAddress797) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::visit", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::visit", (void*)temp_name_find_better::address797(), (void*)addresser::getVirtual(derivedAddress797));
        }

    	using baseType798 = temp_name_find_better::ret798(CCTextInputNode::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress798 = (baseType798)(&CCTextInputNode::ccTouchBegan);
		using derivedType798 = temp_name_find_better::ret798(D<baseAddress798, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress798 = (derivedType798)(&D<baseAddress798, UUID>::ccTouchBegan);
        if (baseAddress798 != derivedAddress798) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::ccTouchBegan", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::ccTouchBegan", (void*)temp_name_find_better::address798(), (void*)addresser::getVirtual(derivedAddress798));
        }

    	using baseType802 = temp_name_find_better::ret802(CCTextInputNode::*)() ;
		constexpr auto baseAddress802 = (baseType802)(&CCTextInputNode::textChanged);
		using derivedType802 = temp_name_find_better::ret802(D<baseAddress802, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress802 = (derivedType802)(&D<baseAddress802, UUID>::textChanged);
        if (baseAddress802 != derivedAddress802) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::textChanged", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::textChanged", (void*)temp_name_find_better::address802(), (void*)addresser::getVirtual(derivedAddress802));
        }

    	using baseType803 = temp_name_find_better::ret803(CCTextInputNode::*)(bool) ;
		constexpr auto baseAddress803 = (baseType803)(&CCTextInputNode::onClickTrackNode);
		using derivedType803 = temp_name_find_better::ret803(D<baseAddress803, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress803 = (derivedType803)(&D<baseAddress803, UUID>::onClickTrackNode);
        if (baseAddress803 != derivedAddress803) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::onClickTrackNode", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::onClickTrackNode", (void*)temp_name_find_better::address803(), (void*)addresser::getVirtual(derivedAddress803));
        }

    	using baseType804 = temp_name_find_better::ret804(CCTextInputNode::*)(cocos2d::CCIMEKeyboardNotificationInfo&) ;
		constexpr auto baseAddress804 = (baseType804)(&CCTextInputNode::keyboardWillShow);
		using derivedType804 = temp_name_find_better::ret804(D<baseAddress804, UUID>::*)(cocos2d::CCIMEKeyboardNotificationInfo&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress804 = (derivedType804)(&D<baseAddress804, UUID>::keyboardWillShow);
        if (baseAddress804 != derivedAddress804) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::keyboardWillShow", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::keyboardWillShow", (void*)temp_name_find_better::address804(), (void*)addresser::getVirtual(derivedAddress804));
        }

    	using baseType805 = temp_name_find_better::ret805(CCTextInputNode::*)(cocos2d::CCIMEKeyboardNotificationInfo&) ;
		constexpr auto baseAddress805 = (baseType805)(&CCTextInputNode::keyboardWillHide);
		using derivedType805 = temp_name_find_better::ret805(D<baseAddress805, UUID>::*)(cocos2d::CCIMEKeyboardNotificationInfo&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress805 = (derivedType805)(&D<baseAddress805, UUID>::keyboardWillHide);
        if (baseAddress805 != derivedAddress805) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::keyboardWillHide", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::keyboardWillHide", (void*)temp_name_find_better::address805(), (void*)addresser::getVirtual(derivedAddress805));
        }

    	using baseType807 = temp_name_find_better::ret807(CCTextInputNode::*)(cocos2d::CCTextFieldTTF*) ;
		constexpr auto baseAddress807 = (baseType807)(&CCTextInputNode::onTextFieldAttachWithIME);
		using derivedType807 = temp_name_find_better::ret807(D<baseAddress807, UUID>::*)(cocos2d::CCTextFieldTTF*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress807 = (derivedType807)(&D<baseAddress807, UUID>::onTextFieldAttachWithIME);
        if (baseAddress807 != derivedAddress807) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::onTextFieldAttachWithIME", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::onTextFieldAttachWithIME", (void*)temp_name_find_better::address807(), (void*)addresser::getVirtual(derivedAddress807));
        }

    	using baseType808 = temp_name_find_better::ret808(CCTextInputNode::*)(cocos2d::CCTextFieldTTF*) ;
		constexpr auto baseAddress808 = (baseType808)(&CCTextInputNode::onTextFieldDetachWithIME);
		using derivedType808 = temp_name_find_better::ret808(D<baseAddress808, UUID>::*)(cocos2d::CCTextFieldTTF*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress808 = (derivedType808)(&D<baseAddress808, UUID>::onTextFieldDetachWithIME);
        if (baseAddress808 != derivedAddress808) {
        	Interface::get()->logInfo("Adding hook at function CCTextInputNode::onTextFieldDetachWithIME", Severity::Debug);
            Interface::get()->addHook("CCTextInputNode::onTextFieldDetachWithIME", (void*)temp_name_find_better::address808(), (void*)addresser::getVirtual(derivedAddress808));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $StartPosObject : StartPosObject, ModifierBase {
    $StartPosObject(const $StartPosObject& c) : StartPosObject(c) {}
    $StartPosObject() : $StartPosObject(*this) {}
    ~$StartPosObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($StartPosObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ChallengesPage : ChallengesPage, ModifierBase {
    $ChallengesPage(const $ChallengesPage& c) : ChallengesPage(c) {}
    $ChallengesPage() : $ChallengesPage(*this) {}
    ~$ChallengesPage() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ChallengesPage);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType809 = temp_name_find_better::ret809(*)();
		constexpr auto baseAddress809 = (baseType809)(&ChallengesPage::create);
		using derivedType809 = temp_name_find_better::ret809(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress809 = (derivedType809)(&D<baseAddress809, UUID>::create);
        if (baseAddress809 != derivedAddress809) {
        	Interface::get()->logInfo("Adding hook at function ChallengesPage::create", Severity::Debug);
            Interface::get()->addHook("ChallengesPage::create", (void*)temp_name_find_better::address809(), (void*)addresser::getNonVirtual(derivedAddress809));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $OBB2D : OBB2D, ModifierBase {
    $OBB2D(const $OBB2D& c) : OBB2D(c) {}
    $OBB2D() : $OBB2D(*this) {}
    ~$OBB2D() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($OBB2D);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CheckpointObject : CheckpointObject, ModifierBase {
    $CheckpointObject(const $CheckpointObject& c) : CheckpointObject(c) {}
    $CheckpointObject() : $CheckpointObject(*this) {}
    ~$CheckpointObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CheckpointObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CollisionBlockPopup : CollisionBlockPopup, ModifierBase {
    $CollisionBlockPopup(const $CollisionBlockPopup& c) : CollisionBlockPopup(c) {}
    $CollisionBlockPopup() : $CollisionBlockPopup(*this) {}
    ~$CollisionBlockPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CollisionBlockPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CollisionTriggerAction : CollisionTriggerAction, ModifierBase {
    $CollisionTriggerAction(const $CollisionTriggerAction& c) : CollisionTriggerAction(c) {}
    $CollisionTriggerAction() : $CollisionTriggerAction(*this) {}
    ~$CollisionTriggerAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CollisionTriggerAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ColorAction : ColorAction, ModifierBase {
    $ColorAction(const $ColorAction& c) : ColorAction(c) {}
    $ColorAction() : $ColorAction(*this) {}
    ~$ColorAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ColorAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ColorActionSprite : ColorActionSprite, ModifierBase {
    $ColorActionSprite(const $ColorActionSprite& c) : ColorActionSprite(c) {}
    $ColorActionSprite() : $ColorActionSprite(*this) {}
    ~$ColorActionSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ColorActionSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ColorSelectDelegate : ColorSelectDelegate, ModifierBase {
    $ColorSelectDelegate(const $ColorSelectDelegate& c) : ColorSelectDelegate(c) {}
    $ColorSelectDelegate() : $ColorSelectDelegate(*this) {}
    ~$ColorSelectDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ColorSelectDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ColorSelectPopup : ColorSelectPopup, ModifierBase {
    $ColorSelectPopup(const $ColorSelectPopup& c) : ColorSelectPopup(c) {}
    $ColorSelectPopup() : $ColorSelectPopup(*this) {}
    ~$ColorSelectPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ColorSelectPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType823 = temp_name_find_better::ret823(ColorSelectPopup::*)(cocos2d::ccColor3B) ;
		constexpr auto baseAddress823 = (baseType823)(&ColorSelectPopup::colorValueChanged);
		using derivedType823 = temp_name_find_better::ret823(D<baseAddress823, UUID>::*)(cocos2d::ccColor3B) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress823 = (derivedType823)(&D<baseAddress823, UUID>::colorValueChanged);
        if (baseAddress823 != derivedAddress823) {
        	Interface::get()->logInfo("Adding hook at function ColorSelectPopup::colorValueChanged", Severity::Debug);
            Interface::get()->addHook("ColorSelectPopup::colorValueChanged", (void*)temp_name_find_better::address823(), (void*)addresser::getVirtual(derivedAddress823));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ColorSetupDelegate : ColorSetupDelegate, ModifierBase {
    $ColorSetupDelegate(const $ColorSetupDelegate& c) : ColorSetupDelegate(c) {}
    $ColorSetupDelegate() : $ColorSetupDelegate(*this) {}
    ~$ColorSetupDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ColorSetupDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CommentUploadDelegate : CommentUploadDelegate, ModifierBase {
    $CommentUploadDelegate(const $CommentUploadDelegate& c) : CommentUploadDelegate(c) {}
    $CommentUploadDelegate() : $CommentUploadDelegate(*this) {}
    ~$CommentUploadDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CommentUploadDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ConfigureHSVWidget : ConfigureHSVWidget, ModifierBase {
    $ConfigureHSVWidget(const $ConfigureHSVWidget& c) : ConfigureHSVWidget(c) {}
    $ConfigureHSVWidget() : $ConfigureHSVWidget(*this) {}
    ~$ConfigureHSVWidget() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ConfigureHSVWidget);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MultilineBitmapFont : MultilineBitmapFont, ModifierBase {
    $MultilineBitmapFont(const $MultilineBitmapFont& c) : MultilineBitmapFont(c) {}
    $MultilineBitmapFont() : $MultilineBitmapFont(*this) {}
    ~$MultilineBitmapFont() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MultilineBitmapFont);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CountTriggerAction : CountTriggerAction, ModifierBase {
    $CountTriggerAction(const $CountTriggerAction& c) : CountTriggerAction(c) {}
    $CountTriggerAction() : $CountTriggerAction(*this) {}
    ~$CountTriggerAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CountTriggerAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CreateGuidelinesLayer : CreateGuidelinesLayer, ModifierBase {
    $CreateGuidelinesLayer(const $CreateGuidelinesLayer& c) : CreateGuidelinesLayer(c) {}
    $CreateGuidelinesLayer() : $CreateGuidelinesLayer(*this) {}
    ~$CreateGuidelinesLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CreateGuidelinesLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType826 = temp_name_find_better::ret826(CreateGuidelinesLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress826 = (baseType826)(&CreateGuidelinesLayer::onStop);
		using derivedType826 = temp_name_find_better::ret826(D<baseAddress826, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress826 = (derivedType826)(&D<baseAddress826, UUID>::onStop);
        if (baseAddress826 != derivedAddress826) {
        	Interface::get()->logInfo("Adding hook at function CreateGuidelinesLayer::onStop", Severity::Debug);
            Interface::get()->addHook("CreateGuidelinesLayer::onStop", (void*)temp_name_find_better::address826(), (void*)addresser::getNonVirtual(derivedAddress826));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CreateMenuItem : CreateMenuItem, ModifierBase {
    $CreateMenuItem(const $CreateMenuItem& c) : CreateMenuItem(c) {}
    $CreateMenuItem() : $CreateMenuItem(*this) {}
    ~$CreateMenuItem() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CreateMenuItem);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameRateDelegate : GameRateDelegate, ModifierBase {
    $GameRateDelegate(const $GameRateDelegate& c) : GameRateDelegate(c) {}
    $GameRateDelegate() : $GameRateDelegate(*this) {}
    ~$GameRateDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameRateDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $DialogLayer : DialogLayer, ModifierBase {
    $DialogLayer(const $DialogLayer& c) : DialogLayer(c) {}
    $DialogLayer() : $DialogLayer(*this) {}
    ~$DialogLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($DialogLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType851 = temp_name_find_better::ret851(*)(DialogObject*, cocos2d::CCArray*, int);
		constexpr auto baseAddress851 = (baseType851)(&DialogLayer::createDialogLayer);
		using derivedType851 = temp_name_find_better::ret851(*)(DialogObject*, cocos2d::CCArray*, int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress851 = (derivedType851)(&D<baseAddress851, UUID>::createDialogLayer);
        if (baseAddress851 != derivedAddress851) {
        	Interface::get()->logInfo("Adding hook at function DialogLayer::createDialogLayer", Severity::Debug);
            Interface::get()->addHook("DialogLayer::createDialogLayer", (void*)temp_name_find_better::address851(), (void*)addresser::getNonVirtual(derivedAddress851));
        }

    	using baseType852 = temp_name_find_better::ret852(DialogLayer::*)(DialogLayer*, DialogObject*, cocos2d::CCArray*, int) ;
		constexpr auto baseAddress852 = (baseType852)(&DialogLayer::init);
		using derivedType852 = temp_name_find_better::ret852(D<baseAddress852, UUID>::*)(DialogLayer*, DialogObject*, cocos2d::CCArray*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress852 = (derivedType852)(&D<baseAddress852, UUID>::init);
        if (baseAddress852 != derivedAddress852) {
        	Interface::get()->logInfo("Adding hook at function DialogLayer::init", Severity::Debug);
            Interface::get()->addHook("DialogLayer::init", (void*)temp_name_find_better::address852(), (void*)addresser::getNonVirtual(derivedAddress852));
        }

    	using baseType853 = temp_name_find_better::ret853(DialogLayer::*)(int) ;
		constexpr auto baseAddress853 = (baseType853)(&DialogLayer::animateIn);
		using derivedType853 = temp_name_find_better::ret853(D<baseAddress853, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress853 = (derivedType853)(&D<baseAddress853, UUID>::animateIn);
        if (baseAddress853 != derivedAddress853) {
        	Interface::get()->logInfo("Adding hook at function DialogLayer::animateIn", Severity::Debug);
            Interface::get()->addHook("DialogLayer::animateIn", (void*)temp_name_find_better::address853(), (void*)addresser::getNonVirtual(derivedAddress853));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CurrencyRewardLayer : CurrencyRewardLayer, ModifierBase {
    $CurrencyRewardLayer(const $CurrencyRewardLayer& c) : CurrencyRewardLayer(c) {}
    $CurrencyRewardLayer() : $CurrencyRewardLayer(*this) {}
    ~$CurrencyRewardLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CurrencyRewardLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CustomListView : CustomListView, ModifierBase {
    $CustomListView(const $CustomListView& c) : CustomListView(c) {}
    $CustomListView() : $CustomListView(*this) {}
    ~$CustomListView() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CustomListView);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address837)(this);
    }
    static bool _apply() {

		using baseType833 = temp_name_find_better::ret833(*)(cocos2d::CCArray*, float, float, int, BoomListType);
		constexpr auto baseAddress833 = (baseType833)(&CustomListView::create);
		using derivedType833 = temp_name_find_better::ret833(*)(cocos2d::CCArray*, float, float, int, BoomListType);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress833 = (derivedType833)(&D<baseAddress833, UUID>::create);
        if (baseAddress833 != derivedAddress833) {
        	Interface::get()->logInfo("Adding hook at function CustomListView::create", Severity::Debug);
            Interface::get()->addHook("CustomListView::create", (void*)temp_name_find_better::address833(), (void*)addresser::getNonVirtual(derivedAddress833));
        }

    	using baseType834 = temp_name_find_better::ret834(CustomListView::*)(const char*) ;
		constexpr auto baseAddress834 = (baseType834)(&CustomListView::getListCell);
		using derivedType834 = temp_name_find_better::ret834(D<baseAddress834, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress834 = (derivedType834)(&D<baseAddress834, UUID>::getListCell);
        if (baseAddress834 != derivedAddress834) {
        	Interface::get()->logInfo("Adding hook at function CustomListView::getListCell", Severity::Debug);
            Interface::get()->addHook("CustomListView::getListCell", (void*)temp_name_find_better::address834(), (void*)addresser::getVirtual(derivedAddress834));
        }

    	using baseType835 = temp_name_find_better::ret835(CustomListView::*)(TableViewCell*, unsigned int) ;
		constexpr auto baseAddress835 = (baseType835)(&CustomListView::loadCell);
		using derivedType835 = temp_name_find_better::ret835(D<baseAddress835, UUID>::*)(TableViewCell*, unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress835 = (derivedType835)(&D<baseAddress835, UUID>::loadCell);
        if (baseAddress835 != derivedAddress835) {
        	Interface::get()->logInfo("Adding hook at function CustomListView::loadCell", Severity::Debug);
            Interface::get()->addHook("CustomListView::loadCell", (void*)temp_name_find_better::address835(), (void*)addresser::getVirtual(derivedAddress835));
        }

    	using baseType836 = temp_name_find_better::ret836(CustomListView::*)() ;
		constexpr auto baseAddress836 = (baseType836)(&CustomListView::setupList);
		using derivedType836 = temp_name_find_better::ret836(D<baseAddress836, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress836 = (derivedType836)(&D<baseAddress836, UUID>::setupList);
        if (baseAddress836 != derivedAddress836) {
        	Interface::get()->logInfo("Adding hook at function CustomListView::setupList", Severity::Debug);
            Interface::get()->addHook("CustomListView::setupList", (void*)temp_name_find_better::address836(), (void*)addresser::getVirtual(derivedAddress836));
        }

    	using baseType837 = temp_name_find_better::ret837($CustomListView::*)() ;
		constexpr auto baseAddress837 = (baseType837)(&$CustomListView::constructor);
		using derivedType837 = temp_name_find_better::ret837(D<baseAddress837, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress837 = (derivedType837)(&D<baseAddress837, UUID>::constructor);
        if (baseAddress837 != derivedAddress837) {
        	Interface::get()->logInfo("Adding hook at function CustomListView::constructor", Severity::Debug);
            Interface::get()->addHook("CustomListView::constructor", (void*)temp_name_find_better::address837(), (void*)addresser::getNonVirtual(derivedAddress837));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CustomSongWidget : CustomSongWidget, ModifierBase {
    $CustomSongWidget(const $CustomSongWidget& c) : CustomSongWidget(c) {}
    $CustomSongWidget() : $CustomSongWidget(*this) {}
    ~$CustomSongWidget() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CustomSongWidget);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType844 = temp_name_find_better::ret844(CustomSongWidget::*)(SongInfoObject*) ;
		constexpr auto baseAddress844 = (baseType844)(&CustomSongWidget::updateSongObject);
		using derivedType844 = temp_name_find_better::ret844(D<baseAddress844, UUID>::*)(SongInfoObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress844 = (derivedType844)(&D<baseAddress844, UUID>::updateSongObject);
        if (baseAddress844 != derivedAddress844) {
        	Interface::get()->logInfo("Adding hook at function CustomSongWidget::updateSongObject", Severity::Debug);
            Interface::get()->addHook("CustomSongWidget::updateSongObject", (void*)temp_name_find_better::address844(), (void*)addresser::getNonVirtual(derivedAddress844));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $CustomizeObjectLayer : CustomizeObjectLayer, ModifierBase {
    $CustomizeObjectLayer(const $CustomizeObjectLayer& c) : CustomizeObjectLayer(c) {}
    $CustomizeObjectLayer() : $CustomizeObjectLayer(*this) {}
    ~$CustomizeObjectLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($CustomizeObjectLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType845 = temp_name_find_better::ret845(CustomizeObjectLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress845 = (baseType845)(&CustomizeObjectLayer::onNextColorChannel);
		using derivedType845 = temp_name_find_better::ret845(D<baseAddress845, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress845 = (derivedType845)(&D<baseAddress845, UUID>::onNextColorChannel);
        if (baseAddress845 != derivedAddress845) {
        	Interface::get()->logInfo("Adding hook at function CustomizeObjectLayer::onNextColorChannel", Severity::Debug);
            Interface::get()->addHook("CustomizeObjectLayer::onNextColorChannel", (void*)temp_name_find_better::address845(), (void*)addresser::getNonVirtual(derivedAddress845));
        }

    	using baseType846 = temp_name_find_better::ret846(CustomizeObjectLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress846 = (baseType846)(&CustomizeObjectLayer::onSelectColor);
		using derivedType846 = temp_name_find_better::ret846(D<baseAddress846, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress846 = (derivedType846)(&D<baseAddress846, UUID>::onSelectColor);
        if (baseAddress846 != derivedAddress846) {
        	Interface::get()->logInfo("Adding hook at function CustomizeObjectLayer::onSelectColor", Severity::Debug);
            Interface::get()->addHook("CustomizeObjectLayer::onSelectColor", (void*)temp_name_find_better::address846(), (void*)addresser::getNonVirtual(derivedAddress846));
        }

    	using baseType847 = temp_name_find_better::ret847(CustomizeObjectLayer::*)(bool) ;
		constexpr auto baseAddress847 = (baseType847)(&CustomizeObjectLayer::getActiveMode);
		using derivedType847 = temp_name_find_better::ret847(D<baseAddress847, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress847 = (derivedType847)(&D<baseAddress847, UUID>::getActiveMode);
        if (baseAddress847 != derivedAddress847) {
        	Interface::get()->logInfo("Adding hook at function CustomizeObjectLayer::getActiveMode", Severity::Debug);
            Interface::get()->addHook("CustomizeObjectLayer::getActiveMode", (void*)temp_name_find_better::address847(), (void*)addresser::getNonVirtual(derivedAddress847));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $DailyLevelPage : DailyLevelPage, ModifierBase {
    $DailyLevelPage(const $DailyLevelPage& c) : DailyLevelPage(c) {}
    $DailyLevelPage() : $DailyLevelPage(*this) {}
    ~$DailyLevelPage() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($DailyLevelPage);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType848 = temp_name_find_better::ret848(*)(bool);
		constexpr auto baseAddress848 = (baseType848)(&DailyLevelPage::create);
		using derivedType848 = temp_name_find_better::ret848(*)(bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress848 = (derivedType848)(&D<baseAddress848, UUID>::create);
        if (baseAddress848 != derivedAddress848) {
        	Interface::get()->logInfo("Adding hook at function DailyLevelPage::create", Severity::Debug);
            Interface::get()->addHook("DailyLevelPage::create", (void*)temp_name_find_better::address848(), (void*)addresser::getNonVirtual(derivedAddress848));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $DialogDelegate : DialogDelegate, ModifierBase {
    $DialogDelegate(const $DialogDelegate& c) : DialogDelegate(c) {}
    $DialogDelegate() : $DialogDelegate(*this) {}
    ~$DialogDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($DialogDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $DialogObject : DialogObject, ModifierBase {
    $DialogObject(const $DialogObject& c) : DialogObject(c) {}
    $DialogObject() : $DialogObject(*this) {}
    ~$DialogObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($DialogObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType864 = temp_name_find_better::ret864(*)(struct gd::string, struct gd::string, int, float, bool, cocos2d::ccColor3B);
		constexpr auto baseAddress864 = (baseType864)(&DialogObject::create);
		using derivedType864 = temp_name_find_better::ret864(*)(struct gd::string, struct gd::string, int, float, bool, cocos2d::ccColor3B);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress864 = (derivedType864)(&D<baseAddress864, UUID>::create);
        if (baseAddress864 != derivedAddress864) {
        	Interface::get()->logInfo("Adding hook at function DialogObject::create", Severity::Debug);
            Interface::get()->addHook("DialogObject::create", (void*)temp_name_find_better::address864(), (void*)addresser::getNonVirtual(derivedAddress864));
        }

    	using baseType865 = temp_name_find_better::ret865(DialogObject::*)(DialogObject*, struct gd::string, struct gd::string, int, float, bool, cocos2d::ccColor3B) ;
		constexpr auto baseAddress865 = (baseType865)(&DialogObject::init);
		using derivedType865 = temp_name_find_better::ret865(D<baseAddress865, UUID>::*)(DialogObject*, struct gd::string, struct gd::string, int, float, bool, cocos2d::ccColor3B) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress865 = (derivedType865)(&D<baseAddress865, UUID>::init);
        if (baseAddress865 != derivedAddress865) {
        	Interface::get()->logInfo("Adding hook at function DialogObject::init", Severity::Debug);
            Interface::get()->addHook("DialogObject::init", (void*)temp_name_find_better::address865(), (void*)addresser::getNonVirtual(derivedAddress865));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EditButtonBar : EditButtonBar, ModifierBase {
    $EditButtonBar(const $EditButtonBar& c) : EditButtonBar(c) {}
    $EditButtonBar() : $EditButtonBar(*this) {}
    ~$EditButtonBar() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EditButtonBar);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType871 = temp_name_find_better::ret871(EditButtonBar::*)(cocos2d::CCArray*, int, int, bool) ;
		constexpr auto baseAddress871 = (baseType871)(&EditButtonBar::loadFromItems);
		using derivedType871 = temp_name_find_better::ret871(D<baseAddress871, UUID>::*)(cocos2d::CCArray*, int, int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress871 = (derivedType871)(&D<baseAddress871, UUID>::loadFromItems);
        if (baseAddress871 != derivedAddress871) {
        	Interface::get()->logInfo("Adding hook at function EditButtonBar::loadFromItems", Severity::Debug);
            Interface::get()->addHook("EditButtonBar::loadFromItems", (void*)temp_name_find_better::address871(), (void*)addresser::getNonVirtual(derivedAddress871));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EditLevelLayer : EditLevelLayer, ModifierBase {
    $EditLevelLayer(const $EditLevelLayer& c) : EditLevelLayer(c) {}
    $EditLevelLayer() : $EditLevelLayer(*this) {}
    ~$EditLevelLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EditLevelLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType873 = temp_name_find_better::ret873(*)(GJGameLevel*);
		constexpr auto baseAddress873 = (baseType873)(&EditLevelLayer::create);
		using derivedType873 = temp_name_find_better::ret873(*)(GJGameLevel*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress873 = (derivedType873)(&D<baseAddress873, UUID>::create);
        if (baseAddress873 != derivedAddress873) {
        	Interface::get()->logInfo("Adding hook at function EditLevelLayer::create", Severity::Debug);
            Interface::get()->addHook("EditLevelLayer::create", (void*)temp_name_find_better::address873(), (void*)addresser::getNonVirtual(derivedAddress873));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EditorPauseLayer : EditorPauseLayer, ModifierBase {
    $EditorPauseLayer(const $EditorPauseLayer& c) : EditorPauseLayer(c) {}
    $EditorPauseLayer() : $EditorPauseLayer(*this) {}
    ~$EditorPauseLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EditorPauseLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address891)(this);
    }
    static bool _apply() {

    	using baseType877 = temp_name_find_better::ret877(EditorPauseLayer::*)() ;
		constexpr auto baseAddress877 = (baseType877)(&EditorPauseLayer::keyBackClicked);
		using derivedType877 = temp_name_find_better::ret877(D<baseAddress877, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress877 = (derivedType877)(&D<baseAddress877, UUID>::keyBackClicked);
        if (baseAddress877 != derivedAddress877) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::keyBackClicked", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::keyBackClicked", (void*)temp_name_find_better::address877(), (void*)addresser::getVirtual(derivedAddress877));
        }

    	using baseType880 = temp_name_find_better::ret880(EditorPauseLayer::*)(FLAlertLayer*, bool) ;
		constexpr auto baseAddress880 = (baseType880)(&EditorPauseLayer::FLAlert_Clicked);
		using derivedType880 = temp_name_find_better::ret880(D<baseAddress880, UUID>::*)(FLAlertLayer*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress880 = (derivedType880)(&D<baseAddress880, UUID>::FLAlert_Clicked);
        if (baseAddress880 != derivedAddress880) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::FLAlert_Clicked", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::FLAlert_Clicked", (void*)temp_name_find_better::address880(), (void*)addresser::getVirtual(derivedAddress880));
        }

    	using baseType881 = temp_name_find_better::ret881(EditorPauseLayer::*)() ;
		constexpr auto baseAddress881 = (baseType881)(&EditorPauseLayer::saveLevel);
		using derivedType881 = temp_name_find_better::ret881(D<baseAddress881, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress881 = (derivedType881)(&D<baseAddress881, UUID>::saveLevel);
        if (baseAddress881 != derivedAddress881) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::saveLevel", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::saveLevel", (void*)temp_name_find_better::address881(), (void*)addresser::getNonVirtual(derivedAddress881));
        }

    	using baseType882 = temp_name_find_better::ret882(EditorPauseLayer::*)(LevelEditorLayer*) ;
		constexpr auto baseAddress882 = (baseType882)(&EditorPauseLayer::init);
		using derivedType882 = temp_name_find_better::ret882(D<baseAddress882, UUID>::*)(LevelEditorLayer*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress882 = (derivedType882)(&D<baseAddress882, UUID>::init);
        if (baseAddress882 != derivedAddress882) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::init", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::init", (void*)temp_name_find_better::address882(), (void*)addresser::getNonVirtual(derivedAddress882));
        }

    	using baseType883 = temp_name_find_better::ret883(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress883 = (baseType883)(&EditorPauseLayer::onExitEditor);
		using derivedType883 = temp_name_find_better::ret883(D<baseAddress883, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress883 = (derivedType883)(&D<baseAddress883, UUID>::onExitEditor);
        if (baseAddress883 != derivedAddress883) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::onExitEditor", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::onExitEditor", (void*)temp_name_find_better::address883(), (void*)addresser::getNonVirtual(derivedAddress883));
        }

    	using baseType884 = temp_name_find_better::ret884(EditorPauseLayer::*)() ;
		constexpr auto baseAddress884 = (baseType884)(&EditorPauseLayer::playStep2);
		using derivedType884 = temp_name_find_better::ret884(D<baseAddress884, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress884 = (derivedType884)(&D<baseAddress884, UUID>::playStep2);
        if (baseAddress884 != derivedAddress884) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::playStep2", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::playStep2", (void*)temp_name_find_better::address884(), (void*)addresser::getNonVirtual(derivedAddress884));
        }

    	using baseType885 = temp_name_find_better::ret885(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress885 = (baseType885)(&EditorPauseLayer::onResume);
		using derivedType885 = temp_name_find_better::ret885(D<baseAddress885, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress885 = (derivedType885)(&D<baseAddress885, UUID>::onResume);
        if (baseAddress885 != derivedAddress885) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::onResume", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::onResume", (void*)temp_name_find_better::address885(), (void*)addresser::getNonVirtual(derivedAddress885));
        }

    	using baseType886 = temp_name_find_better::ret886(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress886 = (baseType886)(&EditorPauseLayer::onSaveAndPlay);
		using derivedType886 = temp_name_find_better::ret886(D<baseAddress886, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress886 = (derivedType886)(&D<baseAddress886, UUID>::onSaveAndPlay);
        if (baseAddress886 != derivedAddress886) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::onSaveAndPlay", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::onSaveAndPlay", (void*)temp_name_find_better::address886(), (void*)addresser::getNonVirtual(derivedAddress886));
        }

    	using baseType887 = temp_name_find_better::ret887(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress887 = (baseType887)(&EditorPauseLayer::onSaveAndExit);
		using derivedType887 = temp_name_find_better::ret887(D<baseAddress887, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress887 = (derivedType887)(&D<baseAddress887, UUID>::onSaveAndExit);
        if (baseAddress887 != derivedAddress887) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::onSaveAndExit", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::onSaveAndExit", (void*)temp_name_find_better::address887(), (void*)addresser::getNonVirtual(derivedAddress887));
        }

    	using baseType888 = temp_name_find_better::ret888(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress888 = (baseType888)(&EditorPauseLayer::onSave);
		using derivedType888 = temp_name_find_better::ret888(D<baseAddress888, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress888 = (derivedType888)(&D<baseAddress888, UUID>::onSave);
        if (baseAddress888 != derivedAddress888) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::onSave", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::onSave", (void*)temp_name_find_better::address888(), (void*)addresser::getNonVirtual(derivedAddress888));
        }

    	using baseType889 = temp_name_find_better::ret889(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress889 = (baseType889)(&EditorPauseLayer::onExitNoSave);
		using derivedType889 = temp_name_find_better::ret889(D<baseAddress889, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress889 = (derivedType889)(&D<baseAddress889, UUID>::onExitNoSave);
        if (baseAddress889 != derivedAddress889) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::onExitNoSave", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::onExitNoSave", (void*)temp_name_find_better::address889(), (void*)addresser::getNonVirtual(derivedAddress889));
        }

    	using baseType890 = temp_name_find_better::ret890(EditorPauseLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress890 = (baseType890)(&EditorPauseLayer::uncheckAllPortals);
		using derivedType890 = temp_name_find_better::ret890(D<baseAddress890, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress890 = (derivedType890)(&D<baseAddress890, UUID>::uncheckAllPortals);
        if (baseAddress890 != derivedAddress890) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::uncheckAllPortals", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::uncheckAllPortals", (void*)temp_name_find_better::address890(), (void*)addresser::getNonVirtual(derivedAddress890));
        }

    	using baseType891 = temp_name_find_better::ret891($EditorPauseLayer::*)() ;
		constexpr auto baseAddress891 = (baseType891)(&$EditorPauseLayer::constructor);
		using derivedType891 = temp_name_find_better::ret891(D<baseAddress891, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress891 = (derivedType891)(&D<baseAddress891, UUID>::constructor);
        if (baseAddress891 != derivedAddress891) {
        	Interface::get()->logInfo("Adding hook at function EditorPauseLayer::constructor", Severity::Debug);
            Interface::get()->addHook("EditorPauseLayer::constructor", (void*)temp_name_find_better::address891(), (void*)addresser::getNonVirtual(derivedAddress891));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EditorUI : EditorUI, ModifierBase {
    $EditorUI(const $EditorUI& c) : EditorUI(c) {}
    $EditorUI() : $EditorUI(*this) {}
    ~$EditorUI() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EditorUI);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType895 = temp_name_find_better::ret895(EditorUI::*)() ;
		constexpr auto baseAddress895 = (baseType895)(&EditorUI::deselectAll);
		using derivedType895 = temp_name_find_better::ret895(D<baseAddress895, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress895 = (derivedType895)(&D<baseAddress895, UUID>::deselectAll);
        if (baseAddress895 != derivedAddress895) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::deselectAll", Severity::Debug);
            Interface::get()->addHook("EditorUI::deselectAll", (void*)temp_name_find_better::address895(), (void*)addresser::getNonVirtual(derivedAddress895));
        }

    	using baseType897 = temp_name_find_better::ret897(EditorUI::*)(CreateMenuItem*) ;
		constexpr auto baseAddress897 = (baseType897)(&EditorUI::disableButton);
		using derivedType897 = temp_name_find_better::ret897(D<baseAddress897, UUID>::*)(CreateMenuItem*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress897 = (derivedType897)(&D<baseAddress897, UUID>::disableButton);
        if (baseAddress897 != derivedAddress897) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::disableButton", Severity::Debug);
            Interface::get()->addHook("EditorUI::disableButton", (void*)temp_name_find_better::address897(), (void*)addresser::getNonVirtual(derivedAddress897));
        }

    	using baseType899 = temp_name_find_better::ret899(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress899 = (baseType899)(&EditorUI::editObject);
		using derivedType899 = temp_name_find_better::ret899(D<baseAddress899, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress899 = (derivedType899)(&D<baseAddress899, UUID>::editObject);
        if (baseAddress899 != derivedAddress899) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::editObject", Severity::Debug);
            Interface::get()->addHook("EditorUI::editObject", (void*)temp_name_find_better::address899(), (void*)addresser::getNonVirtual(derivedAddress899));
        }

    	using baseType900 = temp_name_find_better::ret900(EditorUI::*)(CreateMenuItem*) ;
		constexpr auto baseAddress900 = (baseType900)(&EditorUI::enableButton);
		using derivedType900 = temp_name_find_better::ret900(D<baseAddress900, UUID>::*)(CreateMenuItem*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress900 = (derivedType900)(&D<baseAddress900, UUID>::enableButton);
        if (baseAddress900 != derivedAddress900) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::enableButton", Severity::Debug);
            Interface::get()->addHook("EditorUI::enableButton", (void*)temp_name_find_better::address900(), (void*)addresser::getNonVirtual(derivedAddress900));
        }

    	using baseType901 = temp_name_find_better::ret901(EditorUI::*)(int, int) ;
		constexpr auto baseAddress901 = (baseType901)(&EditorUI::getCreateBtn);
		using derivedType901 = temp_name_find_better::ret901(D<baseAddress901, UUID>::*)(int, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress901 = (derivedType901)(&D<baseAddress901, UUID>::getCreateBtn);
        if (baseAddress901 != derivedAddress901) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::getCreateBtn", Severity::Debug);
            Interface::get()->addHook("EditorUI::getCreateBtn", (void*)temp_name_find_better::address901(), (void*)addresser::getNonVirtual(derivedAddress901));
        }

    	using baseType902 = temp_name_find_better::ret902(EditorUI::*)(cocos2d::CCArray*, bool) ;
		constexpr auto baseAddress902 = (baseType902)(&EditorUI::getGroupCenter);
		using derivedType902 = temp_name_find_better::ret902(D<baseAddress902, UUID>::*)(cocos2d::CCArray*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress902 = (derivedType902)(&D<baseAddress902, UUID>::getGroupCenter);
        if (baseAddress902 != derivedAddress902) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::getGroupCenter", Severity::Debug);
            Interface::get()->addHook("EditorUI::getGroupCenter", (void*)temp_name_find_better::address902(), (void*)addresser::getNonVirtual(derivedAddress902));
        }

    	using baseType903 = temp_name_find_better::ret903(EditorUI::*)() ;
		constexpr auto baseAddress903 = (baseType903)(&EditorUI::getSelectedObjects);
		using derivedType903 = temp_name_find_better::ret903(D<baseAddress903, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress903 = (derivedType903)(&D<baseAddress903, UUID>::getSelectedObjects);
        if (baseAddress903 != derivedAddress903) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::getSelectedObjects", Severity::Debug);
            Interface::get()->addHook("EditorUI::getSelectedObjects", (void*)temp_name_find_better::address903(), (void*)addresser::getNonVirtual(derivedAddress903));
        }

    	using baseType908 = temp_name_find_better::ret908(EditorUI::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress908 = (baseType908)(&EditorUI::keyDown);
		using derivedType908 = temp_name_find_better::ret908(D<baseAddress908, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress908 = (derivedType908)(&D<baseAddress908, UUID>::keyDown);
        if (baseAddress908 != derivedAddress908) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::keyDown", Severity::Debug);
            Interface::get()->addHook("EditorUI::keyDown", (void*)temp_name_find_better::address908(), (void*)addresser::getVirtual(derivedAddress908));
        }

    	using baseType909 = temp_name_find_better::ret909(EditorUI::*)(GameObject*, struct cocos2d::CCPoint) ;
		constexpr auto baseAddress909 = (baseType909)(&EditorUI::moveObject);
		using derivedType909 = temp_name_find_better::ret909(D<baseAddress909, UUID>::*)(GameObject*, struct cocos2d::CCPoint) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress909 = (derivedType909)(&D<baseAddress909, UUID>::moveObject);
        if (baseAddress909 != derivedAddress909) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::moveObject", Severity::Debug);
            Interface::get()->addHook("EditorUI::moveObject", (void*)temp_name_find_better::address909(), (void*)addresser::getNonVirtual(derivedAddress909));
        }

    	using baseType910 = temp_name_find_better::ret910(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress910 = (baseType910)(&EditorUI::onDuplicate);
		using derivedType910 = temp_name_find_better::ret910(D<baseAddress910, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress910 = (derivedType910)(&D<baseAddress910, UUID>::onDuplicate);
        if (baseAddress910 != derivedAddress910) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onDuplicate", Severity::Debug);
            Interface::get()->addHook("EditorUI::onDuplicate", (void*)temp_name_find_better::address910(), (void*)addresser::getNonVirtual(derivedAddress910));
        }

    	using baseType911 = temp_name_find_better::ret911(EditorUI::*)(gd::string const&) ;
		constexpr auto baseAddress911 = (baseType911)(&EditorUI::pasteObjects);
		using derivedType911 = temp_name_find_better::ret911(D<baseAddress911, UUID>::*)(gd::string const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress911 = (derivedType911)(&D<baseAddress911, UUID>::pasteObjects);
        if (baseAddress911 != derivedAddress911) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::pasteObjects", Severity::Debug);
            Interface::get()->addHook("EditorUI::pasteObjects", (void*)temp_name_find_better::address911(), (void*)addresser::getNonVirtual(derivedAddress911));
        }

    	using baseType914 = temp_name_find_better::ret914(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress914 = (baseType914)(&EditorUI::redoLastAction);
		using derivedType914 = temp_name_find_better::ret914(D<baseAddress914, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress914 = (derivedType914)(&D<baseAddress914, UUID>::redoLastAction);
        if (baseAddress914 != derivedAddress914) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::redoLastAction", Severity::Debug);
            Interface::get()->addHook("EditorUI::redoLastAction", (void*)temp_name_find_better::address914(), (void*)addresser::getNonVirtual(derivedAddress914));
        }

    	using baseType917 = temp_name_find_better::ret917(EditorUI::*)(cocos2d::CCArray*, float, struct cocos2d::CCPoint) ;
		constexpr auto baseAddress917 = (baseType917)(&EditorUI::scaleObjects);
		using derivedType917 = temp_name_find_better::ret917(D<baseAddress917, UUID>::*)(cocos2d::CCArray*, float, struct cocos2d::CCPoint) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress917 = (derivedType917)(&D<baseAddress917, UUID>::scaleObjects);
        if (baseAddress917 != derivedAddress917) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::scaleObjects", Severity::Debug);
            Interface::get()->addHook("EditorUI::scaleObjects", (void*)temp_name_find_better::address917(), (void*)addresser::getNonVirtual(derivedAddress917));
        }

    	using baseType918 = temp_name_find_better::ret918(EditorUI::*)(cocos2d::CCArray*, bool) ;
		constexpr auto baseAddress918 = (baseType918)(&EditorUI::selectObjects);
		using derivedType918 = temp_name_find_better::ret918(D<baseAddress918, UUID>::*)(cocos2d::CCArray*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress918 = (derivedType918)(&D<baseAddress918, UUID>::selectObjects);
        if (baseAddress918 != derivedAddress918) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::selectObjects", Severity::Debug);
            Interface::get()->addHook("EditorUI::selectObjects", (void*)temp_name_find_better::address918(), (void*)addresser::getNonVirtual(derivedAddress918));
        }

    	using baseType920 = temp_name_find_better::ret920(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress920 = (baseType920)(&EditorUI::undoLastAction);
		using derivedType920 = temp_name_find_better::ret920(D<baseAddress920, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress920 = (derivedType920)(&D<baseAddress920, UUID>::undoLastAction);
        if (baseAddress920 != derivedAddress920) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::undoLastAction", Severity::Debug);
            Interface::get()->addHook("EditorUI::undoLastAction", (void*)temp_name_find_better::address920(), (void*)addresser::getNonVirtual(derivedAddress920));
        }

    	using baseType921 = temp_name_find_better::ret921(EditorUI::*)() ;
		constexpr auto baseAddress921 = (baseType921)(&EditorUI::updateButtons);
		using derivedType921 = temp_name_find_better::ret921(D<baseAddress921, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress921 = (derivedType921)(&D<baseAddress921, UUID>::updateButtons);
        if (baseAddress921 != derivedAddress921) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateButtons", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateButtons", (void*)temp_name_find_better::address921(), (void*)addresser::getNonVirtual(derivedAddress921));
        }

    	using baseType922 = temp_name_find_better::ret922(EditorUI::*)() ;
		constexpr auto baseAddress922 = (baseType922)(&EditorUI::updateObjectInfoLabel);
		using derivedType922 = temp_name_find_better::ret922(D<baseAddress922, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress922 = (derivedType922)(&D<baseAddress922, UUID>::updateObjectInfoLabel);
        if (baseAddress922 != derivedAddress922) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateObjectInfoLabel", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateObjectInfoLabel", (void*)temp_name_find_better::address922(), (void*)addresser::getNonVirtual(derivedAddress922));
        }

    	using baseType923 = temp_name_find_better::ret923(EditorUI::*)() ;
		constexpr auto baseAddress923 = (baseType923)(&EditorUI::updateSlider);
		using derivedType923 = temp_name_find_better::ret923(D<baseAddress923, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress923 = (derivedType923)(&D<baseAddress923, UUID>::updateSlider);
        if (baseAddress923 != derivedAddress923) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateSlider", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateSlider", (void*)temp_name_find_better::address923(), (void*)addresser::getNonVirtual(derivedAddress923));
        }

    	using baseType924 = temp_name_find_better::ret924(EditorUI::*)(float) ;
		constexpr auto baseAddress924 = (baseType924)(&EditorUI::updateZoom);
		using derivedType924 = temp_name_find_better::ret924(D<baseAddress924, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress924 = (derivedType924)(&D<baseAddress924, UUID>::updateZoom);
        if (baseAddress924 != derivedAddress924) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateZoom", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateZoom", (void*)temp_name_find_better::address924(), (void*)addresser::getNonVirtual(derivedAddress924));
        }

    	using baseType925 = temp_name_find_better::ret925(EditorUI::*)(GameObject*, bool) ;
		constexpr auto baseAddress925 = (baseType925)(&EditorUI::selectObject);
		using derivedType925 = temp_name_find_better::ret925(D<baseAddress925, UUID>::*)(GameObject*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress925 = (derivedType925)(&D<baseAddress925, UUID>::selectObject);
        if (baseAddress925 != derivedAddress925) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::selectObject", Severity::Debug);
            Interface::get()->addHook("EditorUI::selectObject", (void*)temp_name_find_better::address925(), (void*)addresser::getNonVirtual(derivedAddress925));
        }

    	using baseType926 = temp_name_find_better::ret926(EditorUI::*)() ;
		constexpr auto baseAddress926 = (baseType926)(&EditorUI::selectAll);
		using derivedType926 = temp_name_find_better::ret926(D<baseAddress926, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress926 = (derivedType926)(&D<baseAddress926, UUID>::selectAll);
        if (baseAddress926 != derivedAddress926) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::selectAll", Severity::Debug);
            Interface::get()->addHook("EditorUI::selectAll", (void*)temp_name_find_better::address926(), (void*)addresser::getNonVirtual(derivedAddress926));
        }

    	using baseType927 = temp_name_find_better::ret927(EditorUI::*)(bool) ;
		constexpr auto baseAddress927 = (baseType927)(&EditorUI::selectAllWithDirection);
		using derivedType927 = temp_name_find_better::ret927(D<baseAddress927, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress927 = (derivedType927)(&D<baseAddress927, UUID>::selectAllWithDirection);
        if (baseAddress927 != derivedAddress927) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::selectAllWithDirection", Severity::Debug);
            Interface::get()->addHook("EditorUI::selectAllWithDirection", (void*)temp_name_find_better::address927(), (void*)addresser::getNonVirtual(derivedAddress927));
        }

    	using baseType928 = temp_name_find_better::ret928(EditorUI::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress928 = (baseType928)(&EditorUI::getTouchPoint);
		using derivedType928 = temp_name_find_better::ret928(D<baseAddress928, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress928 = (derivedType928)(&D<baseAddress928, UUID>::getTouchPoint);
        if (baseAddress928 != derivedAddress928) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::getTouchPoint", Severity::Debug);
            Interface::get()->addHook("EditorUI::getTouchPoint", (void*)temp_name_find_better::address928(), (void*)addresser::getNonVirtual(derivedAddress928));
        }

    	using baseType929 = temp_name_find_better::ret929(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress929 = (baseType929)(&EditorUI::onSelectBuildTab);
		using derivedType929 = temp_name_find_better::ret929(D<baseAddress929, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress929 = (derivedType929)(&D<baseAddress929, UUID>::onSelectBuildTab);
        if (baseAddress929 != derivedAddress929) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onSelectBuildTab", Severity::Debug);
            Interface::get()->addHook("EditorUI::onSelectBuildTab", (void*)temp_name_find_better::address929(), (void*)addresser::getNonVirtual(derivedAddress929));
        }

    	using baseType930 = temp_name_find_better::ret930(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress930 = (baseType930)(&EditorUI::onCreateButton);
		using derivedType930 = temp_name_find_better::ret930(D<baseAddress930, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress930 = (derivedType930)(&D<baseAddress930, UUID>::onCreateButton);
        if (baseAddress930 != derivedAddress930) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onCreateButton", Severity::Debug);
            Interface::get()->addHook("EditorUI::onCreateButton", (void*)temp_name_find_better::address930(), (void*)addresser::getNonVirtual(derivedAddress930));
        }

    	using baseType931 = temp_name_find_better::ret931(EditorUI::*)(const char*, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float) ;
		constexpr auto baseAddress931 = (baseType931)(&EditorUI::getSpriteButton);
		using derivedType931 = temp_name_find_better::ret931(D<baseAddress931, UUID>::*)(const char*, cocos2d::SEL_MenuHandler, cocos2d::CCMenu*, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress931 = (derivedType931)(&D<baseAddress931, UUID>::getSpriteButton);
        if (baseAddress931 != derivedAddress931) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::getSpriteButton", Severity::Debug);
            Interface::get()->addHook("EditorUI::getSpriteButton", (void*)temp_name_find_better::address931(), (void*)addresser::getNonVirtual(derivedAddress931));
        }

    	using baseType932 = temp_name_find_better::ret932(EditorUI::*)(int) ;
		constexpr auto baseAddress932 = (baseType932)(&EditorUI::offsetForKey);
		using derivedType932 = temp_name_find_better::ret932(D<baseAddress932, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress932 = (derivedType932)(&D<baseAddress932, UUID>::offsetForKey);
        if (baseAddress932 != derivedAddress932) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::offsetForKey", Severity::Debug);
            Interface::get()->addHook("EditorUI::offsetForKey", (void*)temp_name_find_better::address932(), (void*)addresser::getNonVirtual(derivedAddress932));
        }

    	using baseType933 = temp_name_find_better::ret933(EditorUI::*)() ;
		constexpr auto baseAddress933 = (baseType933)(&EditorUI::updateDeleteMenu);
		using derivedType933 = temp_name_find_better::ret933(D<baseAddress933, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress933 = (derivedType933)(&D<baseAddress933, UUID>::updateDeleteMenu);
        if (baseAddress933 != derivedAddress933) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateDeleteMenu", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateDeleteMenu", (void*)temp_name_find_better::address933(), (void*)addresser::getNonVirtual(derivedAddress933));
        }

    	using baseType934 = temp_name_find_better::ret934(EditorUI::*)(bool) ;
		constexpr auto baseAddress934 = (baseType934)(&EditorUI::updateCreateMenu);
		using derivedType934 = temp_name_find_better::ret934(D<baseAddress934, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress934 = (derivedType934)(&D<baseAddress934, UUID>::updateCreateMenu);
        if (baseAddress934 != derivedAddress934) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateCreateMenu", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateCreateMenu", (void*)temp_name_find_better::address934(), (void*)addresser::getNonVirtual(derivedAddress934));
        }

    	using baseType935 = temp_name_find_better::ret935(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress935 = (baseType935)(&EditorUI::toggleMode);
		using derivedType935 = temp_name_find_better::ret935(D<baseAddress935, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress935 = (derivedType935)(&D<baseAddress935, UUID>::toggleMode);
        if (baseAddress935 != derivedAddress935) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::toggleMode", Severity::Debug);
            Interface::get()->addHook("EditorUI::toggleMode", (void*)temp_name_find_better::address935(), (void*)addresser::getNonVirtual(derivedAddress935));
        }

    	using baseType936 = temp_name_find_better::ret936(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress936 = (baseType936)(&EditorUI::zoomIn);
		using derivedType936 = temp_name_find_better::ret936(D<baseAddress936, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress936 = (derivedType936)(&D<baseAddress936, UUID>::zoomIn);
        if (baseAddress936 != derivedAddress936) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::zoomIn", Severity::Debug);
            Interface::get()->addHook("EditorUI::zoomIn", (void*)temp_name_find_better::address936(), (void*)addresser::getNonVirtual(derivedAddress936));
        }

    	using baseType937 = temp_name_find_better::ret937(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress937 = (baseType937)(&EditorUI::zoomOut);
		using derivedType937 = temp_name_find_better::ret937(D<baseAddress937, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress937 = (derivedType937)(&D<baseAddress937, UUID>::zoomOut);
        if (baseAddress937 != derivedAddress937) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::zoomOut", Severity::Debug);
            Interface::get()->addHook("EditorUI::zoomOut", (void*)temp_name_find_better::address937(), (void*)addresser::getNonVirtual(derivedAddress937));
        }

    	using baseType938 = temp_name_find_better::ret938(EditorUI::*)(cocos2d::CCArray*, float, struct cocos2d::CCPoint) ;
		constexpr auto baseAddress938 = (baseType938)(&EditorUI::rotateObjects);
		using derivedType938 = temp_name_find_better::ret938(D<baseAddress938, UUID>::*)(cocos2d::CCArray*, float, struct cocos2d::CCPoint) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress938 = (derivedType938)(&D<baseAddress938, UUID>::rotateObjects);
        if (baseAddress938 != derivedAddress938) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::rotateObjects", Severity::Debug);
            Interface::get()->addHook("EditorUI::rotateObjects", (void*)temp_name_find_better::address938(), (void*)addresser::getNonVirtual(derivedAddress938));
        }

    	using baseType939 = temp_name_find_better::ret939(EditorUI::*)() ;
		constexpr auto baseAddress939 = (baseType939)(&EditorUI::updateGridNodeSize);
		using derivedType939 = temp_name_find_better::ret939(D<baseAddress939, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress939 = (derivedType939)(&D<baseAddress939, UUID>::updateGridNodeSize);
        if (baseAddress939 != derivedAddress939) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateGridNodeSize", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateGridNodeSize", (void*)temp_name_find_better::address939(), (void*)addresser::getNonVirtual(derivedAddress939));
        }

    	using baseType940 = temp_name_find_better::ret940(EditorUI::*)() ;
		constexpr auto baseAddress940 = (baseType940)(&EditorUI::updateSpecialUIElements);
		using derivedType940 = temp_name_find_better::ret940(D<baseAddress940, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress940 = (derivedType940)(&D<baseAddress940, UUID>::updateSpecialUIElements);
        if (baseAddress940 != derivedAddress940) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::updateSpecialUIElements", Severity::Debug);
            Interface::get()->addHook("EditorUI::updateSpecialUIElements", (void*)temp_name_find_better::address940(), (void*)addresser::getNonVirtual(derivedAddress940));
        }

    	using baseType941 = temp_name_find_better::ret941(EditorUI::*)(float, float) ;
		constexpr auto baseAddress941 = (baseType941)(&EditorUI::constrainGameLayerPosition);
		using derivedType941 = temp_name_find_better::ret941(D<baseAddress941, UUID>::*)(float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress941 = (derivedType941)(&D<baseAddress941, UUID>::constrainGameLayerPosition);
        if (baseAddress941 != derivedAddress941) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::constrainGameLayerPosition", Severity::Debug);
            Interface::get()->addHook("EditorUI::constrainGameLayerPosition", (void*)temp_name_find_better::address941(), (void*)addresser::getNonVirtual(derivedAddress941));
        }

    	using baseType942 = temp_name_find_better::ret942(EditorUI::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress942 = (baseType942)(&EditorUI::moveGameLayer);
		using derivedType942 = temp_name_find_better::ret942(D<baseAddress942, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress942 = (derivedType942)(&D<baseAddress942, UUID>::moveGameLayer);
        if (baseAddress942 != derivedAddress942) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::moveGameLayer", Severity::Debug);
            Interface::get()->addHook("EditorUI::moveGameLayer", (void*)temp_name_find_better::address942(), (void*)addresser::getNonVirtual(derivedAddress942));
        }

    	using baseType943 = temp_name_find_better::ret943(EditorUI::*)(bool) ;
		constexpr auto baseAddress943 = (baseType943)(&EditorUI::showUI);
		using derivedType943 = temp_name_find_better::ret943(D<baseAddress943, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress943 = (derivedType943)(&D<baseAddress943, UUID>::showUI);
        if (baseAddress943 != derivedAddress943) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::showUI", Severity::Debug);
            Interface::get()->addHook("EditorUI::showUI", (void*)temp_name_find_better::address943(), (void*)addresser::getNonVirtual(derivedAddress943));
        }

    	using baseType944 = temp_name_find_better::ret944(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress944 = (baseType944)(&EditorUI::editObject2);
		using derivedType944 = temp_name_find_better::ret944(D<baseAddress944, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress944 = (derivedType944)(&D<baseAddress944, UUID>::editObject2);
        if (baseAddress944 != derivedAddress944) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::editObject2", Severity::Debug);
            Interface::get()->addHook("EditorUI::editObject2", (void*)temp_name_find_better::address944(), (void*)addresser::getNonVirtual(derivedAddress944));
        }

    	using baseType945 = temp_name_find_better::ret945(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress945 = (baseType945)(&EditorUI::editGroup);
		using derivedType945 = temp_name_find_better::ret945(D<baseAddress945, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress945 = (derivedType945)(&D<baseAddress945, UUID>::editGroup);
        if (baseAddress945 != derivedAddress945) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::editGroup", Severity::Debug);
            Interface::get()->addHook("EditorUI::editGroup", (void*)temp_name_find_better::address945(), (void*)addresser::getNonVirtual(derivedAddress945));
        }

    	using baseType946 = temp_name_find_better::ret946(EditorUI::*)(EditCommand) ;
		constexpr auto baseAddress946 = (baseType946)(&EditorUI::moveObjectCall);
		using derivedType946 = temp_name_find_better::ret946(D<baseAddress946, UUID>::*)(EditCommand) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress946 = (derivedType946)(&D<baseAddress946, UUID>::moveObjectCall);
        if (baseAddress946 != derivedAddress946) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::moveObjectCall", Severity::Debug);
            Interface::get()->addHook("EditorUI::moveObjectCall", (void*)temp_name_find_better::address946(), (void*)addresser::getNonVirtual(derivedAddress946));
        }

    	using baseType947 = temp_name_find_better::ret947(EditorUI::*)(EditCommand) ;
		constexpr auto baseAddress947 = (baseType947)(&EditorUI::transformObjectCall);
		using derivedType947 = temp_name_find_better::ret947(D<baseAddress947, UUID>::*)(EditCommand) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress947 = (derivedType947)(&D<baseAddress947, UUID>::transformObjectCall);
        if (baseAddress947 != derivedAddress947) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::transformObjectCall", Severity::Debug);
            Interface::get()->addHook("EditorUI::transformObjectCall", (void*)temp_name_find_better::address947(), (void*)addresser::getNonVirtual(derivedAddress947));
        }

    	using baseType948 = temp_name_find_better::ret948(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress948 = (baseType948)(&EditorUI::onDeleteSelected);
		using derivedType948 = temp_name_find_better::ret948(D<baseAddress948, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress948 = (derivedType948)(&D<baseAddress948, UUID>::onDeleteSelected);
        if (baseAddress948 != derivedAddress948) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onDeleteSelected", Severity::Debug);
            Interface::get()->addHook("EditorUI::onDeleteSelected", (void*)temp_name_find_better::address948(), (void*)addresser::getNonVirtual(derivedAddress948));
        }

    	using baseType949 = temp_name_find_better::ret949(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress949 = (baseType949)(&EditorUI::onCopy);
		using derivedType949 = temp_name_find_better::ret949(D<baseAddress949, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress949 = (derivedType949)(&D<baseAddress949, UUID>::onCopy);
        if (baseAddress949 != derivedAddress949) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onCopy", Severity::Debug);
            Interface::get()->addHook("EditorUI::onCopy", (void*)temp_name_find_better::address949(), (void*)addresser::getNonVirtual(derivedAddress949));
        }

    	using baseType950 = temp_name_find_better::ret950(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress950 = (baseType950)(&EditorUI::onPaste);
		using derivedType950 = temp_name_find_better::ret950(D<baseAddress950, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress950 = (derivedType950)(&D<baseAddress950, UUID>::onPaste);
        if (baseAddress950 != derivedAddress950) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onPaste", Severity::Debug);
            Interface::get()->addHook("EditorUI::onPaste", (void*)temp_name_find_better::address950(), (void*)addresser::getNonVirtual(derivedAddress950));
        }

    	using baseType951 = temp_name_find_better::ret951(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress951 = (baseType951)(&EditorUI::toggleEnableRotate);
		using derivedType951 = temp_name_find_better::ret951(D<baseAddress951, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress951 = (derivedType951)(&D<baseAddress951, UUID>::toggleEnableRotate);
        if (baseAddress951 != derivedAddress951) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::toggleEnableRotate", Severity::Debug);
            Interface::get()->addHook("EditorUI::toggleEnableRotate", (void*)temp_name_find_better::address951(), (void*)addresser::getNonVirtual(derivedAddress951));
        }

    	using baseType952 = temp_name_find_better::ret952(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress952 = (baseType952)(&EditorUI::toggleFreeMove);
		using derivedType952 = temp_name_find_better::ret952(D<baseAddress952, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress952 = (derivedType952)(&D<baseAddress952, UUID>::toggleFreeMove);
        if (baseAddress952 != derivedAddress952) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::toggleFreeMove", Severity::Debug);
            Interface::get()->addHook("EditorUI::toggleFreeMove", (void*)temp_name_find_better::address952(), (void*)addresser::getNonVirtual(derivedAddress952));
        }

    	using baseType953 = temp_name_find_better::ret953(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress953 = (baseType953)(&EditorUI::toggleSwipe);
		using derivedType953 = temp_name_find_better::ret953(D<baseAddress953, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress953 = (derivedType953)(&D<baseAddress953, UUID>::toggleSwipe);
        if (baseAddress953 != derivedAddress953) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::toggleSwipe", Severity::Debug);
            Interface::get()->addHook("EditorUI::toggleSwipe", (void*)temp_name_find_better::address953(), (void*)addresser::getNonVirtual(derivedAddress953));
        }

    	using baseType954 = temp_name_find_better::ret954(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress954 = (baseType954)(&EditorUI::toggleSnap);
		using derivedType954 = temp_name_find_better::ret954(D<baseAddress954, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress954 = (derivedType954)(&D<baseAddress954, UUID>::toggleSnap);
        if (baseAddress954 != derivedAddress954) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::toggleSnap", Severity::Debug);
            Interface::get()->addHook("EditorUI::toggleSnap", (void*)temp_name_find_better::address954(), (void*)addresser::getNonVirtual(derivedAddress954));
        }

    	using baseType955 = temp_name_find_better::ret955(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress955 = (baseType955)(&EditorUI::onPlayback);
		using derivedType955 = temp_name_find_better::ret955(D<baseAddress955, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress955 = (derivedType955)(&D<baseAddress955, UUID>::onPlayback);
        if (baseAddress955 != derivedAddress955) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onPlayback", Severity::Debug);
            Interface::get()->addHook("EditorUI::onPlayback", (void*)temp_name_find_better::address955(), (void*)addresser::getNonVirtual(derivedAddress955));
        }

    	using baseType956 = temp_name_find_better::ret956(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress956 = (baseType956)(&EditorUI::onPlaytest);
		using derivedType956 = temp_name_find_better::ret956(D<baseAddress956, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress956 = (derivedType956)(&D<baseAddress956, UUID>::onPlaytest);
        if (baseAddress956 != derivedAddress956) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onPlaytest", Severity::Debug);
            Interface::get()->addHook("EditorUI::onPlaytest", (void*)temp_name_find_better::address956(), (void*)addresser::getNonVirtual(derivedAddress956));
        }

    	using baseType957 = temp_name_find_better::ret957(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress957 = (baseType957)(&EditorUI::onStopPlaytest);
		using derivedType957 = temp_name_find_better::ret957(D<baseAddress957, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress957 = (derivedType957)(&D<baseAddress957, UUID>::onStopPlaytest);
        if (baseAddress957 != derivedAddress957) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onStopPlaytest", Severity::Debug);
            Interface::get()->addHook("EditorUI::onStopPlaytest", (void*)temp_name_find_better::address957(), (void*)addresser::getNonVirtual(derivedAddress957));
        }

    	using baseType958 = temp_name_find_better::ret958(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress958 = (baseType958)(&EditorUI::onGroupUp);
		using derivedType958 = temp_name_find_better::ret958(D<baseAddress958, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress958 = (derivedType958)(&D<baseAddress958, UUID>::onGroupUp);
        if (baseAddress958 != derivedAddress958) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onGroupUp", Severity::Debug);
            Interface::get()->addHook("EditorUI::onGroupUp", (void*)temp_name_find_better::address958(), (void*)addresser::getNonVirtual(derivedAddress958));
        }

    	using baseType959 = temp_name_find_better::ret959(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress959 = (baseType959)(&EditorUI::onGroupDown);
		using derivedType959 = temp_name_find_better::ret959(D<baseAddress959, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress959 = (derivedType959)(&D<baseAddress959, UUID>::onGroupDown);
        if (baseAddress959 != derivedAddress959) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onGroupDown", Severity::Debug);
            Interface::get()->addHook("EditorUI::onGroupDown", (void*)temp_name_find_better::address959(), (void*)addresser::getNonVirtual(derivedAddress959));
        }

    	using baseType960 = temp_name_find_better::ret960(EditorUI::*)(int) ;
		constexpr auto baseAddress960 = (baseType960)(&EditorUI::selectBuildTab);
		using derivedType960 = temp_name_find_better::ret960(D<baseAddress960, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress960 = (derivedType960)(&D<baseAddress960, UUID>::selectBuildTab);
        if (baseAddress960 != derivedAddress960) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::selectBuildTab", Severity::Debug);
            Interface::get()->addHook("EditorUI::selectBuildTab", (void*)temp_name_find_better::address960(), (void*)addresser::getNonVirtual(derivedAddress960));
        }

    	using baseType961 = temp_name_find_better::ret961(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress961 = (baseType961)(&EditorUI::onPause);
		using derivedType961 = temp_name_find_better::ret961(D<baseAddress961, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress961 = (derivedType961)(&D<baseAddress961, UUID>::onPause);
        if (baseAddress961 != derivedAddress961) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onPause", Severity::Debug);
            Interface::get()->addHook("EditorUI::onPause", (void*)temp_name_find_better::address961(), (void*)addresser::getNonVirtual(derivedAddress961));
        }

    	using baseType962 = temp_name_find_better::ret962(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress962 = (baseType962)(&EditorUI::onSettings);
		using derivedType962 = temp_name_find_better::ret962(D<baseAddress962, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress962 = (derivedType962)(&D<baseAddress962, UUID>::onSettings);
        if (baseAddress962 != derivedAddress962) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onSettings", Severity::Debug);
            Interface::get()->addHook("EditorUI::onSettings", (void*)temp_name_find_better::address962(), (void*)addresser::getNonVirtual(derivedAddress962));
        }

    	using baseType963 = temp_name_find_better::ret963(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress963 = (baseType963)(&EditorUI::activateRotationControl);
		using derivedType963 = temp_name_find_better::ret963(D<baseAddress963, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress963 = (derivedType963)(&D<baseAddress963, UUID>::activateRotationControl);
        if (baseAddress963 != derivedAddress963) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::activateRotationControl", Severity::Debug);
            Interface::get()->addHook("EditorUI::activateRotationControl", (void*)temp_name_find_better::address963(), (void*)addresser::getNonVirtual(derivedAddress963));
        }

    	using baseType964 = temp_name_find_better::ret964(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress964 = (baseType964)(&EditorUI::activateScaleControl);
		using derivedType964 = temp_name_find_better::ret964(D<baseAddress964, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress964 = (derivedType964)(&D<baseAddress964, UUID>::activateScaleControl);
        if (baseAddress964 != derivedAddress964) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::activateScaleControl", Severity::Debug);
            Interface::get()->addHook("EditorUI::activateScaleControl", (void*)temp_name_find_better::address964(), (void*)addresser::getNonVirtual(derivedAddress964));
        }

    	using baseType965 = temp_name_find_better::ret965(EditorUI::*)(bool) ;
		constexpr auto baseAddress965 = (baseType965)(&EditorUI::dynamicGroupUpdate);
		using derivedType965 = temp_name_find_better::ret965(D<baseAddress965, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress965 = (derivedType965)(&D<baseAddress965, UUID>::dynamicGroupUpdate);
        if (baseAddress965 != derivedAddress965) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::dynamicGroupUpdate", Severity::Debug);
            Interface::get()->addHook("EditorUI::dynamicGroupUpdate", (void*)temp_name_find_better::address965(), (void*)addresser::getNonVirtual(derivedAddress965));
        }

    	using baseType966 = temp_name_find_better::ret966(EditorUI::*)() ;
		constexpr auto baseAddress966 = (baseType966)(&EditorUI::createRockOutline);
		using derivedType966 = temp_name_find_better::ret966(D<baseAddress966, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress966 = (derivedType966)(&D<baseAddress966, UUID>::createRockOutline);
        if (baseAddress966 != derivedAddress966) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::createRockOutline", Severity::Debug);
            Interface::get()->addHook("EditorUI::createRockOutline", (void*)temp_name_find_better::address966(), (void*)addresser::getNonVirtual(derivedAddress966));
        }

    	using baseType967 = temp_name_find_better::ret967(EditorUI::*)() ;
		constexpr auto baseAddress967 = (baseType967)(&EditorUI::createRockEdges);
		using derivedType967 = temp_name_find_better::ret967(D<baseAddress967, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress967 = (derivedType967)(&D<baseAddress967, UUID>::createRockEdges);
        if (baseAddress967 != derivedAddress967) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::createRockEdges", Severity::Debug);
            Interface::get()->addHook("EditorUI::createRockEdges", (void*)temp_name_find_better::address967(), (void*)addresser::getNonVirtual(derivedAddress967));
        }

    	using baseType968 = temp_name_find_better::ret968(EditorUI::*)() ;
		constexpr auto baseAddress968 = (baseType968)(&EditorUI::createRockBase);
		using derivedType968 = temp_name_find_better::ret968(D<baseAddress968, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress968 = (derivedType968)(&D<baseAddress968, UUID>::createRockBase);
        if (baseAddress968 != derivedAddress968) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::createRockBase", Severity::Debug);
            Interface::get()->addHook("EditorUI::createRockBase", (void*)temp_name_find_better::address968(), (void*)addresser::getNonVirtual(derivedAddress968));
        }

    	using baseType969 = temp_name_find_better::ret969(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress969 = (baseType969)(&EditorUI::onCopyState);
		using derivedType969 = temp_name_find_better::ret969(D<baseAddress969, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress969 = (derivedType969)(&D<baseAddress969, UUID>::onCopyState);
        if (baseAddress969 != derivedAddress969) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onCopyState", Severity::Debug);
            Interface::get()->addHook("EditorUI::onCopyState", (void*)temp_name_find_better::address969(), (void*)addresser::getNonVirtual(derivedAddress969));
        }

    	using baseType970 = temp_name_find_better::ret970(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress970 = (baseType970)(&EditorUI::onPasteColor);
		using derivedType970 = temp_name_find_better::ret970(D<baseAddress970, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress970 = (derivedType970)(&D<baseAddress970, UUID>::onPasteColor);
        if (baseAddress970 != derivedAddress970) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onPasteColor", Severity::Debug);
            Interface::get()->addHook("EditorUI::onPasteColor", (void*)temp_name_find_better::address970(), (void*)addresser::getNonVirtual(derivedAddress970));
        }

    	using baseType971 = temp_name_find_better::ret971(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress971 = (baseType971)(&EditorUI::onPasteState);
		using derivedType971 = temp_name_find_better::ret971(D<baseAddress971, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress971 = (derivedType971)(&D<baseAddress971, UUID>::onPasteState);
        if (baseAddress971 != derivedAddress971) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onPasteState", Severity::Debug);
            Interface::get()->addHook("EditorUI::onPasteState", (void*)temp_name_find_better::address971(), (void*)addresser::getNonVirtual(derivedAddress971));
        }

    	using baseType972 = temp_name_find_better::ret972(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress972 = (baseType972)(&EditorUI::onGroupSticky);
		using derivedType972 = temp_name_find_better::ret972(D<baseAddress972, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress972 = (derivedType972)(&D<baseAddress972, UUID>::onGroupSticky);
        if (baseAddress972 != derivedAddress972) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onGroupSticky", Severity::Debug);
            Interface::get()->addHook("EditorUI::onGroupSticky", (void*)temp_name_find_better::address972(), (void*)addresser::getNonVirtual(derivedAddress972));
        }

    	using baseType973 = temp_name_find_better::ret973(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress973 = (baseType973)(&EditorUI::onUngroupSticky);
		using derivedType973 = temp_name_find_better::ret973(D<baseAddress973, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress973 = (derivedType973)(&D<baseAddress973, UUID>::onUngroupSticky);
        if (baseAddress973 != derivedAddress973) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onUngroupSticky", Severity::Debug);
            Interface::get()->addHook("EditorUI::onUngroupSticky", (void*)temp_name_find_better::address973(), (void*)addresser::getNonVirtual(derivedAddress973));
        }

    	using baseType974 = temp_name_find_better::ret974(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress974 = (baseType974)(&EditorUI::onGoToLayer);
		using derivedType974 = temp_name_find_better::ret974(D<baseAddress974, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress974 = (derivedType974)(&D<baseAddress974, UUID>::onGoToLayer);
        if (baseAddress974 != derivedAddress974) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onGoToLayer", Severity::Debug);
            Interface::get()->addHook("EditorUI::onGoToLayer", (void*)temp_name_find_better::address974(), (void*)addresser::getNonVirtual(derivedAddress974));
        }

    	using baseType975 = temp_name_find_better::ret975(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress975 = (baseType975)(&EditorUI::onGoToBaseLayer);
		using derivedType975 = temp_name_find_better::ret975(D<baseAddress975, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress975 = (derivedType975)(&D<baseAddress975, UUID>::onGoToBaseLayer);
        if (baseAddress975 != derivedAddress975) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::onGoToBaseLayer", Severity::Debug);
            Interface::get()->addHook("EditorUI::onGoToBaseLayer", (void*)temp_name_find_better::address975(), (void*)addresser::getNonVirtual(derivedAddress975));
        }

    	using baseType976 = temp_name_find_better::ret976(EditorUI::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress976 = (baseType976)(&EditorUI::editColor);
		using derivedType976 = temp_name_find_better::ret976(D<baseAddress976, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress976 = (derivedType976)(&D<baseAddress976, UUID>::editColor);
        if (baseAddress976 != derivedAddress976) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::editColor", Severity::Debug);
            Interface::get()->addHook("EditorUI::editColor", (void*)temp_name_find_better::address976(), (void*)addresser::getNonVirtual(derivedAddress976));
        }

    	using baseType977 = temp_name_find_better::ret977(EditorUI::*)(cocos2d::CCArray*, bool) ;
		constexpr auto baseAddress977 = (baseType977)(&EditorUI::alignObjects);
		using derivedType977 = temp_name_find_better::ret977(D<baseAddress977, UUID>::*)(cocos2d::CCArray*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress977 = (derivedType977)(&D<baseAddress977, UUID>::alignObjects);
        if (baseAddress977 != derivedAddress977) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::alignObjects", Severity::Debug);
            Interface::get()->addHook("EditorUI::alignObjects", (void*)temp_name_find_better::address977(), (void*)addresser::getNonVirtual(derivedAddress977));
        }

    	using baseType978 = temp_name_find_better::ret978(EditorUI::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress978 = (baseType978)(&EditorUI::keyUp);
		using derivedType978 = temp_name_find_better::ret978(D<baseAddress978, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress978 = (derivedType978)(&D<baseAddress978, UUID>::keyUp);
        if (baseAddress978 != derivedAddress978) {
        	Interface::get()->logInfo("Adding hook at function EditorUI::keyUp", Severity::Debug);
            Interface::get()->addHook("EditorUI::keyUp", (void*)temp_name_find_better::address978(), (void*)addresser::getVirtual(derivedAddress978));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EffectGameObject : EffectGameObject, ModifierBase {
    $EffectGameObject(const $EffectGameObject& c) : EffectGameObject(c) {}
    $EffectGameObject() : $EffectGameObject(*this) {}
    ~$EffectGameObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EffectGameObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType980 = temp_name_find_better::ret980(*)(const char*);
		constexpr auto baseAddress980 = (baseType980)(&EffectGameObject::create);
		using derivedType980 = temp_name_find_better::ret980(*)(const char*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress980 = (derivedType980)(&D<baseAddress980, UUID>::create);
        if (baseAddress980 != derivedAddress980) {
        	Interface::get()->logInfo("Adding hook at function EffectGameObject::create", Severity::Debug);
            Interface::get()->addHook("EffectGameObject::create", (void*)temp_name_find_better::address980(), (void*)addresser::getNonVirtual(derivedAddress980));
        }

    	using baseType982 = temp_name_find_better::ret982(EffectGameObject::*)(GJBaseGameLayer*) ;
		constexpr auto baseAddress982 = (baseType982)(&EffectGameObject::triggerObject);
		using derivedType982 = temp_name_find_better::ret982(D<baseAddress982, UUID>::*)(GJBaseGameLayer*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress982 = (derivedType982)(&D<baseAddress982, UUID>::triggerObject);
        if (baseAddress982 != derivedAddress982) {
        	Interface::get()->logInfo("Adding hook at function EffectGameObject::triggerObject", Severity::Debug);
            Interface::get()->addHook("EffectGameObject::triggerObject", (void*)temp_name_find_better::address982(), (void*)addresser::getVirtual(derivedAddress982));
        }

    	using baseType983 = temp_name_find_better::ret983(EffectGameObject::*)() ;
		constexpr auto baseAddress983 = (baseType983)(&EffectGameObject::getSaveString);
		using derivedType983 = temp_name_find_better::ret983(D<baseAddress983, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress983 = (derivedType983)(&D<baseAddress983, UUID>::getSaveString);
        if (baseAddress983 != derivedAddress983) {
        	Interface::get()->logInfo("Adding hook at function EffectGameObject::getSaveString", Severity::Debug);
            Interface::get()->addHook("EffectGameObject::getSaveString", (void*)temp_name_find_better::address983(), (void*)addresser::getNonVirtual(derivedAddress983));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJRotationControl : GJRotationControl, ModifierBase {
    $GJRotationControl(const $GJRotationControl& c) : GJRotationControl(c) {}
    $GJRotationControl() : $GJRotationControl(*this) {}
    ~$GJRotationControl() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJRotationControl);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1240 = temp_name_find_better::ret1240(GJRotationControl::*)(cocos2d::CCPoint const&) ;
		constexpr auto baseAddress1240 = (baseType1240)(&GJRotationControl::updateSliderPosition);
		using derivedType1240 = temp_name_find_better::ret1240(D<baseAddress1240, UUID>::*)(cocos2d::CCPoint const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1240 = (derivedType1240)(&D<baseAddress1240, UUID>::updateSliderPosition);
        if (baseAddress1240 != derivedAddress1240) {
        	Interface::get()->logInfo("Adding hook at function GJRotationControl::updateSliderPosition", Severity::Debug);
            Interface::get()->addHook("GJRotationControl::updateSliderPosition", (void*)temp_name_find_better::address1240(), (void*)addresser::getNonVirtual(derivedAddress1240));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $EndPortalObject : EndPortalObject, ModifierBase {
    $EndPortalObject(const $EndPortalObject& c) : EndPortalObject(c) {}
    $EndPortalObject() : $EndPortalObject(*this) {}
    ~$EndPortalObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($EndPortalObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelDeleteDelegate : LevelDeleteDelegate, ModifierBase {
    $LevelDeleteDelegate(const $LevelDeleteDelegate& c) : LevelDeleteDelegate(c) {}
    $LevelDeleteDelegate() : $LevelDeleteDelegate(*this) {}
    ~$LevelDeleteDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelDeleteDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GManager : GManager, ModifierBase {
    $GManager(const $GManager& c) : GManager(c) {}
    $GManager() : $GManager(*this) {}
    ~$GManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1267 = temp_name_find_better::ret1267(GManager::*)() ;
		constexpr auto baseAddress1267 = (baseType1267)(&GManager::save);
		using derivedType1267 = temp_name_find_better::ret1267(D<baseAddress1267, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1267 = (derivedType1267)(&D<baseAddress1267, UUID>::save);
        if (baseAddress1267 != derivedAddress1267) {
        	Interface::get()->logInfo("Adding hook at function GManager::save", Severity::Debug);
            Interface::get()->addHook("GManager::save", (void*)temp_name_find_better::address1267(), (void*)addresser::getNonVirtual(derivedAddress1267));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ExtendedLayer : ExtendedLayer, ModifierBase {
    $ExtendedLayer(const $ExtendedLayer& c) : ExtendedLayer(c) {}
    $ExtendedLayer() : $ExtendedLayer(*this) {}
    ~$ExtendedLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ExtendedLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $FLAlertLayer : FLAlertLayer, ModifierBase {
    $FLAlertLayer(const $FLAlertLayer& c) : FLAlertLayer(c) {}
    $FLAlertLayer() : $FLAlertLayer(*this) {}
    ~$FLAlertLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($FLAlertLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType988 = temp_name_find_better::ret988(FLAlertLayer::*)() ;
		constexpr auto baseAddress988 = (baseType988)(&FLAlertLayer::onEnter);
		using derivedType988 = temp_name_find_better::ret988(D<baseAddress988, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress988 = (derivedType988)(&D<baseAddress988, UUID>::onEnter);
        if (baseAddress988 != derivedAddress988) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::onEnter", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::onEnter", (void*)temp_name_find_better::address988(), (void*)addresser::getVirtual(derivedAddress988));
        }

    	using baseType989 = temp_name_find_better::ret989(FLAlertLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress989 = (baseType989)(&FLAlertLayer::ccTouchBegan);
		using derivedType989 = temp_name_find_better::ret989(D<baseAddress989, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress989 = (derivedType989)(&D<baseAddress989, UUID>::ccTouchBegan);
        if (baseAddress989 != derivedAddress989) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::ccTouchBegan", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::ccTouchBegan", (void*)temp_name_find_better::address989(), (void*)addresser::getVirtual(derivedAddress989));
        }

    	using baseType990 = temp_name_find_better::ret990(FLAlertLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress990 = (baseType990)(&FLAlertLayer::ccTouchMoved);
		using derivedType990 = temp_name_find_better::ret990(D<baseAddress990, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress990 = (derivedType990)(&D<baseAddress990, UUID>::ccTouchMoved);
        if (baseAddress990 != derivedAddress990) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::ccTouchMoved", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::ccTouchMoved", (void*)temp_name_find_better::address990(), (void*)addresser::getVirtual(derivedAddress990));
        }

    	using baseType991 = temp_name_find_better::ret991(FLAlertLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress991 = (baseType991)(&FLAlertLayer::ccTouchEnded);
		using derivedType991 = temp_name_find_better::ret991(D<baseAddress991, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress991 = (derivedType991)(&D<baseAddress991, UUID>::ccTouchEnded);
        if (baseAddress991 != derivedAddress991) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::ccTouchEnded", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::ccTouchEnded", (void*)temp_name_find_better::address991(), (void*)addresser::getVirtual(derivedAddress991));
        }

    	using baseType992 = temp_name_find_better::ret992(FLAlertLayer::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		constexpr auto baseAddress992 = (baseType992)(&FLAlertLayer::ccTouchCancelled);
		using derivedType992 = temp_name_find_better::ret992(D<baseAddress992, UUID>::*)(cocos2d::CCTouch*, cocos2d::CCEvent*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress992 = (derivedType992)(&D<baseAddress992, UUID>::ccTouchCancelled);
        if (baseAddress992 != derivedAddress992) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::ccTouchCancelled", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::ccTouchCancelled", (void*)temp_name_find_better::address992(), (void*)addresser::getVirtual(derivedAddress992));
        }

    	using baseType993 = temp_name_find_better::ret993(FLAlertLayer::*)() ;
		constexpr auto baseAddress993 = (baseType993)(&FLAlertLayer::registerWithTouchDispatcher);
		using derivedType993 = temp_name_find_better::ret993(D<baseAddress993, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress993 = (derivedType993)(&D<baseAddress993, UUID>::registerWithTouchDispatcher);
        if (baseAddress993 != derivedAddress993) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::registerWithTouchDispatcher", (void*)temp_name_find_better::address993(), (void*)addresser::getVirtual(derivedAddress993));
        }

    	using baseType994 = temp_name_find_better::ret994(FLAlertLayer::*)() ;
		constexpr auto baseAddress994 = (baseType994)(&FLAlertLayer::keyBackClicked);
		using derivedType994 = temp_name_find_better::ret994(D<baseAddress994, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress994 = (derivedType994)(&D<baseAddress994, UUID>::keyBackClicked);
        if (baseAddress994 != derivedAddress994) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::keyBackClicked", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::keyBackClicked", (void*)temp_name_find_better::address994(), (void*)addresser::getVirtual(derivedAddress994));
        }

    	using baseType995 = temp_name_find_better::ret995(FLAlertLayer::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress995 = (baseType995)(&FLAlertLayer::keyDown);
		using derivedType995 = temp_name_find_better::ret995(D<baseAddress995, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress995 = (derivedType995)(&D<baseAddress995, UUID>::keyDown);
        if (baseAddress995 != derivedAddress995) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::keyDown", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::keyDown", (void*)temp_name_find_better::address995(), (void*)addresser::getVirtual(derivedAddress995));
        }

    	using baseType996 = temp_name_find_better::ret996(FLAlertLayer::*)() ;
		constexpr auto baseAddress996 = (baseType996)(&FLAlertLayer::show);
		using derivedType996 = temp_name_find_better::ret996(D<baseAddress996, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress996 = (derivedType996)(&D<baseAddress996, UUID>::show);
        if (baseAddress996 != derivedAddress996) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::show", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::show", (void*)temp_name_find_better::address996(), (void*)addresser::getVirtual(derivedAddress996));
        }

		using baseType998 = temp_name_find_better::ret998(*)(FLAlertLayerProtocol*, char const*, struct gd::string, char const*, char const*);
		constexpr auto baseAddress998 = (baseType998)(&FLAlertLayer::create);
		using derivedType998 = temp_name_find_better::ret998(*)(FLAlertLayerProtocol*, char const*, struct gd::string, char const*, char const*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress998 = (derivedType998)(&D<baseAddress998, UUID>::create);
        if (baseAddress998 != derivedAddress998) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::create", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::create", (void*)temp_name_find_better::address998(), (void*)addresser::getNonVirtual(derivedAddress998));
        }

		using baseType999 = temp_name_find_better::ret999(*)(FLAlertLayerProtocol*, char const*, struct gd::string, char const*, char const*, float);
		constexpr auto baseAddress999 = (baseType999)(&FLAlertLayer::create);
		using derivedType999 = temp_name_find_better::ret999(*)(FLAlertLayerProtocol*, char const*, struct gd::string, char const*, char const*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress999 = (derivedType999)(&D<baseAddress999, UUID>::create);
        if (baseAddress999 != derivedAddress999) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::create", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::create", (void*)temp_name_find_better::address999(), (void*)addresser::getNonVirtual(derivedAddress999));
        }

		using baseType1000 = temp_name_find_better::ret1000(*)(FLAlertLayerProtocol*, char const*, struct gd::string, char const*, char const*, float, bool, float);
		constexpr auto baseAddress1000 = (baseType1000)(&FLAlertLayer::create);
		using derivedType1000 = temp_name_find_better::ret1000(*)(FLAlertLayerProtocol*, char const*, struct gd::string, char const*, char const*, float, bool, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1000 = (derivedType1000)(&D<baseAddress1000, UUID>::create);
        if (baseAddress1000 != derivedAddress1000) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::create", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::create", (void*)temp_name_find_better::address1000(), (void*)addresser::getNonVirtual(derivedAddress1000));
        }

    	using baseType1001 = temp_name_find_better::ret1001(FLAlertLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1001 = (baseType1001)(&FLAlertLayer::onBtn1);
		using derivedType1001 = temp_name_find_better::ret1001(D<baseAddress1001, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1001 = (derivedType1001)(&D<baseAddress1001, UUID>::onBtn1);
        if (baseAddress1001 != derivedAddress1001) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::onBtn1", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::onBtn1", (void*)temp_name_find_better::address1001(), (void*)addresser::getNonVirtual(derivedAddress1001));
        }

    	using baseType1002 = temp_name_find_better::ret1002(FLAlertLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1002 = (baseType1002)(&FLAlertLayer::onBtn2);
		using derivedType1002 = temp_name_find_better::ret1002(D<baseAddress1002, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1002 = (derivedType1002)(&D<baseAddress1002, UUID>::onBtn2);
        if (baseAddress1002 != derivedAddress1002) {
        	Interface::get()->logInfo("Adding hook at function FLAlertLayer::onBtn2", Severity::Debug);
            Interface::get()->addHook("FLAlertLayer::onBtn2", (void*)temp_name_find_better::address1002(), (void*)addresser::getNonVirtual(derivedAddress1002));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $FLAlertLayerProtocol : FLAlertLayerProtocol, ModifierBase {
    $FLAlertLayerProtocol(const $FLAlertLayerProtocol& c) : FLAlertLayerProtocol(c) {}
    $FLAlertLayerProtocol() : $FLAlertLayerProtocol(*this) {}
    ~$FLAlertLayerProtocol() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($FLAlertLayerProtocol);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $FMODAudioEngine : FMODAudioEngine, ModifierBase {
    $FMODAudioEngine(const $FMODAudioEngine& c) : FMODAudioEngine(c) {}
    $FMODAudioEngine() : $FMODAudioEngine(*this) {}
    ~$FMODAudioEngine() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($FMODAudioEngine);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1004 = temp_name_find_better::ret1004(*)();
		constexpr auto baseAddress1004 = (baseType1004)(&FMODAudioEngine::sharedEngine);
		using derivedType1004 = temp_name_find_better::ret1004(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1004 = (derivedType1004)(&D<baseAddress1004, UUID>::sharedEngine);
        if (baseAddress1004 != derivedAddress1004) {
        	Interface::get()->logInfo("Adding hook at function FMODAudioEngine::sharedEngine", Severity::Debug);
            Interface::get()->addHook("FMODAudioEngine::sharedEngine", (void*)temp_name_find_better::address1004(), (void*)addresser::getNonVirtual(derivedAddress1004));
        }

    	using baseType1005 = temp_name_find_better::ret1005(FMODAudioEngine::*)(struct gd::string) ;
		constexpr auto baseAddress1005 = (baseType1005)(&FMODAudioEngine::preloadEffect);
		using derivedType1005 = temp_name_find_better::ret1005(D<baseAddress1005, UUID>::*)(struct gd::string) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1005 = (derivedType1005)(&D<baseAddress1005, UUID>::preloadEffect);
        if (baseAddress1005 != derivedAddress1005) {
        	Interface::get()->logInfo("Adding hook at function FMODAudioEngine::preloadEffect", Severity::Debug);
            Interface::get()->addHook("FMODAudioEngine::preloadEffect", (void*)temp_name_find_better::address1005(), (void*)addresser::getNonVirtual(derivedAddress1005));
        }

    	using baseType1006 = temp_name_find_better::ret1006(FMODAudioEngine::*)() ;
		constexpr auto baseAddress1006 = (baseType1006)(&FMODAudioEngine::isBackgroundMusicPlaying);
		using derivedType1006 = temp_name_find_better::ret1006(D<baseAddress1006, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1006 = (derivedType1006)(&D<baseAddress1006, UUID>::isBackgroundMusicPlaying);
        if (baseAddress1006 != derivedAddress1006) {
        	Interface::get()->logInfo("Adding hook at function FMODAudioEngine::isBackgroundMusicPlaying", Severity::Debug);
            Interface::get()->addHook("FMODAudioEngine::isBackgroundMusicPlaying", (void*)temp_name_find_better::address1006(), (void*)addresser::getNonVirtual(derivedAddress1006));
        }

    	using baseType1007 = temp_name_find_better::ret1007(FMODAudioEngine::*)(struct gd::string) ;
		constexpr auto baseAddress1007 = (baseType1007)(&FMODAudioEngine::isBackgroundMusicPlaying);
		using derivedType1007 = temp_name_find_better::ret1007(D<baseAddress1007, UUID>::*)(struct gd::string) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1007 = (derivedType1007)(&D<baseAddress1007, UUID>::isBackgroundMusicPlaying);
        if (baseAddress1007 != derivedAddress1007) {
        	Interface::get()->logInfo("Adding hook at function FMODAudioEngine::isBackgroundMusicPlaying", Severity::Debug);
            Interface::get()->addHook("FMODAudioEngine::isBackgroundMusicPlaying", (void*)temp_name_find_better::address1007(), (void*)addresser::getNonVirtual(derivedAddress1007));
        }

    	using baseType1008 = temp_name_find_better::ret1008(FMODAudioEngine::*)(struct gd::string, bool, bool) ;
		constexpr auto baseAddress1008 = (baseType1008)(&FMODAudioEngine::playBackgroundMusic);
		using derivedType1008 = temp_name_find_better::ret1008(D<baseAddress1008, UUID>::*)(struct gd::string, bool, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1008 = (derivedType1008)(&D<baseAddress1008, UUID>::playBackgroundMusic);
        if (baseAddress1008 != derivedAddress1008) {
        	Interface::get()->logInfo("Adding hook at function FMODAudioEngine::playBackgroundMusic", Severity::Debug);
            Interface::get()->addHook("FMODAudioEngine::playBackgroundMusic", (void*)temp_name_find_better::address1008(), (void*)addresser::getNonVirtual(derivedAddress1008));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LeaderboardsLayer : LeaderboardsLayer, ModifierBase {
    $LeaderboardsLayer(const $LeaderboardsLayer& c) : LeaderboardsLayer(c) {}
    $LeaderboardsLayer() : $LeaderboardsLayer(*this) {}
    ~$LeaderboardsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LeaderboardsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1517 = temp_name_find_better::ret1517(*)(LeaderboardState);
		constexpr auto baseAddress1517 = (baseType1517)(&LeaderboardsLayer::create);
		using derivedType1517 = temp_name_find_better::ret1517(*)(LeaderboardState);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1517 = (derivedType1517)(&D<baseAddress1517, UUID>::create);
        if (baseAddress1517 != derivedAddress1517) {
        	Interface::get()->logInfo("Adding hook at function LeaderboardsLayer::create", Severity::Debug);
            Interface::get()->addHook("LeaderboardsLayer::create", (void*)temp_name_find_better::address1517(), (void*)addresser::getNonVirtual(derivedAddress1517));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $FMODSound : FMODSound, ModifierBase {
    $FMODSound(const $FMODSound& c) : FMODSound(c) {}
    $FMODSound() : $FMODSound(*this) {}
    ~$FMODSound() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($FMODSound);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1009 = temp_name_find_better::ret1009(*)(FMOD::Sound*);
		constexpr auto baseAddress1009 = (baseType1009)(&FMODSound::create);
		using derivedType1009 = temp_name_find_better::ret1009(*)(FMOD::Sound*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1009 = (derivedType1009)(&D<baseAddress1009, UUID>::create);
        if (baseAddress1009 != derivedAddress1009) {
        	Interface::get()->logInfo("Adding hook at function FMODSound::create", Severity::Debug);
            Interface::get()->addHook("FMODSound::create", (void*)temp_name_find_better::address1009(), (void*)addresser::getNonVirtual(derivedAddress1009));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJAccountBackupDelegate : GJAccountBackupDelegate, ModifierBase {
    $GJAccountBackupDelegate(const $GJAccountBackupDelegate& c) : GJAccountBackupDelegate(c) {}
    $GJAccountBackupDelegate() : $GJAccountBackupDelegate(*this) {}
    ~$GJAccountBackupDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJAccountBackupDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJAccountDelegate : GJAccountDelegate, ModifierBase {
    $GJAccountDelegate(const $GJAccountDelegate& c) : GJAccountDelegate(c) {}
    $GJAccountDelegate() : $GJAccountDelegate(*this) {}
    ~$GJAccountDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJAccountDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJAccountLoginDelegate : GJAccountLoginDelegate, ModifierBase {
    $GJAccountLoginDelegate(const $GJAccountLoginDelegate& c) : GJAccountLoginDelegate(c) {}
    $GJAccountLoginDelegate() : $GJAccountLoginDelegate(*this) {}
    ~$GJAccountLoginDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJAccountLoginDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJAccountManager : GJAccountManager, ModifierBase {
    $GJAccountManager(const $GJAccountManager& c) : GJAccountManager(c) {}
    $GJAccountManager() : $GJAccountManager(*this) {}
    ~$GJAccountManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJAccountManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1015 = temp_name_find_better::ret1015(*)();
		constexpr auto baseAddress1015 = (baseType1015)(&GJAccountManager::sharedState);
		using derivedType1015 = temp_name_find_better::ret1015(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1015 = (derivedType1015)(&D<baseAddress1015, UUID>::sharedState);
        if (baseAddress1015 != derivedAddress1015) {
        	Interface::get()->logInfo("Adding hook at function GJAccountManager::sharedState", Severity::Debug);
            Interface::get()->addHook("GJAccountManager::sharedState", (void*)temp_name_find_better::address1015(), (void*)addresser::getNonVirtual(derivedAddress1015));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJAccountSyncDelegate : GJAccountSyncDelegate, ModifierBase {
    $GJAccountSyncDelegate(const $GJAccountSyncDelegate& c) : GJAccountSyncDelegate(c) {}
    $GJAccountSyncDelegate() : $GJAccountSyncDelegate(*this) {}
    ~$GJAccountSyncDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJAccountSyncDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJBaseGameLayer : GJBaseGameLayer, ModifierBase {
    $GJBaseGameLayer(const $GJBaseGameLayer& c) : GJBaseGameLayer(c) {}
    $GJBaseGameLayer() : $GJBaseGameLayer(*this) {}
    ~$GJBaseGameLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJBaseGameLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1025 = temp_name_find_better::ret1025(GJBaseGameLayer::*)(int, bool) ;
		constexpr auto baseAddress1025 = (baseType1025)(&GJBaseGameLayer::toggleGroupTriggered);
		using derivedType1025 = temp_name_find_better::ret1025(D<baseAddress1025, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1025 = (derivedType1025)(&D<baseAddress1025, UUID>::toggleGroupTriggered);
        if (baseAddress1025 != derivedAddress1025) {
        	Interface::get()->logInfo("Adding hook at function GJBaseGameLayer::toggleGroupTriggered", Severity::Debug);
            Interface::get()->addHook("GJBaseGameLayer::toggleGroupTriggered", (void*)temp_name_find_better::address1025(), (void*)addresser::getVirtual(derivedAddress1025));
        }

    	using baseType1026 = temp_name_find_better::ret1026(GJBaseGameLayer::*)(int) ;
		constexpr auto baseAddress1026 = (baseType1026)(&GJBaseGameLayer::spawnGroup);
		using derivedType1026 = temp_name_find_better::ret1026(D<baseAddress1026, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1026 = (derivedType1026)(&D<baseAddress1026, UUID>::spawnGroup);
        if (baseAddress1026 != derivedAddress1026) {
        	Interface::get()->logInfo("Adding hook at function GJBaseGameLayer::spawnGroup", Severity::Debug);
            Interface::get()->addHook("GJBaseGameLayer::spawnGroup", (void*)temp_name_find_better::address1026(), (void*)addresser::getVirtual(derivedAddress1026));
        }

    	using baseType1042 = temp_name_find_better::ret1042(GJBaseGameLayer::*)() ;
		constexpr auto baseAddress1042 = (baseType1042)(&GJBaseGameLayer::getCapacityString);
		using derivedType1042 = temp_name_find_better::ret1042(D<baseAddress1042, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1042 = (derivedType1042)(&D<baseAddress1042, UUID>::getCapacityString);
        if (baseAddress1042 != derivedAddress1042) {
        	Interface::get()->logInfo("Adding hook at function GJBaseGameLayer::getCapacityString", Severity::Debug);
            Interface::get()->addHook("GJBaseGameLayer::getCapacityString", (void*)temp_name_find_better::address1042(), (void*)addresser::getNonVirtual(derivedAddress1042));
        }

    	using baseType1063 = temp_name_find_better::ret1063(GJBaseGameLayer::*)(int, bool) ;
		constexpr auto baseAddress1063 = (baseType1063)(&GJBaseGameLayer::pushButton);
		using derivedType1063 = temp_name_find_better::ret1063(D<baseAddress1063, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1063 = (derivedType1063)(&D<baseAddress1063, UUID>::pushButton);
        if (baseAddress1063 != derivedAddress1063) {
        	Interface::get()->logInfo("Adding hook at function GJBaseGameLayer::pushButton", Severity::Debug);
            Interface::get()->addHook("GJBaseGameLayer::pushButton", (void*)temp_name_find_better::address1063(), (void*)addresser::getNonVirtual(derivedAddress1063));
        }

    	using baseType1066 = temp_name_find_better::ret1066(GJBaseGameLayer::*)(int, bool) ;
		constexpr auto baseAddress1066 = (baseType1066)(&GJBaseGameLayer::releaseButton);
		using derivedType1066 = temp_name_find_better::ret1066(D<baseAddress1066, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1066 = (derivedType1066)(&D<baseAddress1066, UUID>::releaseButton);
        if (baseAddress1066 != derivedAddress1066) {
        	Interface::get()->logInfo("Adding hook at function GJBaseGameLayer::releaseButton", Severity::Debug);
            Interface::get()->addHook("GJBaseGameLayer::releaseButton", (void*)temp_name_find_better::address1066(), (void*)addresser::getNonVirtual(derivedAddress1066));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJColorSetupLayer : GJColorSetupLayer, ModifierBase {
    $GJColorSetupLayer(const $GJColorSetupLayer& c) : GJColorSetupLayer(c) {}
    $GJColorSetupLayer() : $GJColorSetupLayer(*this) {}
    ~$GJColorSetupLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJColorSetupLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJComment : GJComment, ModifierBase {
    $GJComment(const $GJComment& c) : GJComment(c) {}
    $GJComment() : $GJComment(*this) {}
    ~$GJComment() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJComment);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1091 = temp_name_find_better::ret1091(*)(cocos2d::CCDictionary*);
		constexpr auto baseAddress1091 = (baseType1091)(&GJComment::create);
		using derivedType1091 = temp_name_find_better::ret1091(*)(cocos2d::CCDictionary*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1091 = (derivedType1091)(&D<baseAddress1091, UUID>::create);
        if (baseAddress1091 != derivedAddress1091) {
        	Interface::get()->logInfo("Adding hook at function GJComment::create", Severity::Debug);
            Interface::get()->addHook("GJComment::create", (void*)temp_name_find_better::address1091(), (void*)addresser::getNonVirtual(derivedAddress1091));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJCommentListLayer : GJCommentListLayer, ModifierBase {
    $GJCommentListLayer(const $GJCommentListLayer& c) : GJCommentListLayer(c) {}
    $GJCommentListLayer() : $GJCommentListLayer(*this) {}
    ~$GJCommentListLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJCommentListLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LikeItemDelegate : LikeItemDelegate, ModifierBase {
    $LikeItemDelegate(const $LikeItemDelegate& c) : LikeItemDelegate(c) {}
    $LikeItemDelegate() : $LikeItemDelegate(*this) {}
    ~$LikeItemDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LikeItemDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJDropDownLayer : GJDropDownLayer, ModifierBase {
    $GJDropDownLayer(const $GJDropDownLayer& c) : GJDropDownLayer(c) {}
    $GJDropDownLayer() : $GJDropDownLayer(*this) {}
    ~$GJDropDownLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJDropDownLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1095 = temp_name_find_better::ret1095(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1095 = (baseType1095)(&GJDropDownLayer::enterLayer);
		using derivedType1095 = temp_name_find_better::ret1095(D<baseAddress1095, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1095 = (derivedType1095)(&D<baseAddress1095, UUID>::enterLayer);
        if (baseAddress1095 != derivedAddress1095) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::enterLayer", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::enterLayer", (void*)temp_name_find_better::address1095(), (void*)addresser::getVirtual(derivedAddress1095));
        }

    	using baseType1096 = temp_name_find_better::ret1096(GJDropDownLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1096 = (baseType1096)(&GJDropDownLayer::exitLayer);
		using derivedType1096 = temp_name_find_better::ret1096(D<baseAddress1096, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1096 = (derivedType1096)(&D<baseAddress1096, UUID>::exitLayer);
        if (baseAddress1096 != derivedAddress1096) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::exitLayer", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::exitLayer", (void*)temp_name_find_better::address1096(), (void*)addresser::getVirtual(derivedAddress1096));
        }

    	using baseType1097 = temp_name_find_better::ret1097(GJDropDownLayer::*)(bool) ;
		constexpr auto baseAddress1097 = (baseType1097)(&GJDropDownLayer::showLayer);
		using derivedType1097 = temp_name_find_better::ret1097(D<baseAddress1097, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1097 = (derivedType1097)(&D<baseAddress1097, UUID>::showLayer);
        if (baseAddress1097 != derivedAddress1097) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::showLayer", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::showLayer", (void*)temp_name_find_better::address1097(), (void*)addresser::getVirtual(derivedAddress1097));
        }

    	using baseType1098 = temp_name_find_better::ret1098(GJDropDownLayer::*)(bool) ;
		constexpr auto baseAddress1098 = (baseType1098)(&GJDropDownLayer::hideLayer);
		using derivedType1098 = temp_name_find_better::ret1098(D<baseAddress1098, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1098 = (derivedType1098)(&D<baseAddress1098, UUID>::hideLayer);
        if (baseAddress1098 != derivedAddress1098) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::hideLayer", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::hideLayer", (void*)temp_name_find_better::address1098(), (void*)addresser::getVirtual(derivedAddress1098));
        }

    	using baseType1099 = temp_name_find_better::ret1099(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1099 = (baseType1099)(&GJDropDownLayer::layerVisible);
		using derivedType1099 = temp_name_find_better::ret1099(D<baseAddress1099, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1099 = (derivedType1099)(&D<baseAddress1099, UUID>::layerVisible);
        if (baseAddress1099 != derivedAddress1099) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::layerVisible", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::layerVisible", (void*)temp_name_find_better::address1099(), (void*)addresser::getVirtual(derivedAddress1099));
        }

    	using baseType1100 = temp_name_find_better::ret1100(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1100 = (baseType1100)(&GJDropDownLayer::layerHidden);
		using derivedType1100 = temp_name_find_better::ret1100(D<baseAddress1100, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1100 = (derivedType1100)(&D<baseAddress1100, UUID>::layerHidden);
        if (baseAddress1100 != derivedAddress1100) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::layerHidden", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::layerHidden", (void*)temp_name_find_better::address1100(), (void*)addresser::getVirtual(derivedAddress1100));
        }

    	using baseType1102 = temp_name_find_better::ret1102(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1102 = (baseType1102)(&GJDropDownLayer::disableUI);
		using derivedType1102 = temp_name_find_better::ret1102(D<baseAddress1102, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1102 = (derivedType1102)(&D<baseAddress1102, UUID>::disableUI);
        if (baseAddress1102 != derivedAddress1102) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::disableUI", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::disableUI", (void*)temp_name_find_better::address1102(), (void*)addresser::getVirtual(derivedAddress1102));
        }

    	using baseType1103 = temp_name_find_better::ret1103(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1103 = (baseType1103)(&GJDropDownLayer::enableUI);
		using derivedType1103 = temp_name_find_better::ret1103(D<baseAddress1103, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1103 = (derivedType1103)(&D<baseAddress1103, UUID>::enableUI);
        if (baseAddress1103 != derivedAddress1103) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::enableUI", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::enableUI", (void*)temp_name_find_better::address1103(), (void*)addresser::getVirtual(derivedAddress1103));
        }

    	using baseType1109 = temp_name_find_better::ret1109(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1109 = (baseType1109)(&GJDropDownLayer::draw);
		using derivedType1109 = temp_name_find_better::ret1109(D<baseAddress1109, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1109 = (derivedType1109)(&D<baseAddress1109, UUID>::draw);
        if (baseAddress1109 != derivedAddress1109) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::draw", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::draw", (void*)temp_name_find_better::address1109(), (void*)addresser::getVirtual(derivedAddress1109));
        }

    	using baseType1110 = temp_name_find_better::ret1110(GJDropDownLayer::*)(const char*, float) ;
		constexpr auto baseAddress1110 = (baseType1110)(&GJDropDownLayer::init);
		using derivedType1110 = temp_name_find_better::ret1110(D<baseAddress1110, UUID>::*)(const char*, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1110 = (derivedType1110)(&D<baseAddress1110, UUID>::init);
        if (baseAddress1110 != derivedAddress1110) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::init", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::init", (void*)temp_name_find_better::address1110(), (void*)addresser::getNonVirtual(derivedAddress1110));
        }

    	using baseType1111 = temp_name_find_better::ret1111(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1111 = (baseType1111)(&GJDropDownLayer::registerWithTouchDispatcher);
		using derivedType1111 = temp_name_find_better::ret1111(D<baseAddress1111, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1111 = (derivedType1111)(&D<baseAddress1111, UUID>::registerWithTouchDispatcher);
        if (baseAddress1111 != derivedAddress1111) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::registerWithTouchDispatcher", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::registerWithTouchDispatcher", (void*)temp_name_find_better::address1111(), (void*)addresser::getVirtual(derivedAddress1111));
        }

    	using baseType1112 = temp_name_find_better::ret1112(GJDropDownLayer::*)() ;
		constexpr auto baseAddress1112 = (baseType1112)(&GJDropDownLayer::keyBackClicked);
		using derivedType1112 = temp_name_find_better::ret1112(D<baseAddress1112, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1112 = (derivedType1112)(&D<baseAddress1112, UUID>::keyBackClicked);
        if (baseAddress1112 != derivedAddress1112) {
        	Interface::get()->logInfo("Adding hook at function GJDropDownLayer::keyBackClicked", Severity::Debug);
            Interface::get()->addHook("GJDropDownLayer::keyBackClicked", (void*)temp_name_find_better::address1112(), (void*)addresser::getVirtual(derivedAddress1112));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJDropDownLayerDelegate : GJDropDownLayerDelegate, ModifierBase {
    $GJDropDownLayerDelegate(const $GJDropDownLayerDelegate& c) : GJDropDownLayerDelegate(c) {}
    $GJDropDownLayerDelegate() : $GJDropDownLayerDelegate(*this) {}
    ~$GJDropDownLayerDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJDropDownLayerDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJEffectManager : GJEffectManager, ModifierBase {
    $GJEffectManager(const $GJEffectManager& c) : GJEffectManager(c) {}
    $GJEffectManager() : $GJEffectManager(*this) {}
    ~$GJEffectManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJEffectManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1136 = temp_name_find_better::ret1136(GJEffectManager::*)(int) ;
		constexpr auto baseAddress1136 = (baseType1136)(&GJEffectManager::getColorAction);
		using derivedType1136 = temp_name_find_better::ret1136(D<baseAddress1136, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1136 = (derivedType1136)(&D<baseAddress1136, UUID>::getColorAction);
        if (baseAddress1136 != derivedAddress1136) {
        	Interface::get()->logInfo("Adding hook at function GJEffectManager::getColorAction", Severity::Debug);
            Interface::get()->addHook("GJEffectManager::getColorAction", (void*)temp_name_find_better::address1136(), (void*)addresser::getNonVirtual(derivedAddress1136));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJGameLevel : GJGameLevel, ModifierBase {
    $GJGameLevel(const $GJGameLevel& c) : GJGameLevel(c) {}
    $GJGameLevel() : $GJGameLevel(*this) {}
    ~$GJGameLevel() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJGameLevel);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1203 = temp_name_find_better::ret1203(*)();
		constexpr auto baseAddress1203 = (baseType1203)(&GJGameLevel::create);
		using derivedType1203 = temp_name_find_better::ret1203(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1203 = (derivedType1203)(&D<baseAddress1203, UUID>::create);
        if (baseAddress1203 != derivedAddress1203) {
        	Interface::get()->logInfo("Adding hook at function GJGameLevel::create", Severity::Debug);
            Interface::get()->addHook("GJGameLevel::create", (void*)temp_name_find_better::address1203(), (void*)addresser::getNonVirtual(derivedAddress1203));
        }

    	using baseType1204 = temp_name_find_better::ret1204(GJGameLevel::*)() ;
		constexpr auto baseAddress1204 = (baseType1204)(&GJGameLevel::getAudioFileName);
		using derivedType1204 = temp_name_find_better::ret1204(D<baseAddress1204, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1204 = (derivedType1204)(&D<baseAddress1204, UUID>::getAudioFileName);
        if (baseAddress1204 != derivedAddress1204) {
        	Interface::get()->logInfo("Adding hook at function GJGameLevel::getAudioFileName", Severity::Debug);
            Interface::get()->addHook("GJGameLevel::getAudioFileName", (void*)temp_name_find_better::address1204(), (void*)addresser::getNonVirtual(derivedAddress1204));
        }

    	using baseType1208 = temp_name_find_better::ret1208(GJGameLevel::*)() ;
		constexpr auto baseAddress1208 = (baseType1208)(&GJGameLevel::levelWasAltered);
		using derivedType1208 = temp_name_find_better::ret1208(D<baseAddress1208, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1208 = (derivedType1208)(&D<baseAddress1208, UUID>::levelWasAltered);
        if (baseAddress1208 != derivedAddress1208) {
        	Interface::get()->logInfo("Adding hook at function GJGameLevel::levelWasAltered", Severity::Debug);
            Interface::get()->addHook("GJGameLevel::levelWasAltered", (void*)temp_name_find_better::address1208(), (void*)addresser::getNonVirtual(derivedAddress1208));
        }

    	using baseType1210 = temp_name_find_better::ret1210(GJGameLevel::*)(DS_Dictionary*) ;
		constexpr auto baseAddress1210 = (baseType1210)(&GJGameLevel::dataLoaded);
		using derivedType1210 = temp_name_find_better::ret1210(D<baseAddress1210, UUID>::*)(DS_Dictionary*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1210 = (derivedType1210)(&D<baseAddress1210, UUID>::dataLoaded);
        if (baseAddress1210 != derivedAddress1210) {
        	Interface::get()->logInfo("Adding hook at function GJGameLevel::dataLoaded", Severity::Debug);
            Interface::get()->addHook("GJGameLevel::dataLoaded", (void*)temp_name_find_better::address1210(), (void*)addresser::getNonVirtual(derivedAddress1210));
        }

    	using baseType1211 = temp_name_find_better::ret1211(GJGameLevel::*)() ;
		constexpr auto baseAddress1211 = (baseType1211)(&GJGameLevel::getAverageDifficulty);
		using derivedType1211 = temp_name_find_better::ret1211(D<baseAddress1211, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1211 = (derivedType1211)(&D<baseAddress1211, UUID>::getAverageDifficulty);
        if (baseAddress1211 != derivedAddress1211) {
        	Interface::get()->logInfo("Adding hook at function GJGameLevel::getAverageDifficulty", Severity::Debug);
            Interface::get()->addHook("GJGameLevel::getAverageDifficulty", (void*)temp_name_find_better::address1211(), (void*)addresser::getNonVirtual(derivedAddress1211));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJGarageLayer : GJGarageLayer, ModifierBase {
    $GJGarageLayer(const $GJGarageLayer& c) : GJGarageLayer(c) {}
    $GJGarageLayer() : $GJGarageLayer(*this) {}
    ~$GJGarageLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJGarageLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1214 = temp_name_find_better::ret1214(*)();
		constexpr auto baseAddress1214 = (baseType1214)(&GJGarageLayer::create);
		using derivedType1214 = temp_name_find_better::ret1214(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1214 = (derivedType1214)(&D<baseAddress1214, UUID>::create);
        if (baseAddress1214 != derivedAddress1214) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::create", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::create", (void*)temp_name_find_better::address1214(), (void*)addresser::getNonVirtual(derivedAddress1214));
        }

    	using baseType1215 = temp_name_find_better::ret1215(GJGarageLayer::*)() ;
		constexpr auto baseAddress1215 = (baseType1215)(&GJGarageLayer::init);
		using derivedType1215 = temp_name_find_better::ret1215(D<baseAddress1215, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1215 = (derivedType1215)(&D<baseAddress1215, UUID>::init);
        if (baseAddress1215 != derivedAddress1215) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::init", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::init", (void*)temp_name_find_better::address1215(), (void*)addresser::getVirtual(derivedAddress1215));
        }

    	using baseType1216 = temp_name_find_better::ret1216(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1216 = (baseType1216)(&GJGarageLayer::onSelectTab);
		using derivedType1216 = temp_name_find_better::ret1216(D<baseAddress1216, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1216 = (derivedType1216)(&D<baseAddress1216, UUID>::onSelectTab);
        if (baseAddress1216 != derivedAddress1216) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onSelectTab", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onSelectTab", (void*)temp_name_find_better::address1216(), (void*)addresser::getNonVirtual(derivedAddress1216));
        }

    	using baseType1217 = temp_name_find_better::ret1217(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1217 = (baseType1217)(&GJGarageLayer::onPlayerIcon);
		using derivedType1217 = temp_name_find_better::ret1217(D<baseAddress1217, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1217 = (derivedType1217)(&D<baseAddress1217, UUID>::onPlayerIcon);
        if (baseAddress1217 != derivedAddress1217) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onPlayerIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onPlayerIcon", (void*)temp_name_find_better::address1217(), (void*)addresser::getNonVirtual(derivedAddress1217));
        }

    	using baseType1218 = temp_name_find_better::ret1218(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1218 = (baseType1218)(&GJGarageLayer::onShipIcon);
		using derivedType1218 = temp_name_find_better::ret1218(D<baseAddress1218, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1218 = (derivedType1218)(&D<baseAddress1218, UUID>::onShipIcon);
        if (baseAddress1218 != derivedAddress1218) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onShipIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onShipIcon", (void*)temp_name_find_better::address1218(), (void*)addresser::getNonVirtual(derivedAddress1218));
        }

    	using baseType1219 = temp_name_find_better::ret1219(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1219 = (baseType1219)(&GJGarageLayer::onBallIcon);
		using derivedType1219 = temp_name_find_better::ret1219(D<baseAddress1219, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1219 = (derivedType1219)(&D<baseAddress1219, UUID>::onBallIcon);
        if (baseAddress1219 != derivedAddress1219) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onBallIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onBallIcon", (void*)temp_name_find_better::address1219(), (void*)addresser::getNonVirtual(derivedAddress1219));
        }

    	using baseType1220 = temp_name_find_better::ret1220(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1220 = (baseType1220)(&GJGarageLayer::onBirdIcon);
		using derivedType1220 = temp_name_find_better::ret1220(D<baseAddress1220, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1220 = (derivedType1220)(&D<baseAddress1220, UUID>::onBirdIcon);
        if (baseAddress1220 != derivedAddress1220) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onBirdIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onBirdIcon", (void*)temp_name_find_better::address1220(), (void*)addresser::getNonVirtual(derivedAddress1220));
        }

    	using baseType1221 = temp_name_find_better::ret1221(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1221 = (baseType1221)(&GJGarageLayer::onDartIcon);
		using derivedType1221 = temp_name_find_better::ret1221(D<baseAddress1221, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1221 = (derivedType1221)(&D<baseAddress1221, UUID>::onDartIcon);
        if (baseAddress1221 != derivedAddress1221) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onDartIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onDartIcon", (void*)temp_name_find_better::address1221(), (void*)addresser::getNonVirtual(derivedAddress1221));
        }

    	using baseType1222 = temp_name_find_better::ret1222(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1222 = (baseType1222)(&GJGarageLayer::onRobotIcon);
		using derivedType1222 = temp_name_find_better::ret1222(D<baseAddress1222, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1222 = (derivedType1222)(&D<baseAddress1222, UUID>::onRobotIcon);
        if (baseAddress1222 != derivedAddress1222) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onRobotIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onRobotIcon", (void*)temp_name_find_better::address1222(), (void*)addresser::getNonVirtual(derivedAddress1222));
        }

    	using baseType1223 = temp_name_find_better::ret1223(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1223 = (baseType1223)(&GJGarageLayer::onSpiderIcon);
		using derivedType1223 = temp_name_find_better::ret1223(D<baseAddress1223, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1223 = (derivedType1223)(&D<baseAddress1223, UUID>::onSpiderIcon);
        if (baseAddress1223 != derivedAddress1223) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onSpiderIcon", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onSpiderIcon", (void*)temp_name_find_better::address1223(), (void*)addresser::getNonVirtual(derivedAddress1223));
        }

    	using baseType1224 = temp_name_find_better::ret1224(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1224 = (baseType1224)(&GJGarageLayer::onShards);
		using derivedType1224 = temp_name_find_better::ret1224(D<baseAddress1224, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1224 = (derivedType1224)(&D<baseAddress1224, UUID>::onShards);
        if (baseAddress1224 != derivedAddress1224) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onShards", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onShards", (void*)temp_name_find_better::address1224(), (void*)addresser::getNonVirtual(derivedAddress1224));
        }

    	using baseType1225 = temp_name_find_better::ret1225(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1225 = (baseType1225)(&GJGarageLayer::onBack);
		using derivedType1225 = temp_name_find_better::ret1225(D<baseAddress1225, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1225 = (derivedType1225)(&D<baseAddress1225, UUID>::onBack);
        if (baseAddress1225 != derivedAddress1225) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onBack", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onBack", (void*)temp_name_find_better::address1225(), (void*)addresser::getNonVirtual(derivedAddress1225));
        }

    	using baseType1226 = temp_name_find_better::ret1226(GJGarageLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1226 = (baseType1226)(&GJGarageLayer::onShop);
		using derivedType1226 = temp_name_find_better::ret1226(D<baseAddress1226, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1226 = (derivedType1226)(&D<baseAddress1226, UUID>::onShop);
        if (baseAddress1226 != derivedAddress1226) {
        	Interface::get()->logInfo("Adding hook at function GJGarageLayer::onShop", Severity::Debug);
            Interface::get()->addHook("GJGarageLayer::onShop", (void*)temp_name_find_better::address1226(), (void*)addresser::getNonVirtual(derivedAddress1226));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJGroundLayer : GJGroundLayer, ModifierBase {
    $GJGroundLayer(const $GJGroundLayer& c) : GJGroundLayer(c) {}
    $GJGroundLayer() : $GJGroundLayer(*this) {}
    ~$GJGroundLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJGroundLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1227 = temp_name_find_better::ret1227(GJGroundLayer::*)() ;
		constexpr auto baseAddress1227 = (baseType1227)(&GJGroundLayer::updateGroundWidth);
		using derivedType1227 = temp_name_find_better::ret1227(D<baseAddress1227, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1227 = (derivedType1227)(&D<baseAddress1227, UUID>::updateGroundWidth);
        if (baseAddress1227 != derivedAddress1227) {
        	Interface::get()->logInfo("Adding hook at function GJGroundLayer::updateGroundWidth", Severity::Debug);
            Interface::get()->addHook("GJGroundLayer::updateGroundWidth", (void*)temp_name_find_better::address1227(), (void*)addresser::getNonVirtual(derivedAddress1227));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJItemIcon : GJItemIcon, ModifierBase {
    $GJItemIcon(const $GJItemIcon& c) : GJItemIcon(c) {}
    $GJItemIcon() : $GJItemIcon(*this) {}
    ~$GJItemIcon() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJItemIcon);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1229 = temp_name_find_better::ret1229(*)(UnlockType, int, cocos2d::ccColor3B, cocos2d::ccColor3B, bool, bool, bool, cocos2d::ccColor3B);
		constexpr auto baseAddress1229 = (baseType1229)(&GJItemIcon::create);
		using derivedType1229 = temp_name_find_better::ret1229(*)(UnlockType, int, cocos2d::ccColor3B, cocos2d::ccColor3B, bool, bool, bool, cocos2d::ccColor3B);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1229 = (derivedType1229)(&D<baseAddress1229, UUID>::create);
        if (baseAddress1229 != derivedAddress1229) {
        	Interface::get()->logInfo("Adding hook at function GJItemIcon::create", Severity::Debug);
            Interface::get()->addHook("GJItemIcon::create", (void*)temp_name_find_better::address1229(), (void*)addresser::getNonVirtual(derivedAddress1229));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJListLayer : GJListLayer, ModifierBase {
    $GJListLayer(const $GJListLayer& c) : GJListLayer(c) {}
    $GJListLayer() : $GJListLayer(*this) {}
    ~$GJListLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJListLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1231 = temp_name_find_better::ret1231(*)(cocos2d::CCObject*, const char*, cocos2d::ccColor4B, float, float);
		constexpr auto baseAddress1231 = (baseType1231)(&GJListLayer::create);
		using derivedType1231 = temp_name_find_better::ret1231(*)(cocos2d::CCObject*, const char*, cocos2d::ccColor4B, float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1231 = (derivedType1231)(&D<baseAddress1231, UUID>::create);
        if (baseAddress1231 != derivedAddress1231) {
        	Interface::get()->logInfo("Adding hook at function GJListLayer::create", Severity::Debug);
            Interface::get()->addHook("GJListLayer::create", (void*)temp_name_find_better::address1231(), (void*)addresser::getNonVirtual(derivedAddress1231));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJMapPack : GJMapPack, ModifierBase {
    $GJMapPack(const $GJMapPack& c) : GJMapPack(c) {}
    $GJMapPack() : $GJMapPack(*this) {}
    ~$GJMapPack() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJMapPack);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetIDPopup : SetIDPopup, ModifierBase {
    $SetIDPopup(const $SetIDPopup& c) : SetIDPopup(c) {}
    $SetIDPopup() : $SetIDPopup(*this) {}
    ~$SetIDPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetIDPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelBrowserLayer : LevelBrowserLayer, ModifierBase {
    $LevelBrowserLayer(const $LevelBrowserLayer& c) : LevelBrowserLayer(c) {}
    $LevelBrowserLayer() : $LevelBrowserLayer(*this) {}
    ~$LevelBrowserLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelBrowserLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1519 = temp_name_find_better::ret1519(LevelBrowserLayer::*)(GJSearchObject*) ;
		constexpr auto baseAddress1519 = (baseType1519)(&LevelBrowserLayer::init);
		using derivedType1519 = temp_name_find_better::ret1519(D<baseAddress1519, UUID>::*)(GJSearchObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1519 = (derivedType1519)(&D<baseAddress1519, UUID>::init);
        if (baseAddress1519 != derivedAddress1519) {
        	Interface::get()->logInfo("Adding hook at function LevelBrowserLayer::init", Severity::Debug);
            Interface::get()->addHook("LevelBrowserLayer::init", (void*)temp_name_find_better::address1519(), (void*)addresser::getNonVirtual(derivedAddress1519));
        }

    	using baseType1520 = temp_name_find_better::ret1520(LevelBrowserLayer::*)(cocos2d::CCArray*) ;
		constexpr auto baseAddress1520 = (baseType1520)(&LevelBrowserLayer::setupLevelBrowser);
		using derivedType1520 = temp_name_find_better::ret1520(D<baseAddress1520, UUID>::*)(cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1520 = (derivedType1520)(&D<baseAddress1520, UUID>::setupLevelBrowser);
        if (baseAddress1520 != derivedAddress1520) {
        	Interface::get()->logInfo("Adding hook at function LevelBrowserLayer::setupLevelBrowser", Severity::Debug);
            Interface::get()->addHook("LevelBrowserLayer::setupLevelBrowser", (void*)temp_name_find_better::address1520(), (void*)addresser::getNonVirtual(derivedAddress1520));
        }

		using baseType1521 = temp_name_find_better::ret1521(*)(GJSearchObject*);
		constexpr auto baseAddress1521 = (baseType1521)(&LevelBrowserLayer::create);
		using derivedType1521 = temp_name_find_better::ret1521(*)(GJSearchObject*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1521 = (derivedType1521)(&D<baseAddress1521, UUID>::create);
        if (baseAddress1521 != derivedAddress1521) {
        	Interface::get()->logInfo("Adding hook at function LevelBrowserLayer::create", Severity::Debug);
            Interface::get()->addHook("LevelBrowserLayer::create", (void*)temp_name_find_better::address1521(), (void*)addresser::getNonVirtual(derivedAddress1521));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJRewardObject : GJRewardObject, ModifierBase {
    $GJRewardObject(const $GJRewardObject& c) : GJRewardObject(c) {}
    $GJRewardObject() : $GJRewardObject(*this) {}
    ~$GJRewardObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJRewardObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJRobotSprite : GJRobotSprite, ModifierBase {
    $GJRobotSprite(const $GJRobotSprite& c) : GJRobotSprite(c) {}
    $GJRobotSprite() : $GJRobotSprite(*this) {}
    ~$GJRobotSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJRobotSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $RateLevelDelegate : RateLevelDelegate, ModifierBase {
    $RateLevelDelegate(const $RateLevelDelegate& c) : RateLevelDelegate(c) {}
    $RateLevelDelegate() : $RateLevelDelegate(*this) {}
    ~$RateLevelDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($RateLevelDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJRotationControlDelegate : GJRotationControlDelegate, ModifierBase {
    $GJRotationControlDelegate(const $GJRotationControlDelegate& c) : GJRotationControlDelegate(c) {}
    $GJRotationControlDelegate() : $GJRotationControlDelegate(*this) {}
    ~$GJRotationControlDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJRotationControlDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJScaleControl : GJScaleControl, ModifierBase {
    $GJScaleControl(const $GJScaleControl& c) : GJScaleControl(c) {}
    $GJScaleControl() : $GJScaleControl(*this) {}
    ~$GJScaleControl() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJScaleControl);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1241 = temp_name_find_better::ret1241(GJScaleControl::*)(float) ;
		constexpr auto baseAddress1241 = (baseType1241)(&GJScaleControl::updateLabel);
		using derivedType1241 = temp_name_find_better::ret1241(D<baseAddress1241, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1241 = (derivedType1241)(&D<baseAddress1241, UUID>::updateLabel);
        if (baseAddress1241 != derivedAddress1241) {
        	Interface::get()->logInfo("Adding hook at function GJScaleControl::updateLabel", Severity::Debug);
            Interface::get()->addHook("GJScaleControl::updateLabel", (void*)temp_name_find_better::address1241(), (void*)addresser::getNonVirtual(derivedAddress1241));
        }

    	using baseType1242 = temp_name_find_better::ret1242(GJScaleControl::*)(GameObject*, cocos2d::CCArray*) ;
		constexpr auto baseAddress1242 = (baseType1242)(&GJScaleControl::loadValues);
		using derivedType1242 = temp_name_find_better::ret1242(D<baseAddress1242, UUID>::*)(GameObject*, cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1242 = (derivedType1242)(&D<baseAddress1242, UUID>::loadValues);
        if (baseAddress1242 != derivedAddress1242) {
        	Interface::get()->logInfo("Adding hook at function GJScaleControl::loadValues", Severity::Debug);
            Interface::get()->addHook("GJScaleControl::loadValues", (void*)temp_name_find_better::address1242(), (void*)addresser::getNonVirtual(derivedAddress1242));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJScaleControlDelegate : GJScaleControlDelegate, ModifierBase {
    $GJScaleControlDelegate(const $GJScaleControlDelegate& c) : GJScaleControlDelegate(c) {}
    $GJScaleControlDelegate() : $GJScaleControlDelegate(*this) {}
    ~$GJScaleControlDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJScaleControlDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetIDPopupDelegate : SetIDPopupDelegate, ModifierBase {
    $SetIDPopupDelegate(const $SetIDPopupDelegate& c) : SetIDPopupDelegate(c) {}
    $SetIDPopupDelegate() : $SetIDPopupDelegate(*this) {}
    ~$SetIDPopupDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetIDPopupDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJSearchObject : GJSearchObject, ModifierBase {
    $GJSearchObject(const $GJSearchObject& c) : GJSearchObject(c) {}
    $GJSearchObject() : $GJSearchObject(*this) {}
    ~$GJSearchObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJSearchObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1244 = temp_name_find_better::ret1244(*)(SearchType);
		constexpr auto baseAddress1244 = (baseType1244)(&GJSearchObject::create);
		using derivedType1244 = temp_name_find_better::ret1244(*)(SearchType);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1244 = (derivedType1244)(&D<baseAddress1244, UUID>::create);
        if (baseAddress1244 != derivedAddress1244) {
        	Interface::get()->logInfo("Adding hook at function GJSearchObject::create", Severity::Debug);
            Interface::get()->addHook("GJSearchObject::create", (void*)temp_name_find_better::address1244(), (void*)addresser::getNonVirtual(derivedAddress1244));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJSpecialColorSelectDelegate : GJSpecialColorSelectDelegate, ModifierBase {
    $GJSpecialColorSelectDelegate(const $GJSpecialColorSelectDelegate& c) : GJSpecialColorSelectDelegate(c) {}
    $GJSpecialColorSelectDelegate() : $GJSpecialColorSelectDelegate(*this) {}
    ~$GJSpecialColorSelectDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJSpecialColorSelectDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJSpiderSprite : GJSpiderSprite, ModifierBase {
    $GJSpiderSprite(const $GJSpiderSprite& c) : GJSpiderSprite(c) {}
    $GJSpiderSprite() : $GJSpiderSprite(*this) {}
    ~$GJSpiderSprite() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJSpiderSprite);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GJSpriteColor : GJSpriteColor, ModifierBase {
    $GJSpriteColor(const $GJSpriteColor& c) : GJSpriteColor(c) {}
    $GJSpriteColor() : $GJSpriteColor(*this) {}
    ~$GJSpriteColor() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GJSpriteColor);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameManager : GameManager, ModifierBase {
    $GameManager(const $GameManager& c) : GameManager(c) {}
    $GameManager() : $GameManager(*this) {}
    ~$GameManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1310 = temp_name_find_better::ret1310(GameManager::*)(int) ;
		constexpr auto baseAddress1310 = (baseType1310)(&GameManager::colorForIdx);
		using derivedType1310 = temp_name_find_better::ret1310(D<baseAddress1310, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1310 = (derivedType1310)(&D<baseAddress1310, UUID>::colorForIdx);
        if (baseAddress1310 != derivedAddress1310) {
        	Interface::get()->logInfo("Adding hook at function GameManager::colorForIdx", Severity::Debug);
            Interface::get()->addHook("GameManager::colorForIdx", (void*)temp_name_find_better::address1310(), (void*)addresser::getNonVirtual(derivedAddress1310));
        }

    	using baseType1313 = temp_name_find_better::ret1313(GameManager::*)(const char*) ;
		constexpr auto baseAddress1313 = (baseType1313)(&GameManager::fadeInMusic);
		using derivedType1313 = temp_name_find_better::ret1313(D<baseAddress1313, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1313 = (derivedType1313)(&D<baseAddress1313, UUID>::fadeInMusic);
        if (baseAddress1313 != derivedAddress1313) {
        	Interface::get()->logInfo("Adding hook at function GameManager::fadeInMusic", Severity::Debug);
            Interface::get()->addHook("GameManager::fadeInMusic", (void*)temp_name_find_better::address1313(), (void*)addresser::getNonVirtual(derivedAddress1313));
        }

    	using baseType1316 = temp_name_find_better::ret1316(GameManager::*)(const char*) ;
		constexpr auto baseAddress1316 = (baseType1316)(&GameManager::getGameVariable);
		using derivedType1316 = temp_name_find_better::ret1316(D<baseAddress1316, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1316 = (derivedType1316)(&D<baseAddress1316, UUID>::getGameVariable);
        if (baseAddress1316 != derivedAddress1316) {
        	Interface::get()->logInfo("Adding hook at function GameManager::getGameVariable", Severity::Debug);
            Interface::get()->addHook("GameManager::getGameVariable", (void*)temp_name_find_better::address1316(), (void*)addresser::getNonVirtual(derivedAddress1316));
        }

    	using baseType1317 = temp_name_find_better::ret1317(GameManager::*)(const char*) ;
		constexpr auto baseAddress1317 = (baseType1317)(&GameManager::getIntGameVariable);
		using derivedType1317 = temp_name_find_better::ret1317(D<baseAddress1317, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1317 = (derivedType1317)(&D<baseAddress1317, UUID>::getIntGameVariable);
        if (baseAddress1317 != derivedAddress1317) {
        	Interface::get()->logInfo("Adding hook at function GameManager::getIntGameVariable", Severity::Debug);
            Interface::get()->addHook("GameManager::getIntGameVariable", (void*)temp_name_find_better::address1317(), (void*)addresser::getNonVirtual(derivedAddress1317));
        }

    	using baseType1318 = temp_name_find_better::ret1318(GameManager::*)(const char*) ;
		constexpr auto baseAddress1318 = (baseType1318)(&GameManager::getUGV);
		using derivedType1318 = temp_name_find_better::ret1318(D<baseAddress1318, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1318 = (derivedType1318)(&D<baseAddress1318, UUID>::getUGV);
        if (baseAddress1318 != derivedAddress1318) {
        	Interface::get()->logInfo("Adding hook at function GameManager::getUGV", Severity::Debug);
            Interface::get()->addHook("GameManager::getUGV", (void*)temp_name_find_better::address1318(), (void*)addresser::getNonVirtual(derivedAddress1318));
        }

    	using baseType1321 = temp_name_find_better::ret1321(GameManager::*)(bool, bool, bool) ;
		constexpr auto baseAddress1321 = (baseType1321)(&GameManager::reloadAll);
		using derivedType1321 = temp_name_find_better::ret1321(D<baseAddress1321, UUID>::*)(bool, bool, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1321 = (derivedType1321)(&D<baseAddress1321, UUID>::reloadAll);
        if (baseAddress1321 != derivedAddress1321) {
        	Interface::get()->logInfo("Adding hook at function GameManager::reloadAll", Severity::Debug);
            Interface::get()->addHook("GameManager::reloadAll", (void*)temp_name_find_better::address1321(), (void*)addresser::getNonVirtual(derivedAddress1321));
        }

    	using baseType1322 = temp_name_find_better::ret1322(GameManager::*)() ;
		constexpr auto baseAddress1322 = (baseType1322)(&GameManager::reloadAllStep2);
		using derivedType1322 = temp_name_find_better::ret1322(D<baseAddress1322, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1322 = (derivedType1322)(&D<baseAddress1322, UUID>::reloadAllStep2);
        if (baseAddress1322 != derivedAddress1322) {
        	Interface::get()->logInfo("Adding hook at function GameManager::reloadAllStep2", Severity::Debug);
            Interface::get()->addHook("GameManager::reloadAllStep2", (void*)temp_name_find_better::address1322(), (void*)addresser::getNonVirtual(derivedAddress1322));
        }

    	using baseType1325 = temp_name_find_better::ret1325(GameManager::*)(const char*, bool) ;
		constexpr auto baseAddress1325 = (baseType1325)(&GameManager::setGameVariable);
		using derivedType1325 = temp_name_find_better::ret1325(D<baseAddress1325, UUID>::*)(const char*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1325 = (derivedType1325)(&D<baseAddress1325, UUID>::setGameVariable);
        if (baseAddress1325 != derivedAddress1325) {
        	Interface::get()->logInfo("Adding hook at function GameManager::setGameVariable", Severity::Debug);
            Interface::get()->addHook("GameManager::setGameVariable", (void*)temp_name_find_better::address1325(), (void*)addresser::getNonVirtual(derivedAddress1325));
        }

    	using baseType1326 = temp_name_find_better::ret1326(GameManager::*)(const char*, int) ;
		constexpr auto baseAddress1326 = (baseType1326)(&GameManager::setIntGameVariable);
		using derivedType1326 = temp_name_find_better::ret1326(D<baseAddress1326, UUID>::*)(const char*, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1326 = (derivedType1326)(&D<baseAddress1326, UUID>::setIntGameVariable);
        if (baseAddress1326 != derivedAddress1326) {
        	Interface::get()->logInfo("Adding hook at function GameManager::setIntGameVariable", Severity::Debug);
            Interface::get()->addHook("GameManager::setIntGameVariable", (void*)temp_name_find_better::address1326(), (void*)addresser::getNonVirtual(derivedAddress1326));
        }

		using baseType1328 = temp_name_find_better::ret1328(*)();
		constexpr auto baseAddress1328 = (baseType1328)(&GameManager::sharedState);
		using derivedType1328 = temp_name_find_better::ret1328(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1328 = (derivedType1328)(&D<baseAddress1328, UUID>::sharedState);
        if (baseAddress1328 != derivedAddress1328) {
        	Interface::get()->logInfo("Adding hook at function GameManager::sharedState", Severity::Debug);
            Interface::get()->addHook("GameManager::sharedState", (void*)temp_name_find_better::address1328(), (void*)addresser::getNonVirtual(derivedAddress1328));
        }

    	using baseType1335 = temp_name_find_better::ret1335(GameManager::*)(int, bool) ;
		constexpr auto baseAddress1335 = (baseType1335)(&GameManager::isColorUnlocked);
		using derivedType1335 = temp_name_find_better::ret1335(D<baseAddress1335, UUID>::*)(int, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1335 = (derivedType1335)(&D<baseAddress1335, UUID>::isColorUnlocked);
        if (baseAddress1335 != derivedAddress1335) {
        	Interface::get()->logInfo("Adding hook at function GameManager::isColorUnlocked", Severity::Debug);
            Interface::get()->addHook("GameManager::isColorUnlocked", (void*)temp_name_find_better::address1335(), (void*)addresser::getNonVirtual(derivedAddress1335));
        }

    	using baseType1336 = temp_name_find_better::ret1336(GameManager::*)(int, IconType) ;
		constexpr auto baseAddress1336 = (baseType1336)(&GameManager::isIconUnlocked);
		using derivedType1336 = temp_name_find_better::ret1336(D<baseAddress1336, UUID>::*)(int, IconType) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1336 = (derivedType1336)(&D<baseAddress1336, UUID>::isIconUnlocked);
        if (baseAddress1336 != derivedAddress1336) {
        	Interface::get()->logInfo("Adding hook at function GameManager::isIconUnlocked", Severity::Debug);
            Interface::get()->addHook("GameManager::isIconUnlocked", (void*)temp_name_find_better::address1336(), (void*)addresser::getNonVirtual(derivedAddress1336));
        }

    	using baseType1337 = temp_name_find_better::ret1337(GameManager::*)(const char*) ;
		constexpr auto baseAddress1337 = (baseType1337)(&GameManager::toggleGameVariable);
		using derivedType1337 = temp_name_find_better::ret1337(D<baseAddress1337, UUID>::*)(const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1337 = (derivedType1337)(&D<baseAddress1337, UUID>::toggleGameVariable);
        if (baseAddress1337 != derivedAddress1337) {
        	Interface::get()->logInfo("Adding hook at function GameManager::toggleGameVariable", Severity::Debug);
            Interface::get()->addHook("GameManager::toggleGameVariable", (void*)temp_name_find_better::address1337(), (void*)addresser::getNonVirtual(derivedAddress1337));
        }

		using baseType1338 = temp_name_find_better::ret1338(*)(GJGameLevel*);
		constexpr auto baseAddress1338 = (baseType1338)(&GameManager::returnToLastScene);
		using derivedType1338 = temp_name_find_better::ret1338(*)(GJGameLevel*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1338 = (derivedType1338)(&D<baseAddress1338, UUID>::returnToLastScene);
        if (baseAddress1338 != derivedAddress1338) {
        	Interface::get()->logInfo("Adding hook at function GameManager::returnToLastScene", Severity::Debug);
            Interface::get()->addHook("GameManager::returnToLastScene", (void*)temp_name_find_better::address1338(), (void*)addresser::getNonVirtual(derivedAddress1338));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameObject : GameObject, ModifierBase {
    $GameObject(const $GameObject& c) : GameObject(c) {}
    $GameObject() : $GameObject(*this) {}
    ~$GameObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1352 = temp_name_find_better::ret1352(GameObject::*)(float) ;
		constexpr auto baseAddress1352 = (baseType1352)(&GameObject::setScaleX);
		using derivedType1352 = temp_name_find_better::ret1352(D<baseAddress1352, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1352 = (derivedType1352)(&D<baseAddress1352, UUID>::setScaleX);
        if (baseAddress1352 != derivedAddress1352) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setScaleX", Severity::Debug);
            Interface::get()->addHook("GameObject::setScaleX", (void*)temp_name_find_better::address1352(), (void*)addresser::getVirtual(derivedAddress1352));
        }

    	using baseType1353 = temp_name_find_better::ret1353(GameObject::*)(float) ;
		constexpr auto baseAddress1353 = (baseType1353)(&GameObject::setScaleY);
		using derivedType1353 = temp_name_find_better::ret1353(D<baseAddress1353, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1353 = (derivedType1353)(&D<baseAddress1353, UUID>::setScaleY);
        if (baseAddress1353 != derivedAddress1353) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setScaleY", Severity::Debug);
            Interface::get()->addHook("GameObject::setScaleY", (void*)temp_name_find_better::address1353(), (void*)addresser::getVirtual(derivedAddress1353));
        }

    	using baseType1354 = temp_name_find_better::ret1354(GameObject::*)(float) ;
		constexpr auto baseAddress1354 = (baseType1354)(&GameObject::setScale);
		using derivedType1354 = temp_name_find_better::ret1354(D<baseAddress1354, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1354 = (derivedType1354)(&D<baseAddress1354, UUID>::setScale);
        if (baseAddress1354 != derivedAddress1354) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setScale", Severity::Debug);
            Interface::get()->addHook("GameObject::setScale", (void*)temp_name_find_better::address1354(), (void*)addresser::getVirtual(derivedAddress1354));
        }

    	using baseType1355 = temp_name_find_better::ret1355(GameObject::*)(const cocos2d::CCPoint&) ;
		constexpr auto baseAddress1355 = (baseType1355)(&GameObject::setPosition);
		using derivedType1355 = temp_name_find_better::ret1355(D<baseAddress1355, UUID>::*)(const cocos2d::CCPoint&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1355 = (derivedType1355)(&D<baseAddress1355, UUID>::setPosition);
        if (baseAddress1355 != derivedAddress1355) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setPosition", Severity::Debug);
            Interface::get()->addHook("GameObject::setPosition", (void*)temp_name_find_better::address1355(), (void*)addresser::getVirtual(derivedAddress1355));
        }

    	using baseType1356 = temp_name_find_better::ret1356(GameObject::*)(bool) ;
		constexpr auto baseAddress1356 = (baseType1356)(&GameObject::setVisible);
		using derivedType1356 = temp_name_find_better::ret1356(D<baseAddress1356, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1356 = (derivedType1356)(&D<baseAddress1356, UUID>::setVisible);
        if (baseAddress1356 != derivedAddress1356) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setVisible", Severity::Debug);
            Interface::get()->addHook("GameObject::setVisible", (void*)temp_name_find_better::address1356(), (void*)addresser::getVirtual(derivedAddress1356));
        }

    	using baseType1357 = temp_name_find_better::ret1357(GameObject::*)(float) ;
		constexpr auto baseAddress1357 = (baseType1357)(&GameObject::setRotation);
		using derivedType1357 = temp_name_find_better::ret1357(D<baseAddress1357, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1357 = (derivedType1357)(&D<baseAddress1357, UUID>::setRotation);
        if (baseAddress1357 != derivedAddress1357) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setRotation", Severity::Debug);
            Interface::get()->addHook("GameObject::setRotation", (void*)temp_name_find_better::address1357(), (void*)addresser::getVirtual(derivedAddress1357));
        }

    	using baseType1358 = temp_name_find_better::ret1358(GameObject::*)(GLubyte) ;
		constexpr auto baseAddress1358 = (baseType1358)(&GameObject::setOpacity);
		using derivedType1358 = temp_name_find_better::ret1358(D<baseAddress1358, UUID>::*)(GLubyte) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1358 = (derivedType1358)(&D<baseAddress1358, UUID>::setOpacity);
        if (baseAddress1358 != derivedAddress1358) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setOpacity", Severity::Debug);
            Interface::get()->addHook("GameObject::setOpacity", (void*)temp_name_find_better::address1358(), (void*)addresser::getVirtual(derivedAddress1358));
        }

    	using baseType1359 = temp_name_find_better::ret1359(GameObject::*)(cocos2d::CCTexture2D*) ;
		constexpr auto baseAddress1359 = (baseType1359)(&GameObject::initWithTexture);
		using derivedType1359 = temp_name_find_better::ret1359(D<baseAddress1359, UUID>::*)(cocos2d::CCTexture2D*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1359 = (derivedType1359)(&D<baseAddress1359, UUID>::initWithTexture);
        if (baseAddress1359 != derivedAddress1359) {
        	Interface::get()->logInfo("Adding hook at function GameObject::initWithTexture", Severity::Debug);
            Interface::get()->addHook("GameObject::initWithTexture", (void*)temp_name_find_better::address1359(), (void*)addresser::getVirtual(derivedAddress1359));
        }

    	using baseType1360 = temp_name_find_better::ret1360(GameObject::*)(const cocos2d::ccColor3B&) ;
		constexpr auto baseAddress1360 = (baseType1360)(&GameObject::setChildColor);
		using derivedType1360 = temp_name_find_better::ret1360(D<baseAddress1360, UUID>::*)(const cocos2d::ccColor3B&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1360 = (derivedType1360)(&D<baseAddress1360, UUID>::setChildColor);
        if (baseAddress1360 != derivedAddress1360) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setChildColor", Severity::Debug);
            Interface::get()->addHook("GameObject::setChildColor", (void*)temp_name_find_better::address1360(), (void*)addresser::getVirtual(derivedAddress1360));
        }

    	using baseType1364 = temp_name_find_better::ret1364(GameObject::*)() ;
		constexpr auto baseAddress1364 = (baseType1364)(&GameObject::setupCustomSprites);
		using derivedType1364 = temp_name_find_better::ret1364(D<baseAddress1364, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1364 = (derivedType1364)(&D<baseAddress1364, UUID>::setupCustomSprites);
        if (baseAddress1364 != derivedAddress1364) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setupCustomSprites", Severity::Debug);
            Interface::get()->addHook("GameObject::setupCustomSprites", (void*)temp_name_find_better::address1364(), (void*)addresser::getVirtual(derivedAddress1364));
        }

    	using baseType1365 = temp_name_find_better::ret1365(GameObject::*)(bool) ;
		constexpr auto baseAddress1365 = (baseType1365)(&GameObject::addMainSpriteToParent);
		using derivedType1365 = temp_name_find_better::ret1365(D<baseAddress1365, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1365 = (derivedType1365)(&D<baseAddress1365, UUID>::addMainSpriteToParent);
        if (baseAddress1365 != derivedAddress1365) {
        	Interface::get()->logInfo("Adding hook at function GameObject::addMainSpriteToParent", Severity::Debug);
            Interface::get()->addHook("GameObject::addMainSpriteToParent", (void*)temp_name_find_better::address1365(), (void*)addresser::getVirtual(derivedAddress1365));
        }

    	using baseType1366 = temp_name_find_better::ret1366(GameObject::*)() ;
		constexpr auto baseAddress1366 = (baseType1366)(&GameObject::resetObject);
		using derivedType1366 = temp_name_find_better::ret1366(D<baseAddress1366, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1366 = (derivedType1366)(&D<baseAddress1366, UUID>::resetObject);
        if (baseAddress1366 != derivedAddress1366) {
        	Interface::get()->logInfo("Adding hook at function GameObject::resetObject", Severity::Debug);
            Interface::get()->addHook("GameObject::resetObject", (void*)temp_name_find_better::address1366(), (void*)addresser::getVirtual(derivedAddress1366));
        }

    	using baseType1368 = temp_name_find_better::ret1368(GameObject::*)() ;
		constexpr auto baseAddress1368 = (baseType1368)(&GameObject::activateObject);
		using derivedType1368 = temp_name_find_better::ret1368(D<baseAddress1368, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1368 = (derivedType1368)(&D<baseAddress1368, UUID>::activateObject);
        if (baseAddress1368 != derivedAddress1368) {
        	Interface::get()->logInfo("Adding hook at function GameObject::activateObject", Severity::Debug);
            Interface::get()->addHook("GameObject::activateObject", (void*)temp_name_find_better::address1368(), (void*)addresser::getVirtual(derivedAddress1368));
        }

    	using baseType1369 = temp_name_find_better::ret1369(GameObject::*)(bool) ;
		constexpr auto baseAddress1369 = (baseType1369)(&GameObject::deactivateObject);
		using derivedType1369 = temp_name_find_better::ret1369(D<baseAddress1369, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1369 = (derivedType1369)(&D<baseAddress1369, UUID>::deactivateObject);
        if (baseAddress1369 != derivedAddress1369) {
        	Interface::get()->logInfo("Adding hook at function GameObject::deactivateObject", Severity::Debug);
            Interface::get()->addHook("GameObject::deactivateObject", (void*)temp_name_find_better::address1369(), (void*)addresser::getVirtual(derivedAddress1369));
        }

    	using baseType1370 = temp_name_find_better::ret1370(GameObject::*)() ;
		constexpr auto baseAddress1370 = (baseType1370)(&GameObject::getObjectRect);
		using derivedType1370 = temp_name_find_better::ret1370(D<baseAddress1370, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1370 = (derivedType1370)(&D<baseAddress1370, UUID>::getObjectRect);
        if (baseAddress1370 != derivedAddress1370) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getObjectRect", Severity::Debug);
            Interface::get()->addHook("GameObject::getObjectRect", (void*)temp_name_find_better::address1370(), (void*)addresser::getVirtual(derivedAddress1370));
        }

    	using baseType1371 = temp_name_find_better::ret1371(GameObject::*)(float, float) ;
		constexpr auto baseAddress1371 = (baseType1371)(&GameObject::getObjectRect);
		using derivedType1371 = temp_name_find_better::ret1371(D<baseAddress1371, UUID>::*)(float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1371 = (derivedType1371)(&D<baseAddress1371, UUID>::getObjectRect);
        if (baseAddress1371 != derivedAddress1371) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getObjectRect", Severity::Debug);
            Interface::get()->addHook("GameObject::getObjectRect", (void*)temp_name_find_better::address1371(), (void*)addresser::getVirtual(derivedAddress1371));
        }

    	using baseType1372 = temp_name_find_better::ret1372(GameObject::*)(float, float) ;
		constexpr auto baseAddress1372 = (baseType1372)(&GameObject::getObjectRect2);
		using derivedType1372 = temp_name_find_better::ret1372(D<baseAddress1372, UUID>::*)(float, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1372 = (derivedType1372)(&D<baseAddress1372, UUID>::getObjectRect2);
        if (baseAddress1372 != derivedAddress1372) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getObjectRect2", Severity::Debug);
            Interface::get()->addHook("GameObject::getObjectRect2", (void*)temp_name_find_better::address1372(), (void*)addresser::getVirtual(derivedAddress1372));
        }

    	using baseType1373 = temp_name_find_better::ret1373(GameObject::*)() ;
		constexpr auto baseAddress1373 = (baseType1373)(&GameObject::getObjectTextureRect);
		using derivedType1373 = temp_name_find_better::ret1373(D<baseAddress1373, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1373 = (derivedType1373)(&D<baseAddress1373, UUID>::getObjectTextureRect);
        if (baseAddress1373 != derivedAddress1373) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getObjectTextureRect", Severity::Debug);
            Interface::get()->addHook("GameObject::getObjectTextureRect", (void*)temp_name_find_better::address1373(), (void*)addresser::getVirtual(derivedAddress1373));
        }

    	using baseType1374 = temp_name_find_better::ret1374(GameObject::*)() ;
		constexpr auto baseAddress1374 = (baseType1374)(&GameObject::getRealPosition);
		using derivedType1374 = temp_name_find_better::ret1374(D<baseAddress1374, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1374 = (derivedType1374)(&D<baseAddress1374, UUID>::getRealPosition);
        if (baseAddress1374 != derivedAddress1374) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getRealPosition", Severity::Debug);
            Interface::get()->addHook("GameObject::getRealPosition", (void*)temp_name_find_better::address1374(), (void*)addresser::getVirtual(derivedAddress1374));
        }

    	using baseType1375 = temp_name_find_better::ret1375(GameObject::*)(struct cocos2d::CCPoint) ;
		constexpr auto baseAddress1375 = (baseType1375)(&GameObject::setStartPos);
		using derivedType1375 = temp_name_find_better::ret1375(D<baseAddress1375, UUID>::*)(struct cocos2d::CCPoint) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1375 = (derivedType1375)(&D<baseAddress1375, UUID>::setStartPos);
        if (baseAddress1375 != derivedAddress1375) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setStartPos", Severity::Debug);
            Interface::get()->addHook("GameObject::setStartPos", (void*)temp_name_find_better::address1375(), (void*)addresser::getVirtual(derivedAddress1375));
        }

    	using baseType1376 = temp_name_find_better::ret1376(GameObject::*)() ;
		constexpr auto baseAddress1376 = (baseType1376)(&GameObject::updateStartValues);
		using derivedType1376 = temp_name_find_better::ret1376(D<baseAddress1376, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1376 = (derivedType1376)(&D<baseAddress1376, UUID>::updateStartValues);
        if (baseAddress1376 != derivedAddress1376) {
        	Interface::get()->logInfo("Adding hook at function GameObject::updateStartValues", Severity::Debug);
            Interface::get()->addHook("GameObject::updateStartValues", (void*)temp_name_find_better::address1376(), (void*)addresser::getVirtual(derivedAddress1376));
        }

    	using baseType1378 = temp_name_find_better::ret1378(GameObject::*)() ;
		constexpr auto baseAddress1378 = (baseType1378)(&GameObject::getSaveString);
		using derivedType1378 = temp_name_find_better::ret1378(D<baseAddress1378, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1378 = (derivedType1378)(&D<baseAddress1378, UUID>::getSaveString);
        if (baseAddress1378 != derivedAddress1378) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getSaveString", Severity::Debug);
            Interface::get()->addHook("GameObject::getSaveString", (void*)temp_name_find_better::address1378(), (void*)addresser::getVirtual(derivedAddress1378));
        }

    	using baseType1379 = temp_name_find_better::ret1379(GameObject::*)() ;
		constexpr auto baseAddress1379 = (baseType1379)(&GameObject::isFlipX);
		using derivedType1379 = temp_name_find_better::ret1379(D<baseAddress1379, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1379 = (derivedType1379)(&D<baseAddress1379, UUID>::isFlipX);
        if (baseAddress1379 != derivedAddress1379) {
        	Interface::get()->logInfo("Adding hook at function GameObject::isFlipX", Severity::Debug);
            Interface::get()->addHook("GameObject::isFlipX", (void*)temp_name_find_better::address1379(), (void*)addresser::getVirtual(derivedAddress1379));
        }

    	using baseType1380 = temp_name_find_better::ret1380(GameObject::*)() ;
		constexpr auto baseAddress1380 = (baseType1380)(&GameObject::isFlipY);
		using derivedType1380 = temp_name_find_better::ret1380(D<baseAddress1380, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1380 = (derivedType1380)(&D<baseAddress1380, UUID>::isFlipY);
        if (baseAddress1380 != derivedAddress1380) {
        	Interface::get()->logInfo("Adding hook at function GameObject::isFlipY", Severity::Debug);
            Interface::get()->addHook("GameObject::isFlipY", (void*)temp_name_find_better::address1380(), (void*)addresser::getVirtual(derivedAddress1380));
        }

    	using baseType1381 = temp_name_find_better::ret1381(GameObject::*)(float) ;
		constexpr auto baseAddress1381 = (baseType1381)(&GameObject::setRScaleX);
		using derivedType1381 = temp_name_find_better::ret1381(D<baseAddress1381, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1381 = (derivedType1381)(&D<baseAddress1381, UUID>::setRScaleX);
        if (baseAddress1381 != derivedAddress1381) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setRScaleX", Severity::Debug);
            Interface::get()->addHook("GameObject::setRScaleX", (void*)temp_name_find_better::address1381(), (void*)addresser::getVirtual(derivedAddress1381));
        }

    	using baseType1382 = temp_name_find_better::ret1382(GameObject::*)(float) ;
		constexpr auto baseAddress1382 = (baseType1382)(&GameObject::setRScaleY);
		using derivedType1382 = temp_name_find_better::ret1382(D<baseAddress1382, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1382 = (derivedType1382)(&D<baseAddress1382, UUID>::setRScaleY);
        if (baseAddress1382 != derivedAddress1382) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setRScaleY", Severity::Debug);
            Interface::get()->addHook("GameObject::setRScaleY", (void*)temp_name_find_better::address1382(), (void*)addresser::getVirtual(derivedAddress1382));
        }

    	using baseType1383 = temp_name_find_better::ret1383(GameObject::*)(float) ;
		constexpr auto baseAddress1383 = (baseType1383)(&GameObject::setRScale);
		using derivedType1383 = temp_name_find_better::ret1383(D<baseAddress1383, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1383 = (derivedType1383)(&D<baseAddress1383, UUID>::setRScale);
        if (baseAddress1383 != derivedAddress1383) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setRScale", Severity::Debug);
            Interface::get()->addHook("GameObject::setRScale", (void*)temp_name_find_better::address1383(), (void*)addresser::getVirtual(derivedAddress1383));
        }

    	using baseType1385 = temp_name_find_better::ret1385(GameObject::*)() ;
		constexpr auto baseAddress1385 = (baseType1385)(&GameObject::getRScaleY);
		using derivedType1385 = temp_name_find_better::ret1385(D<baseAddress1385, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1385 = (derivedType1385)(&D<baseAddress1385, UUID>::getRScaleY);
        if (baseAddress1385 != derivedAddress1385) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getRScaleY", Severity::Debug);
            Interface::get()->addHook("GameObject::getRScaleY", (void*)temp_name_find_better::address1385(), (void*)addresser::getVirtual(derivedAddress1385));
        }

    	using baseType1386 = temp_name_find_better::ret1386(GameObject::*)() ;
		constexpr auto baseAddress1386 = (baseType1386)(&GameObject::calculateSpawnXPos);
		using derivedType1386 = temp_name_find_better::ret1386(D<baseAddress1386, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1386 = (derivedType1386)(&D<baseAddress1386, UUID>::calculateSpawnXPos);
        if (baseAddress1386 != derivedAddress1386) {
        	Interface::get()->logInfo("Adding hook at function GameObject::calculateSpawnXPos", Severity::Debug);
            Interface::get()->addHook("GameObject::calculateSpawnXPos", (void*)temp_name_find_better::address1386(), (void*)addresser::getVirtual(derivedAddress1386));
        }

    	using baseType1388 = temp_name_find_better::ret1388(GameObject::*)() ;
		constexpr auto baseAddress1388 = (baseType1388)(&GameObject::powerOnObject);
		using derivedType1388 = temp_name_find_better::ret1388(D<baseAddress1388, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1388 = (derivedType1388)(&D<baseAddress1388, UUID>::powerOnObject);
        if (baseAddress1388 != derivedAddress1388) {
        	Interface::get()->logInfo("Adding hook at function GameObject::powerOnObject", Severity::Debug);
            Interface::get()->addHook("GameObject::powerOnObject", (void*)temp_name_find_better::address1388(), (void*)addresser::getVirtual(derivedAddress1388));
        }

    	using baseType1389 = temp_name_find_better::ret1389(GameObject::*)() ;
		constexpr auto baseAddress1389 = (baseType1389)(&GameObject::powerOffObject);
		using derivedType1389 = temp_name_find_better::ret1389(D<baseAddress1389, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1389 = (derivedType1389)(&D<baseAddress1389, UUID>::powerOffObject);
        if (baseAddress1389 != derivedAddress1389) {
        	Interface::get()->logInfo("Adding hook at function GameObject::powerOffObject", Severity::Debug);
            Interface::get()->addHook("GameObject::powerOffObject", (void*)temp_name_find_better::address1389(), (void*)addresser::getVirtual(derivedAddress1389));
        }

    	using baseType1390 = temp_name_find_better::ret1390(GameObject::*)(const cocos2d::ccColor3B&) ;
		constexpr auto baseAddress1390 = (baseType1390)(&GameObject::setObjectColor);
		using derivedType1390 = temp_name_find_better::ret1390(D<baseAddress1390, UUID>::*)(const cocos2d::ccColor3B&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1390 = (derivedType1390)(&D<baseAddress1390, UUID>::setObjectColor);
        if (baseAddress1390 != derivedAddress1390) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setObjectColor", Severity::Debug);
            Interface::get()->addHook("GameObject::setObjectColor", (void*)temp_name_find_better::address1390(), (void*)addresser::getVirtual(derivedAddress1390));
        }

    	using baseType1391 = temp_name_find_better::ret1391(GameObject::*)(cocos2d::_ccColor3B const&) ;
		constexpr auto baseAddress1391 = (baseType1391)(&GameObject::setGlowColor);
		using derivedType1391 = temp_name_find_better::ret1391(D<baseAddress1391, UUID>::*)(cocos2d::_ccColor3B const&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1391 = (derivedType1391)(&D<baseAddress1391, UUID>::setGlowColor);
        if (baseAddress1391 != derivedAddress1391) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setGlowColor", Severity::Debug);
            Interface::get()->addHook("GameObject::setGlowColor", (void*)temp_name_find_better::address1391(), (void*)addresser::getVirtual(derivedAddress1391));
        }

    	using baseType1392 = temp_name_find_better::ret1392(GameObject::*)() ;
		constexpr auto baseAddress1392 = (baseType1392)(&GameObject::getOrientedBox);
		using derivedType1392 = temp_name_find_better::ret1392(D<baseAddress1392, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1392 = (derivedType1392)(&D<baseAddress1392, UUID>::getOrientedBox);
        if (baseAddress1392 != derivedAddress1392) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getOrientedBox", Severity::Debug);
            Interface::get()->addHook("GameObject::getOrientedBox", (void*)temp_name_find_better::address1392(), (void*)addresser::getVirtual(derivedAddress1392));
        }

    	using baseType1393 = temp_name_find_better::ret1393(GameObject::*)(int) ;
		constexpr auto baseAddress1393 = (baseType1393)(&GameObject::addToGroup);
		using derivedType1393 = temp_name_find_better::ret1393(D<baseAddress1393, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1393 = (derivedType1393)(&D<baseAddress1393, UUID>::addToGroup);
        if (baseAddress1393 != derivedAddress1393) {
        	Interface::get()->logInfo("Adding hook at function GameObject::addToGroup", Severity::Debug);
            Interface::get()->addHook("GameObject::addToGroup", (void*)temp_name_find_better::address1393(), (void*)addresser::getVirtual(derivedAddress1393));
        }

    	using baseType1394 = temp_name_find_better::ret1394(GameObject::*)(int) ;
		constexpr auto baseAddress1394 = (baseType1394)(&GameObject::removeFromGroup);
		using derivedType1394 = temp_name_find_better::ret1394(D<baseAddress1394, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1394 = (derivedType1394)(&D<baseAddress1394, UUID>::removeFromGroup);
        if (baseAddress1394 != derivedAddress1394) {
        	Interface::get()->logInfo("Adding hook at function GameObject::removeFromGroup", Severity::Debug);
            Interface::get()->addHook("GameObject::removeFromGroup", (void*)temp_name_find_better::address1394(), (void*)addresser::getVirtual(derivedAddress1394));
        }

    	using baseType1400 = temp_name_find_better::ret1400(GameObject::*)() const ;
		constexpr auto baseAddress1400 = (baseType1400)(&GameObject::getType);
		using derivedType1400 = temp_name_find_better::ret1400(D<baseAddress1400, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1400 = (derivedType1400)(&D<baseAddress1400, UUID>::getType);
        if (baseAddress1400 != derivedAddress1400) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getType", Severity::Debug);
            Interface::get()->addHook("GameObject::getType", (void*)temp_name_find_better::address1400(), (void*)addresser::getVirtual(derivedAddress1400));
        }

    	using baseType1401 = temp_name_find_better::ret1401(GameObject::*)(GameObjectType) ;
		constexpr auto baseAddress1401 = (baseType1401)(&GameObject::setType);
		using derivedType1401 = temp_name_find_better::ret1401(D<baseAddress1401, UUID>::*)(GameObjectType) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1401 = (derivedType1401)(&D<baseAddress1401, UUID>::setType);
        if (baseAddress1401 != derivedAddress1401) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setType", Severity::Debug);
            Interface::get()->addHook("GameObject::setType", (void*)temp_name_find_better::address1401(), (void*)addresser::getVirtual(derivedAddress1401));
        }

    	using baseType1402 = temp_name_find_better::ret1402(GameObject::*)() const ;
		constexpr auto baseAddress1402 = (baseType1402)(&GameObject::getStartPos);
		using derivedType1402 = temp_name_find_better::ret1402(D<baseAddress1402, UUID>::*)() const ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1402 = (derivedType1402)(&D<baseAddress1402, UUID>::getStartPos);
        if (baseAddress1402 != derivedAddress1402) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getStartPos", Severity::Debug);
            Interface::get()->addHook("GameObject::getStartPos", (void*)temp_name_find_better::address1402(), (void*)addresser::getVirtual(derivedAddress1402));
        }

		using baseType1412 = temp_name_find_better::ret1412(*)(const char*);
		constexpr auto baseAddress1412 = (baseType1412)(&GameObject::createWithFrame);
		using derivedType1412 = temp_name_find_better::ret1412(*)(const char*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1412 = (derivedType1412)(&D<baseAddress1412, UUID>::createWithFrame);
        if (baseAddress1412 != derivedAddress1412) {
        	Interface::get()->logInfo("Adding hook at function GameObject::createWithFrame", Severity::Debug);
            Interface::get()->addHook("GameObject::createWithFrame", (void*)temp_name_find_better::address1412(), (void*)addresser::getNonVirtual(derivedAddress1412));
        }

		using baseType1413 = temp_name_find_better::ret1413(*)(int);
		constexpr auto baseAddress1413 = (baseType1413)(&GameObject::createWithKey);
		using derivedType1413 = temp_name_find_better::ret1413(*)(int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1413 = (derivedType1413)(&D<baseAddress1413, UUID>::createWithKey);
        if (baseAddress1413 != derivedAddress1413) {
        	Interface::get()->logInfo("Adding hook at function GameObject::createWithKey", Severity::Debug);
            Interface::get()->addHook("GameObject::createWithKey", (void*)temp_name_find_better::address1413(), (void*)addresser::getNonVirtual(derivedAddress1413));
        }

    	using baseType1418 = temp_name_find_better::ret1418(GameObject::*)() ;
		constexpr auto baseAddress1418 = (baseType1418)(&GameObject::getBoxOffset);
		using derivedType1418 = temp_name_find_better::ret1418(D<baseAddress1418, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1418 = (derivedType1418)(&D<baseAddress1418, UUID>::getBoxOffset);
        if (baseAddress1418 != derivedAddress1418) {
        	Interface::get()->logInfo("Adding hook at function GameObject::getBoxOffset", Severity::Debug);
            Interface::get()->addHook("GameObject::getBoxOffset", (void*)temp_name_find_better::address1418(), (void*)addresser::getNonVirtual(derivedAddress1418));
        }

		using baseType1438 = temp_name_find_better::ret1438(*)(struct gd::string, bool);
		constexpr auto baseAddress1438 = (baseType1438)(&GameObject::objectFromString);
		using derivedType1438 = temp_name_find_better::ret1438(*)(struct gd::string, bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1438 = (derivedType1438)(&D<baseAddress1438, UUID>::objectFromString);
        if (baseAddress1438 != derivedAddress1438) {
        	Interface::get()->logInfo("Adding hook at function GameObject::objectFromString", Severity::Debug);
            Interface::get()->addHook("GameObject::objectFromString", (void*)temp_name_find_better::address1438(), (void*)addresser::getNonVirtual(derivedAddress1438));
        }

    	using baseType1444 = temp_name_find_better::ret1444(GameObject::*)(const cocos2d::ccColor3B&) ;
		constexpr auto baseAddress1444 = (baseType1444)(&GameObject::selectObject);
		using derivedType1444 = temp_name_find_better::ret1444(D<baseAddress1444, UUID>::*)(const cocos2d::ccColor3B&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1444 = (derivedType1444)(&D<baseAddress1444, UUID>::selectObject);
        if (baseAddress1444 != derivedAddress1444) {
        	Interface::get()->logInfo("Adding hook at function GameObject::selectObject", Severity::Debug);
            Interface::get()->addHook("GameObject::selectObject", (void*)temp_name_find_better::address1444(), (void*)addresser::getNonVirtual(derivedAddress1444));
        }

    	using baseType1454 = temp_name_find_better::ret1454(GameObject::*)(float) ;
		constexpr auto baseAddress1454 = (baseType1454)(&GameObject::updateCustomScale);
		using derivedType1454 = temp_name_find_better::ret1454(D<baseAddress1454, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1454 = (derivedType1454)(&D<baseAddress1454, UUID>::updateCustomScale);
        if (baseAddress1454 != derivedAddress1454) {
        	Interface::get()->logInfo("Adding hook at function GameObject::updateCustomScale", Severity::Debug);
            Interface::get()->addHook("GameObject::updateCustomScale", (void*)temp_name_find_better::address1454(), (void*)addresser::getNonVirtual(derivedAddress1454));
        }

    	using baseType1461 = temp_name_find_better::ret1461(GameObject::*)() ;
		constexpr auto baseAddress1461 = (baseType1461)(&GameObject::deselectObject);
		using derivedType1461 = temp_name_find_better::ret1461(D<baseAddress1461, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1461 = (derivedType1461)(&D<baseAddress1461, UUID>::deselectObject);
        if (baseAddress1461 != derivedAddress1461) {
        	Interface::get()->logInfo("Adding hook at function GameObject::deselectObject", Severity::Debug);
            Interface::get()->addHook("GameObject::deselectObject", (void*)temp_name_find_better::address1461(), (void*)addresser::getNonVirtual(derivedAddress1461));
        }

    	using baseType1462 = temp_name_find_better::ret1462(GameObject::*)(float, int) ;
		constexpr auto baseAddress1462 = (baseType1462)(&GameObject::createRotateAction);
		using derivedType1462 = temp_name_find_better::ret1462(D<baseAddress1462, UUID>::*)(float, int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1462 = (derivedType1462)(&D<baseAddress1462, UUID>::createRotateAction);
        if (baseAddress1462 != derivedAddress1462) {
        	Interface::get()->logInfo("Adding hook at function GameObject::createRotateAction", Severity::Debug);
            Interface::get()->addHook("GameObject::createRotateAction", (void*)temp_name_find_better::address1462(), (void*)addresser::getNonVirtual(derivedAddress1462));
        }

    	using baseType1463 = temp_name_find_better::ret1463(GameObject::*)(cocos2d::CCAction*) ;
		constexpr auto baseAddress1463 = (baseType1463)(&GameObject::setMyAction);
		using derivedType1463 = temp_name_find_better::ret1463(D<baseAddress1463, UUID>::*)(cocos2d::CCAction*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1463 = (derivedType1463)(&D<baseAddress1463, UUID>::setMyAction);
        if (baseAddress1463 != derivedAddress1463) {
        	Interface::get()->logInfo("Adding hook at function GameObject::setMyAction", Severity::Debug);
            Interface::get()->addHook("GameObject::setMyAction", (void*)temp_name_find_better::address1463(), (void*)addresser::getNonVirtual(derivedAddress1463));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameObjectCopy : GameObjectCopy, ModifierBase {
    $GameObjectCopy(const $GameObjectCopy& c) : GameObjectCopy(c) {}
    $GameObjectCopy() : $GameObjectCopy(*this) {}
    ~$GameObjectCopy() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameObjectCopy);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GameStatsManager : GameStatsManager, ModifierBase {
    $GameStatsManager(const $GameStatsManager& c) : GameStatsManager(c) {}
    $GameStatsManager() : $GameStatsManager(*this) {}
    ~$GameStatsManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GameStatsManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1486 = temp_name_find_better::ret1486(GameStatsManager::*)() ;
		constexpr auto baseAddress1486 = (baseType1486)(&GameStatsManager::sharedState);
		using derivedType1486 = temp_name_find_better::ret1486(D<baseAddress1486, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1486 = (derivedType1486)(&D<baseAddress1486, UUID>::sharedState);
        if (baseAddress1486 != derivedAddress1486) {
        	Interface::get()->logInfo("Adding hook at function GameStatsManager::sharedState", Severity::Debug);
            Interface::get()->addHook("GameStatsManager::sharedState", (void*)temp_name_find_better::address1486(), (void*)addresser::getNonVirtual(derivedAddress1486));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GauntletSelectLayer : GauntletSelectLayer, ModifierBase {
    $GauntletSelectLayer(const $GauntletSelectLayer& c) : GauntletSelectLayer(c) {}
    $GauntletSelectLayer() : $GauntletSelectLayer(*this) {}
    ~$GauntletSelectLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GauntletSelectLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1498 = temp_name_find_better::ret1498(*)();
		constexpr auto baseAddress1498 = (baseType1498)(&GauntletSelectLayer::create);
		using derivedType1498 = temp_name_find_better::ret1498(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1498 = (derivedType1498)(&D<baseAddress1498, UUID>::create);
        if (baseAddress1498 != derivedAddress1498) {
        	Interface::get()->logInfo("Adding hook at function GauntletSelectLayer::create", Severity::Debug);
            Interface::get()->addHook("GauntletSelectLayer::create", (void*)temp_name_find_better::address1498(), (void*)addresser::getNonVirtual(derivedAddress1498));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $GhostTrailEffect : GhostTrailEffect, ModifierBase {
    $GhostTrailEffect(const $GhostTrailEffect& c) : GhostTrailEffect(c) {}
    $GhostTrailEffect() : $GhostTrailEffect(*this) {}
    ~$GhostTrailEffect() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($GhostTrailEffect);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $HSVWidgetPopup : HSVWidgetPopup, ModifierBase {
    $HSVWidgetPopup(const $HSVWidgetPopup& c) : HSVWidgetPopup(c) {}
    $HSVWidgetPopup() : $HSVWidgetPopup(*this) {}
    ~$HSVWidgetPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($HSVWidgetPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $HSVWidgetPopupDelegate : HSVWidgetPopupDelegate, ModifierBase {
    $HSVWidgetPopupDelegate(const $HSVWidgetPopupDelegate& c) : HSVWidgetPopupDelegate(c) {}
    $HSVWidgetPopupDelegate() : $HSVWidgetPopupDelegate(*this) {}
    ~$HSVWidgetPopupDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($HSVWidgetPopupDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $HardStreak : HardStreak, ModifierBase {
    $HardStreak(const $HardStreak& c) : HardStreak(c) {}
    $HardStreak() : $HardStreak(*this) {}
    ~$HardStreak() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($HardStreak);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $InfoAlertButton : InfoAlertButton, ModifierBase {
    $InfoAlertButton(const $InfoAlertButton& c) : InfoAlertButton(c) {}
    $InfoAlertButton() : $InfoAlertButton(*this) {}
    ~$InfoAlertButton() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($InfoAlertButton);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address1507)(this);
    }
    static bool _apply() {

    	using baseType1505 = temp_name_find_better::ret1505(InfoAlertButton::*)(gd::string const&, gd::string const&, float) ;
		constexpr auto baseAddress1505 = (baseType1505)(&InfoAlertButton::init);
		using derivedType1505 = temp_name_find_better::ret1505(D<baseAddress1505, UUID>::*)(gd::string const&, gd::string const&, float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1505 = (derivedType1505)(&D<baseAddress1505, UUID>::init);
        if (baseAddress1505 != derivedAddress1505) {
        	Interface::get()->logInfo("Adding hook at function InfoAlertButton::init", Severity::Debug);
            Interface::get()->addHook("InfoAlertButton::init", (void*)temp_name_find_better::address1505(), (void*)addresser::getNonVirtual(derivedAddress1505));
        }

    	using baseType1506 = temp_name_find_better::ret1506(InfoAlertButton::*)() ;
		constexpr auto baseAddress1506 = (baseType1506)(&InfoAlertButton::activate);
		using derivedType1506 = temp_name_find_better::ret1506(D<baseAddress1506, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1506 = (derivedType1506)(&D<baseAddress1506, UUID>::activate);
        if (baseAddress1506 != derivedAddress1506) {
        	Interface::get()->logInfo("Adding hook at function InfoAlertButton::activate", Severity::Debug);
            Interface::get()->addHook("InfoAlertButton::activate", (void*)temp_name_find_better::address1506(), (void*)addresser::getNonVirtual(derivedAddress1506));
        }

    	using baseType1507 = temp_name_find_better::ret1507($InfoAlertButton::*)() ;
		constexpr auto baseAddress1507 = (baseType1507)(&$InfoAlertButton::constructor);
		using derivedType1507 = temp_name_find_better::ret1507(D<baseAddress1507, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1507 = (derivedType1507)(&D<baseAddress1507, UUID>::constructor);
        if (baseAddress1507 != derivedAddress1507) {
        	Interface::get()->logInfo("Adding hook at function InfoAlertButton::constructor", Severity::Debug);
            Interface::get()->addHook("InfoAlertButton::constructor", (void*)temp_name_find_better::address1507(), (void*)addresser::getNonVirtual(derivedAddress1507));
        }

		using baseType1508 = temp_name_find_better::ret1508(*)(gd::string const&, gd::string const&, float);
		constexpr auto baseAddress1508 = (baseType1508)(&InfoAlertButton::create);
		using derivedType1508 = temp_name_find_better::ret1508(*)(gd::string const&, gd::string const&, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1508 = (derivedType1508)(&D<baseAddress1508, UUID>::create);
        if (baseAddress1508 != derivedAddress1508) {
        	Interface::get()->logInfo("Adding hook at function InfoAlertButton::create", Severity::Debug);
            Interface::get()->addHook("InfoAlertButton::create", (void*)temp_name_find_better::address1508(), (void*)addresser::getNonVirtual(derivedAddress1508));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $KeybindingsLayer : KeybindingsLayer, ModifierBase {
    $KeybindingsLayer(const $KeybindingsLayer& c) : KeybindingsLayer(c) {}
    $KeybindingsLayer() : $KeybindingsLayer(*this) {}
    ~$KeybindingsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($KeybindingsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1511 = temp_name_find_better::ret1511(KeybindingsLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1511 = (baseType1511)(&KeybindingsLayer::onClose);
		using derivedType1511 = temp_name_find_better::ret1511(D<baseAddress1511, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1511 = (derivedType1511)(&D<baseAddress1511, UUID>::onClose);
        if (baseAddress1511 != derivedAddress1511) {
        	Interface::get()->logInfo("Adding hook at function KeybindingsLayer::onClose", Severity::Debug);
            Interface::get()->addHook("KeybindingsLayer::onClose", (void*)temp_name_find_better::address1511(), (void*)addresser::getNonVirtual(derivedAddress1511));
        }

    	using baseType1512 = temp_name_find_better::ret1512(KeybindingsLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1512 = (baseType1512)(&KeybindingsLayer::onPrevPage);
		using derivedType1512 = temp_name_find_better::ret1512(D<baseAddress1512, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1512 = (derivedType1512)(&D<baseAddress1512, UUID>::onPrevPage);
        if (baseAddress1512 != derivedAddress1512) {
        	Interface::get()->logInfo("Adding hook at function KeybindingsLayer::onPrevPage", Severity::Debug);
            Interface::get()->addHook("KeybindingsLayer::onPrevPage", (void*)temp_name_find_better::address1512(), (void*)addresser::getNonVirtual(derivedAddress1512));
        }

    	using baseType1513 = temp_name_find_better::ret1513(KeybindingsLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1513 = (baseType1513)(&KeybindingsLayer::onNextPage);
		using derivedType1513 = temp_name_find_better::ret1513(D<baseAddress1513, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1513 = (derivedType1513)(&D<baseAddress1513, UUID>::onNextPage);
        if (baseAddress1513 != derivedAddress1513) {
        	Interface::get()->logInfo("Adding hook at function KeybindingsLayer::onNextPage", Severity::Debug);
            Interface::get()->addHook("KeybindingsLayer::onNextPage", (void*)temp_name_find_better::address1513(), (void*)addresser::getNonVirtual(derivedAddress1513));
        }

    	using baseType1514 = temp_name_find_better::ret1514(KeybindingsLayer::*)(int) ;
		constexpr auto baseAddress1514 = (baseType1514)(&KeybindingsLayer::goToPage);
		using derivedType1514 = temp_name_find_better::ret1514(D<baseAddress1514, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1514 = (derivedType1514)(&D<baseAddress1514, UUID>::goToPage);
        if (baseAddress1514 != derivedAddress1514) {
        	Interface::get()->logInfo("Adding hook at function KeybindingsLayer::goToPage", Severity::Debug);
            Interface::get()->addHook("KeybindingsLayer::goToPage", (void*)temp_name_find_better::address1514(), (void*)addresser::getNonVirtual(derivedAddress1514));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LeaderboardManagerDelegate : LeaderboardManagerDelegate, ModifierBase {
    $LeaderboardManagerDelegate(const $LeaderboardManagerDelegate& c) : LeaderboardManagerDelegate(c) {}
    $LeaderboardManagerDelegate() : $LeaderboardManagerDelegate(*this) {}
    ~$LeaderboardManagerDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LeaderboardManagerDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelCommentDelegate : LevelCommentDelegate, ModifierBase {
    $LevelCommentDelegate(const $LevelCommentDelegate& c) : LevelCommentDelegate(c) {}
    $LevelCommentDelegate() : $LevelCommentDelegate(*this) {}
    ~$LevelCommentDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelCommentDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PlayerCheckpoint : PlayerCheckpoint, ModifierBase {
    $PlayerCheckpoint(const $PlayerCheckpoint& c) : PlayerCheckpoint(c) {}
    $PlayerCheckpoint() : $PlayerCheckpoint(*this) {}
    ~$PlayerCheckpoint() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PlayerCheckpoint);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelDownloadDelegate : LevelDownloadDelegate, ModifierBase {
    $LevelDownloadDelegate(const $LevelDownloadDelegate& c) : LevelDownloadDelegate(c) {}
    $LevelDownloadDelegate() : $LevelDownloadDelegate(*this) {}
    ~$LevelDownloadDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelDownloadDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PlatformDownloadDelegate : PlatformDownloadDelegate, ModifierBase {
    $PlatformDownloadDelegate(const $PlatformDownloadDelegate& c) : PlatformDownloadDelegate(c) {}
    $PlatformDownloadDelegate() : $PlatformDownloadDelegate(*this) {}
    ~$PlatformDownloadDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PlatformDownloadDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelEditorLayer : LevelEditorLayer, ModifierBase {
    $LevelEditorLayer(const $LevelEditorLayer& c) : LevelEditorLayer(c) {}
    $LevelEditorLayer() : $LevelEditorLayer(*this) {}
    ~$LevelEditorLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelEditorLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1525 = temp_name_find_better::ret1525(LevelEditorLayer::*)(float) ;
		constexpr auto baseAddress1525 = (baseType1525)(&LevelEditorLayer::update);
		using derivedType1525 = temp_name_find_better::ret1525(D<baseAddress1525, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1525 = (derivedType1525)(&D<baseAddress1525, UUID>::update);
        if (baseAddress1525 != derivedAddress1525) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::update", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::update", (void*)temp_name_find_better::address1525(), (void*)addresser::getVirtual(derivedAddress1525));
        }

		using baseType1535 = temp_name_find_better::ret1535(*)(GJGameLevel*);
		constexpr auto baseAddress1535 = (baseType1535)(&LevelEditorLayer::create);
		using derivedType1535 = temp_name_find_better::ret1535(*)(GJGameLevel*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1535 = (derivedType1535)(&D<baseAddress1535, UUID>::create);
        if (baseAddress1535 != derivedAddress1535) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::create", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::create", (void*)temp_name_find_better::address1535(), (void*)addresser::getNonVirtual(derivedAddress1535));
        }

    	using baseType1537 = temp_name_find_better::ret1537(LevelEditorLayer::*)(struct gd::string) ;
		constexpr auto baseAddress1537 = (baseType1537)(&LevelEditorLayer::addObjectFromString);
		using derivedType1537 = temp_name_find_better::ret1537(D<baseAddress1537, UUID>::*)(struct gd::string) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1537 = (derivedType1537)(&D<baseAddress1537, UUID>::addObjectFromString);
        if (baseAddress1537 != derivedAddress1537) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::addObjectFromString", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::addObjectFromString", (void*)temp_name_find_better::address1537(), (void*)addresser::getNonVirtual(derivedAddress1537));
        }

    	using baseType1538 = temp_name_find_better::ret1538(LevelEditorLayer::*)(GameObject*) ;
		constexpr auto baseAddress1538 = (baseType1538)(&LevelEditorLayer::addSpecial);
		using derivedType1538 = temp_name_find_better::ret1538(D<baseAddress1538, UUID>::*)(GameObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1538 = (derivedType1538)(&D<baseAddress1538, UUID>::addSpecial);
        if (baseAddress1538 != derivedAddress1538) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::addSpecial", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::addSpecial", (void*)temp_name_find_better::address1538(), (void*)addresser::getNonVirtual(derivedAddress1538));
        }

    	using baseType1545 = temp_name_find_better::ret1545(LevelEditorLayer::*)(int, struct cocos2d::CCPoint, bool) ;
		constexpr auto baseAddress1545 = (baseType1545)(&LevelEditorLayer::createObject);
		using derivedType1545 = temp_name_find_better::ret1545(D<baseAddress1545, UUID>::*)(int, struct cocos2d::CCPoint, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1545 = (derivedType1545)(&D<baseAddress1545, UUID>::createObject);
        if (baseAddress1545 != derivedAddress1545) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::createObject", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::createObject", (void*)temp_name_find_better::address1545(), (void*)addresser::getNonVirtual(derivedAddress1545));
        }

    	using baseType1548 = temp_name_find_better::ret1548(LevelEditorLayer::*)() ;
		constexpr auto baseAddress1548 = (baseType1548)(&LevelEditorLayer::getLastObjectX);
		using derivedType1548 = temp_name_find_better::ret1548(D<baseAddress1548, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1548 = (derivedType1548)(&D<baseAddress1548, UUID>::getLastObjectX);
        if (baseAddress1548 != derivedAddress1548) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::getLastObjectX", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::getLastObjectX", (void*)temp_name_find_better::address1548(), (void*)addresser::getNonVirtual(derivedAddress1548));
        }

    	using baseType1549 = temp_name_find_better::ret1549(LevelEditorLayer::*)() ;
		constexpr auto baseAddress1549 = (baseType1549)(&LevelEditorLayer::getLevelString);
		using derivedType1549 = temp_name_find_better::ret1549(D<baseAddress1549, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1549 = (derivedType1549)(&D<baseAddress1549, UUID>::getLevelString);
        if (baseAddress1549 != derivedAddress1549) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::getLevelString", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::getLevelString", (void*)temp_name_find_better::address1549(), (void*)addresser::getNonVirtual(derivedAddress1549));
        }

    	using baseType1552 = temp_name_find_better::ret1552(LevelEditorLayer::*)(cocos2d::CCArray*) ;
		constexpr auto baseAddress1552 = (baseType1552)(&LevelEditorLayer::getNextFreeGroupID);
		using derivedType1552 = temp_name_find_better::ret1552(D<baseAddress1552, UUID>::*)(cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1552 = (derivedType1552)(&D<baseAddress1552, UUID>::getNextFreeGroupID);
        if (baseAddress1552 != derivedAddress1552) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::getNextFreeGroupID", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::getNextFreeGroupID", (void*)temp_name_find_better::address1552(), (void*)addresser::getNonVirtual(derivedAddress1552));
        }

    	using baseType1554 = temp_name_find_better::ret1554(LevelEditorLayer::*)(GameObject*, bool) ;
		constexpr auto baseAddress1554 = (baseType1554)(&LevelEditorLayer::getObjectRect);
		using derivedType1554 = temp_name_find_better::ret1554(D<baseAddress1554, UUID>::*)(GameObject*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1554 = (derivedType1554)(&D<baseAddress1554, UUID>::getObjectRect);
        if (baseAddress1554 != derivedAddress1554) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::getObjectRect", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::getObjectRect", (void*)temp_name_find_better::address1554(), (void*)addresser::getNonVirtual(derivedAddress1554));
        }

    	using baseType1558 = temp_name_find_better::ret1558(LevelEditorLayer::*)(struct cocos2d::CCPoint) ;
		constexpr auto baseAddress1558 = (baseType1558)(&LevelEditorLayer::objectAtPosition);
		using derivedType1558 = temp_name_find_better::ret1558(D<baseAddress1558, UUID>::*)(struct cocos2d::CCPoint) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1558 = (derivedType1558)(&D<baseAddress1558, UUID>::objectAtPosition);
        if (baseAddress1558 != derivedAddress1558) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::objectAtPosition", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::objectAtPosition", (void*)temp_name_find_better::address1558(), (void*)addresser::getNonVirtual(derivedAddress1558));
        }

    	using baseType1563 = temp_name_find_better::ret1563(LevelEditorLayer::*)(GameObject*, cocos2d::CCArray*) ;
		constexpr auto baseAddress1563 = (baseType1563)(&LevelEditorLayer::pasteAttributeState);
		using derivedType1563 = temp_name_find_better::ret1563(D<baseAddress1563, UUID>::*)(GameObject*, cocos2d::CCArray*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1563 = (derivedType1563)(&D<baseAddress1563, UUID>::pasteAttributeState);
        if (baseAddress1563 != derivedAddress1563) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::pasteAttributeState", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::pasteAttributeState", (void*)temp_name_find_better::address1563(), (void*)addresser::getNonVirtual(derivedAddress1563));
        }

    	using baseType1567 = temp_name_find_better::ret1567(LevelEditorLayer::*)() ;
		constexpr auto baseAddress1567 = (baseType1567)(&LevelEditorLayer::removeAllObjects);
		using derivedType1567 = temp_name_find_better::ret1567(D<baseAddress1567, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1567 = (derivedType1567)(&D<baseAddress1567, UUID>::removeAllObjects);
        if (baseAddress1567 != derivedAddress1567) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::removeAllObjects", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::removeAllObjects", (void*)temp_name_find_better::address1567(), (void*)addresser::getNonVirtual(derivedAddress1567));
        }

    	using baseType1569 = temp_name_find_better::ret1569(LevelEditorLayer::*)(GameObject*, bool) ;
		constexpr auto baseAddress1569 = (baseType1569)(&LevelEditorLayer::removeObject);
		using derivedType1569 = temp_name_find_better::ret1569(D<baseAddress1569, UUID>::*)(GameObject*, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1569 = (derivedType1569)(&D<baseAddress1569, UUID>::removeObject);
        if (baseAddress1569 != derivedAddress1569) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::removeObject", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::removeObject", (void*)temp_name_find_better::address1569(), (void*)addresser::getNonVirtual(derivedAddress1569));
        }

    	using baseType1588 = temp_name_find_better::ret1588(LevelEditorLayer::*)() ;
		constexpr auto baseAddress1588 = (baseType1588)(&LevelEditorLayer::updateEditorMode);
		using derivedType1588 = temp_name_find_better::ret1588(D<baseAddress1588, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1588 = (derivedType1588)(&D<baseAddress1588, UUID>::updateEditorMode);
        if (baseAddress1588 != derivedAddress1588) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::updateEditorMode", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::updateEditorMode", (void*)temp_name_find_better::address1588(), (void*)addresser::getNonVirtual(derivedAddress1588));
        }

    	using baseType1592 = temp_name_find_better::ret1592(LevelEditorLayer::*)() ;
		constexpr auto baseAddress1592 = (baseType1592)(&LevelEditorLayer::updateOptions);
		using derivedType1592 = temp_name_find_better::ret1592(D<baseAddress1592, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1592 = (derivedType1592)(&D<baseAddress1592, UUID>::updateOptions);
        if (baseAddress1592 != derivedAddress1592) {
        	Interface::get()->logInfo("Adding hook at function LevelEditorLayer::updateOptions", Severity::Debug);
            Interface::get()->addHook("LevelEditorLayer::updateOptions", (void*)temp_name_find_better::address1592(), (void*)addresser::getNonVirtual(derivedAddress1592));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelInfoLayer : LevelInfoLayer, ModifierBase {
    $LevelInfoLayer(const $LevelInfoLayer& c) : LevelInfoLayer(c) {}
    $LevelInfoLayer() : $LevelInfoLayer(*this) {}
    ~$LevelInfoLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelInfoLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1595 = temp_name_find_better::ret1595(*)(GJGameLevel*);
		constexpr auto baseAddress1595 = (baseType1595)(&LevelInfoLayer::create);
		using derivedType1595 = temp_name_find_better::ret1595(*)(GJGameLevel*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1595 = (derivedType1595)(&D<baseAddress1595, UUID>::create);
        if (baseAddress1595 != derivedAddress1595) {
        	Interface::get()->logInfo("Adding hook at function LevelInfoLayer::create", Severity::Debug);
            Interface::get()->addHook("LevelInfoLayer::create", (void*)temp_name_find_better::address1595(), (void*)addresser::getNonVirtual(derivedAddress1595));
        }

    	using baseType1596 = temp_name_find_better::ret1596(LevelInfoLayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress1596 = (baseType1596)(&LevelInfoLayer::onGarage);
		using derivedType1596 = temp_name_find_better::ret1596(D<baseAddress1596, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1596 = (derivedType1596)(&D<baseAddress1596, UUID>::onGarage);
        if (baseAddress1596 != derivedAddress1596) {
        	Interface::get()->logInfo("Adding hook at function LevelInfoLayer::onGarage", Severity::Debug);
            Interface::get()->addHook("LevelInfoLayer::onGarage", (void*)temp_name_find_better::address1596(), (void*)addresser::getNonVirtual(derivedAddress1596));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelSelectLayer : LevelSelectLayer, ModifierBase {
    $LevelSelectLayer(const $LevelSelectLayer& c) : LevelSelectLayer(c) {}
    $LevelSelectLayer() : $LevelSelectLayer(*this) {}
    ~$LevelSelectLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelSelectLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1598 = temp_name_find_better::ret1598(*)(int);
		constexpr auto baseAddress1598 = (baseType1598)(&LevelSelectLayer::create);
		using derivedType1598 = temp_name_find_better::ret1598(*)(int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1598 = (derivedType1598)(&D<baseAddress1598, UUID>::create);
        if (baseAddress1598 != derivedAddress1598) {
        	Interface::get()->logInfo("Adding hook at function LevelSelectLayer::create", Severity::Debug);
            Interface::get()->addHook("LevelSelectLayer::create", (void*)temp_name_find_better::address1598(), (void*)addresser::getNonVirtual(derivedAddress1598));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelSettingsDelegate : LevelSettingsDelegate, ModifierBase {
    $LevelSettingsDelegate(const $LevelSettingsDelegate& c) : LevelSettingsDelegate(c) {}
    $LevelSettingsDelegate() : $LevelSettingsDelegate(*this) {}
    ~$LevelSettingsDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelSettingsDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelSettingsLayer : LevelSettingsLayer, ModifierBase {
    $LevelSettingsLayer(const $LevelSettingsLayer& c) : LevelSettingsLayer(c) {}
    $LevelSettingsLayer() : $LevelSettingsLayer(*this) {}
    ~$LevelSettingsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelSettingsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1599 = temp_name_find_better::ret1599(*)(LevelSettingsObject*, LevelEditorLayer*);
		constexpr auto baseAddress1599 = (baseType1599)(&LevelSettingsLayer::create);
		using derivedType1599 = temp_name_find_better::ret1599(*)(LevelSettingsObject*, LevelEditorLayer*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1599 = (derivedType1599)(&D<baseAddress1599, UUID>::create);
        if (baseAddress1599 != derivedAddress1599) {
        	Interface::get()->logInfo("Adding hook at function LevelSettingsLayer::create", Severity::Debug);
            Interface::get()->addHook("LevelSettingsLayer::create", (void*)temp_name_find_better::address1599(), (void*)addresser::getNonVirtual(derivedAddress1599));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelSettingsObject : LevelSettingsObject, ModifierBase {
    $LevelSettingsObject(const $LevelSettingsObject& c) : LevelSettingsObject(c) {}
    $LevelSettingsObject() : $LevelSettingsObject(*this) {}
    ~$LevelSettingsObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelSettingsObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TeleportPortalObject : TeleportPortalObject, ModifierBase {
    $TeleportPortalObject(const $TeleportPortalObject& c) : TeleportPortalObject(c) {}
    $TeleportPortalObject() : $TeleportPortalObject(*this) {}
    ~$TeleportPortalObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TeleportPortalObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LevelUpdateDelegate : LevelUpdateDelegate, ModifierBase {
    $LevelUpdateDelegate(const $LevelUpdateDelegate& c) : LevelUpdateDelegate(c) {}
    $LevelUpdateDelegate() : $LevelUpdateDelegate(*this) {}
    ~$LevelUpdateDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LevelUpdateDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TableViewDelegate : TableViewDelegate, ModifierBase {
    $TableViewDelegate(const $TableViewDelegate& c) : TableViewDelegate(c) {}
    $TableViewDelegate() : $TableViewDelegate(*this) {}
    ~$TableViewDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TableViewDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ListButtonBarDelegate : ListButtonBarDelegate, ModifierBase {
    $ListButtonBarDelegate(const $ListButtonBarDelegate& c) : ListButtonBarDelegate(c) {}
    $ListButtonBarDelegate() : $ListButtonBarDelegate(*this) {}
    ~$ListButtonBarDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ListButtonBarDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LoadingLayer : LoadingLayer, ModifierBase {
    $LoadingLayer(const $LoadingLayer& c) : LoadingLayer(c) {}
    $LoadingLayer() : $LoadingLayer(*this) {}
    ~$LoadingLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LoadingLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1612 = temp_name_find_better::ret1612(*)(bool);
		constexpr auto baseAddress1612 = (baseType1612)(&LoadingLayer::create);
		using derivedType1612 = temp_name_find_better::ret1612(*)(bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1612 = (derivedType1612)(&D<baseAddress1612, UUID>::create);
        if (baseAddress1612 != derivedAddress1612) {
        	Interface::get()->logInfo("Adding hook at function LoadingLayer::create", Severity::Debug);
            Interface::get()->addHook("LoadingLayer::create", (void*)temp_name_find_better::address1612(), (void*)addresser::getNonVirtual(derivedAddress1612));
        }

    	using baseType1613 = temp_name_find_better::ret1613(LoadingLayer::*)(bool) ;
		constexpr auto baseAddress1613 = (baseType1613)(&LoadingLayer::init);
		using derivedType1613 = temp_name_find_better::ret1613(D<baseAddress1613, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1613 = (derivedType1613)(&D<baseAddress1613, UUID>::init);
        if (baseAddress1613 != derivedAddress1613) {
        	Interface::get()->logInfo("Adding hook at function LoadingLayer::init", Severity::Debug);
            Interface::get()->addHook("LoadingLayer::init", (void*)temp_name_find_better::address1613(), (void*)addresser::getNonVirtual(derivedAddress1613));
        }

    	using baseType1614 = temp_name_find_better::ret1614(LoadingLayer::*)() ;
		constexpr auto baseAddress1614 = (baseType1614)(&LoadingLayer::getLoadingString);
		using derivedType1614 = temp_name_find_better::ret1614(D<baseAddress1614, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1614 = (derivedType1614)(&D<baseAddress1614, UUID>::getLoadingString);
        if (baseAddress1614 != derivedAddress1614) {
        	Interface::get()->logInfo("Adding hook at function LoadingLayer::getLoadingString", Severity::Debug);
            Interface::get()->addHook("LoadingLayer::getLoadingString", (void*)temp_name_find_better::address1614(), (void*)addresser::getNonVirtual(derivedAddress1614));
        }

    	using baseType1615 = temp_name_find_better::ret1615(LoadingLayer::*)() ;
		constexpr auto baseAddress1615 = (baseType1615)(&LoadingLayer::loadAssets);
		using derivedType1615 = temp_name_find_better::ret1615(D<baseAddress1615, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1615 = (derivedType1615)(&D<baseAddress1615, UUID>::loadAssets);
        if (baseAddress1615 != derivedAddress1615) {
        	Interface::get()->logInfo("Adding hook at function LoadingLayer::loadAssets", Severity::Debug);
            Interface::get()->addHook("LoadingLayer::loadAssets", (void*)temp_name_find_better::address1615(), (void*)addresser::getNonVirtual(derivedAddress1615));
        }

    	using baseType1616 = temp_name_find_better::ret1616(LoadingLayer::*)() ;
		constexpr auto baseAddress1616 = (baseType1616)(&LoadingLayer::loadingFinished);
		using derivedType1616 = temp_name_find_better::ret1616(D<baseAddress1616, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1616 = (derivedType1616)(&D<baseAddress1616, UUID>::loadingFinished);
        if (baseAddress1616 != derivedAddress1616) {
        	Interface::get()->logInfo("Adding hook at function LoadingLayer::loadingFinished", Severity::Debug);
            Interface::get()->addHook("LoadingLayer::loadingFinished", (void*)temp_name_find_better::address1616(), (void*)addresser::getNonVirtual(derivedAddress1616));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupSpawnPopup : SetupSpawnPopup, ModifierBase {
    $SetupSpawnPopup(const $SetupSpawnPopup& c) : SetupSpawnPopup(c) {}
    $SetupSpawnPopup() : $SetupSpawnPopup(*this) {}
    ~$SetupSpawnPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupSpawnPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $LocalLevelManager : LocalLevelManager, ModifierBase {
    $LocalLevelManager(const $LocalLevelManager& c) : LocalLevelManager(c) {}
    $LocalLevelManager() : $LocalLevelManager(*this) {}
    ~$LocalLevelManager() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($LocalLevelManager);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupObjectTogglePopup : SetupObjectTogglePopup, ModifierBase {
    $SetupObjectTogglePopup(const $SetupObjectTogglePopup& c) : SetupObjectTogglePopup(c) {}
    $SetupObjectTogglePopup() : $SetupObjectTogglePopup(*this) {}
    ~$SetupObjectTogglePopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupObjectTogglePopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MenuGameLayer : MenuGameLayer, ModifierBase {
    $MenuGameLayer(const $MenuGameLayer& c) : MenuGameLayer(c) {}
    $MenuGameLayer() : $MenuGameLayer(*this) {}
    ~$MenuGameLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MenuGameLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MoreOptionsLayer : MoreOptionsLayer, ModifierBase {
    $MoreOptionsLayer(const $MoreOptionsLayer& c) : MoreOptionsLayer(c) {}
    $MoreOptionsLayer() : $MoreOptionsLayer(*this) {}
    ~$MoreOptionsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MoreOptionsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1632 = temp_name_find_better::ret1632(*)();
		constexpr auto baseAddress1632 = (baseType1632)(&MoreOptionsLayer::create);
		using derivedType1632 = temp_name_find_better::ret1632(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1632 = (derivedType1632)(&D<baseAddress1632, UUID>::create);
        if (baseAddress1632 != derivedAddress1632) {
        	Interface::get()->logInfo("Adding hook at function MoreOptionsLayer::create", Severity::Debug);
            Interface::get()->addHook("MoreOptionsLayer::create", (void*)temp_name_find_better::address1632(), (void*)addresser::getNonVirtual(derivedAddress1632));
        }

    	using baseType1633 = temp_name_find_better::ret1633(MoreOptionsLayer::*)(const char*, const char*, const char*) ;
		constexpr auto baseAddress1633 = (baseType1633)(&MoreOptionsLayer::addToggle);
		using derivedType1633 = temp_name_find_better::ret1633(D<baseAddress1633, UUID>::*)(const char*, const char*, const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1633 = (derivedType1633)(&D<baseAddress1633, UUID>::addToggle);
        if (baseAddress1633 != derivedAddress1633) {
        	Interface::get()->logInfo("Adding hook at function MoreOptionsLayer::addToggle", Severity::Debug);
            Interface::get()->addHook("MoreOptionsLayer::addToggle", (void*)temp_name_find_better::address1633(), (void*)addresser::getNonVirtual(derivedAddress1633));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $MusicDownloadDelegate : MusicDownloadDelegate, ModifierBase {
    $MusicDownloadDelegate(const $MusicDownloadDelegate& c) : MusicDownloadDelegate(c) {}
    $MusicDownloadDelegate() : $MusicDownloadDelegate(*this) {}
    ~$MusicDownloadDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($MusicDownloadDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ObjectToolbox : ObjectToolbox, ModifierBase {
    $ObjectToolbox(const $ObjectToolbox& c) : ObjectToolbox(c) {}
    $ObjectToolbox() : $ObjectToolbox(*this) {}
    ~$ObjectToolbox() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ObjectToolbox);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1652 = temp_name_find_better::ret1652(*)();
		constexpr auto baseAddress1652 = (baseType1652)(&ObjectToolbox::sharedState);
		using derivedType1652 = temp_name_find_better::ret1652(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1652 = (derivedType1652)(&D<baseAddress1652, UUID>::sharedState);
        if (baseAddress1652 != derivedAddress1652) {
        	Interface::get()->logInfo("Adding hook at function ObjectToolbox::sharedState", Severity::Debug);
            Interface::get()->addHook("ObjectToolbox::sharedState", (void*)temp_name_find_better::address1652(), (void*)addresser::getNonVirtual(derivedAddress1652));
        }

    	using baseType1653 = temp_name_find_better::ret1653(ObjectToolbox::*)(int) ;
		constexpr auto baseAddress1653 = (baseType1653)(&ObjectToolbox::gridNodeSizeForKey);
		using derivedType1653 = temp_name_find_better::ret1653(D<baseAddress1653, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1653 = (derivedType1653)(&D<baseAddress1653, UUID>::gridNodeSizeForKey);
        if (baseAddress1653 != derivedAddress1653) {
        	Interface::get()->logInfo("Adding hook at function ObjectToolbox::gridNodeSizeForKey", Severity::Debug);
            Interface::get()->addHook("ObjectToolbox::gridNodeSizeForKey", (void*)temp_name_find_better::address1653(), (void*)addresser::getNonVirtual(derivedAddress1653));
        }

    	using baseType1654 = temp_name_find_better::ret1654(ObjectToolbox::*)(int) ;
		constexpr auto baseAddress1654 = (baseType1654)(&ObjectToolbox::perspectiveBlockFrame);
		using derivedType1654 = temp_name_find_better::ret1654(D<baseAddress1654, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1654 = (derivedType1654)(&D<baseAddress1654, UUID>::perspectiveBlockFrame);
        if (baseAddress1654 != derivedAddress1654) {
        	Interface::get()->logInfo("Adding hook at function ObjectToolbox::perspectiveBlockFrame", Severity::Debug);
            Interface::get()->addHook("ObjectToolbox::perspectiveBlockFrame", (void*)temp_name_find_better::address1654(), (void*)addresser::getNonVirtual(derivedAddress1654));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $OpacityEffectAction : OpacityEffectAction, ModifierBase {
    $OpacityEffectAction(const $OpacityEffectAction& c) : OpacityEffectAction(c) {}
    $OpacityEffectAction() : $OpacityEffectAction(*this) {}
    ~$OpacityEffectAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($OpacityEffectAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $OptionsLayer : OptionsLayer, ModifierBase {
    $OptionsLayer(const $OptionsLayer& c) : OptionsLayer(c) {}
    $OptionsLayer() : $OptionsLayer(*this) {}
    ~$OptionsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($OptionsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1660 = temp_name_find_better::ret1660(*)();
		constexpr auto baseAddress1660 = (baseType1660)(&OptionsLayer::create);
		using derivedType1660 = temp_name_find_better::ret1660(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1660 = (derivedType1660)(&D<baseAddress1660, UUID>::create);
        if (baseAddress1660 != derivedAddress1660) {
        	Interface::get()->logInfo("Adding hook at function OptionsLayer::create", Severity::Debug);
            Interface::get()->addHook("OptionsLayer::create", (void*)temp_name_find_better::address1660(), (void*)addresser::getNonVirtual(derivedAddress1660));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PlayLayer : PlayLayer, ModifierBase {
    $PlayLayer(const $PlayLayer& c) : PlayLayer(c) {}
    $PlayLayer() : $PlayLayer(*this) {}
    ~$PlayLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PlayLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void destructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address1819)(this);
    }
    static bool _apply() {

		using baseType1686 = temp_name_find_better::ret1686(*)(GJGameLevel*);
		constexpr auto baseAddress1686 = (baseType1686)(&PlayLayer::create);
		using derivedType1686 = temp_name_find_better::ret1686(*)(GJGameLevel*);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1686 = (derivedType1686)(&D<baseAddress1686, UUID>::create);
        if (baseAddress1686 != derivedAddress1686) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::create", Severity::Debug);
            Interface::get()->addHook("PlayLayer::create", (void*)temp_name_find_better::address1686(), (void*)addresser::getNonVirtual(derivedAddress1686));
        }

    	using baseType1687 = temp_name_find_better::ret1687(PlayLayer::*)() ;
		constexpr auto baseAddress1687 = (baseType1687)(&PlayLayer::createCheckpoint);
		using derivedType1687 = temp_name_find_better::ret1687(D<baseAddress1687, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1687 = (derivedType1687)(&D<baseAddress1687, UUID>::createCheckpoint);
        if (baseAddress1687 != derivedAddress1687) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::createCheckpoint", Severity::Debug);
            Interface::get()->addHook("PlayLayer::createCheckpoint", (void*)temp_name_find_better::address1687(), (void*)addresser::getNonVirtual(derivedAddress1687));
        }

    	using baseType1692 = temp_name_find_better::ret1692(PlayLayer::*)(PlayerObject*, GameObject*) ;
		constexpr auto baseAddress1692 = (baseType1692)(&PlayLayer::destroyPlayer);
		using derivedType1692 = temp_name_find_better::ret1692(D<baseAddress1692, UUID>::*)(PlayerObject*, GameObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1692 = (derivedType1692)(&D<baseAddress1692, UUID>::destroyPlayer);
        if (baseAddress1692 != derivedAddress1692) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::destroyPlayer", Severity::Debug);
            Interface::get()->addHook("PlayLayer::destroyPlayer", (void*)temp_name_find_better::address1692(), (void*)addresser::getNonVirtual(derivedAddress1692));
        }

    	using baseType1694 = temp_name_find_better::ret1694(PlayLayer::*)() ;
		constexpr auto baseAddress1694 = (baseType1694)(&PlayLayer::draw);
		using derivedType1694 = temp_name_find_better::ret1694(D<baseAddress1694, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1694 = (derivedType1694)(&D<baseAddress1694, UUID>::draw);
        if (baseAddress1694 != derivedAddress1694) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::draw", Severity::Debug);
            Interface::get()->addHook("PlayLayer::draw", (void*)temp_name_find_better::address1694(), (void*)addresser::getVirtual(derivedAddress1694));
        }

    	using baseType1720 = temp_name_find_better::ret1720(PlayLayer::*)(GJGameLevel*) ;
		constexpr auto baseAddress1720 = (baseType1720)(&PlayLayer::init);
		using derivedType1720 = temp_name_find_better::ret1720(D<baseAddress1720, UUID>::*)(GJGameLevel*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1720 = (derivedType1720)(&D<baseAddress1720, UUID>::init);
        if (baseAddress1720 != derivedAddress1720) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::init", Severity::Debug);
            Interface::get()->addHook("PlayLayer::init", (void*)temp_name_find_better::address1720(), (void*)addresser::getNonVirtual(derivedAddress1720));
        }

    	using baseType1722 = temp_name_find_better::ret1722(PlayLayer::*)() ;
		constexpr auto baseAddress1722 = (baseType1722)(&PlayLayer::levelComplete);
		using derivedType1722 = temp_name_find_better::ret1722(D<baseAddress1722, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1722 = (derivedType1722)(&D<baseAddress1722, UUID>::levelComplete);
        if (baseAddress1722 != derivedAddress1722) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::levelComplete", Severity::Debug);
            Interface::get()->addHook("PlayLayer::levelComplete", (void*)temp_name_find_better::address1722(), (void*)addresser::getNonVirtual(derivedAddress1722));
        }

    	using baseType1729 = temp_name_find_better::ret1729(PlayLayer::*)() ;
		constexpr auto baseAddress1729 = (baseType1729)(&PlayLayer::markCheckpoint);
		using derivedType1729 = temp_name_find_better::ret1729(D<baseAddress1729, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1729 = (derivedType1729)(&D<baseAddress1729, UUID>::markCheckpoint);
        if (baseAddress1729 != derivedAddress1729) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::markCheckpoint", Severity::Debug);
            Interface::get()->addHook("PlayLayer::markCheckpoint", (void*)temp_name_find_better::address1729(), (void*)addresser::getNonVirtual(derivedAddress1729));
        }

    	using baseType1731 = temp_name_find_better::ret1731(PlayLayer::*)() ;
		constexpr auto baseAddress1731 = (baseType1731)(&PlayLayer::onEnterTransitionDidFinish);
		using derivedType1731 = temp_name_find_better::ret1731(D<baseAddress1731, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1731 = (derivedType1731)(&D<baseAddress1731, UUID>::onEnterTransitionDidFinish);
        if (baseAddress1731 != derivedAddress1731) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::onEnterTransitionDidFinish", Severity::Debug);
            Interface::get()->addHook("PlayLayer::onEnterTransitionDidFinish", (void*)temp_name_find_better::address1731(), (void*)addresser::getVirtual(derivedAddress1731));
        }

    	using baseType1732 = temp_name_find_better::ret1732(PlayLayer::*)() ;
		constexpr auto baseAddress1732 = (baseType1732)(&PlayLayer::onExit);
		using derivedType1732 = temp_name_find_better::ret1732(D<baseAddress1732, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1732 = (derivedType1732)(&D<baseAddress1732, UUID>::onExit);
        if (baseAddress1732 != derivedAddress1732) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::onExit", Severity::Debug);
            Interface::get()->addHook("PlayLayer::onExit", (void*)temp_name_find_better::address1732(), (void*)addresser::getVirtual(derivedAddress1732));
        }

    	using baseType1733 = temp_name_find_better::ret1733(PlayLayer::*)() ;
		constexpr auto baseAddress1733 = (baseType1733)(&PlayLayer::onQuit);
		using derivedType1733 = temp_name_find_better::ret1733(D<baseAddress1733, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1733 = (derivedType1733)(&D<baseAddress1733, UUID>::onQuit);
        if (baseAddress1733 != derivedAddress1733) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::onQuit", Severity::Debug);
            Interface::get()->addHook("PlayLayer::onQuit", (void*)temp_name_find_better::address1733(), (void*)addresser::getNonVirtual(derivedAddress1733));
        }

    	using baseType1754 = temp_name_find_better::ret1754(PlayLayer::*)() ;
		constexpr auto baseAddress1754 = (baseType1754)(&PlayLayer::removeLastCheckpoint);
		using derivedType1754 = temp_name_find_better::ret1754(D<baseAddress1754, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1754 = (derivedType1754)(&D<baseAddress1754, UUID>::removeLastCheckpoint);
        if (baseAddress1754 != derivedAddress1754) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::removeLastCheckpoint", Severity::Debug);
            Interface::get()->addHook("PlayLayer::removeLastCheckpoint", (void*)temp_name_find_better::address1754(), (void*)addresser::getNonVirtual(derivedAddress1754));
        }

    	using baseType1756 = temp_name_find_better::ret1756(PlayLayer::*)() ;
		constexpr auto baseAddress1756 = (baseType1756)(&PlayLayer::resetLevel);
		using derivedType1756 = temp_name_find_better::ret1756(D<baseAddress1756, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1756 = (derivedType1756)(&D<baseAddress1756, UUID>::resetLevel);
        if (baseAddress1756 != derivedAddress1756) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::resetLevel", Severity::Debug);
            Interface::get()->addHook("PlayLayer::resetLevel", (void*)temp_name_find_better::address1756(), (void*)addresser::getNonVirtual(derivedAddress1756));
        }

    	using baseType1760 = temp_name_find_better::ret1760(PlayLayer::*)(GJGameLevel*) ;
		constexpr auto baseAddress1760 = (baseType1760)(&PlayLayer::scene);
		using derivedType1760 = temp_name_find_better::ret1760(D<baseAddress1760, UUID>::*)(GJGameLevel*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1760 = (derivedType1760)(&D<baseAddress1760, UUID>::scene);
        if (baseAddress1760 != derivedAddress1760) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::scene", Severity::Debug);
            Interface::get()->addHook("PlayLayer::scene", (void*)temp_name_find_better::address1760(), (void*)addresser::getNonVirtual(derivedAddress1760));
        }

    	using baseType1761 = temp_name_find_better::ret1761(PlayLayer::*)(LevelSettingsObject*) ;
		constexpr auto baseAddress1761 = (baseType1761)(&PlayLayer::setupLevelStart);
		using derivedType1761 = temp_name_find_better::ret1761(D<baseAddress1761, UUID>::*)(LevelSettingsObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1761 = (derivedType1761)(&D<baseAddress1761, UUID>::setupLevelStart);
        if (baseAddress1761 != derivedAddress1761) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::setupLevelStart", Severity::Debug);
            Interface::get()->addHook("PlayLayer::setupLevelStart", (void*)temp_name_find_better::address1761(), (void*)addresser::getNonVirtual(derivedAddress1761));
        }

    	using baseType1789 = temp_name_find_better::ret1789(PlayLayer::*)(float, bool) ;
		constexpr auto baseAddress1789 = (baseType1789)(&PlayLayer::timeForXPos2);
		using derivedType1789 = temp_name_find_better::ret1789(D<baseAddress1789, UUID>::*)(float, bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1789 = (derivedType1789)(&D<baseAddress1789, UUID>::timeForXPos2);
        if (baseAddress1789 != derivedAddress1789) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::timeForXPos2", Severity::Debug);
            Interface::get()->addHook("PlayLayer::timeForXPos2", (void*)temp_name_find_better::address1789(), (void*)addresser::getNonVirtual(derivedAddress1789));
        }

    	using baseType1795 = temp_name_find_better::ret1795(PlayLayer::*)(bool) ;
		constexpr auto baseAddress1795 = (baseType1795)(&PlayLayer::togglePracticeMode);
		using derivedType1795 = temp_name_find_better::ret1795(D<baseAddress1795, UUID>::*)(bool) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1795 = (derivedType1795)(&D<baseAddress1795, UUID>::togglePracticeMode);
        if (baseAddress1795 != derivedAddress1795) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::togglePracticeMode", Severity::Debug);
            Interface::get()->addHook("PlayLayer::togglePracticeMode", (void*)temp_name_find_better::address1795(), (void*)addresser::getNonVirtual(derivedAddress1795));
        }

    	using baseType1801 = temp_name_find_better::ret1801(PlayLayer::*)(float) ;
		constexpr auto baseAddress1801 = (baseType1801)(&PlayLayer::update);
		using derivedType1801 = temp_name_find_better::ret1801(D<baseAddress1801, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1801 = (derivedType1801)(&D<baseAddress1801, UUID>::update);
        if (baseAddress1801 != derivedAddress1801) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::update", Severity::Debug);
            Interface::get()->addHook("PlayLayer::update", (void*)temp_name_find_better::address1801(), (void*)addresser::getVirtual(derivedAddress1801));
        }

    	using baseType1802 = temp_name_find_better::ret1802(PlayLayer::*)() ;
		constexpr auto baseAddress1802 = (baseType1802)(&PlayLayer::updateAttempts);
		using derivedType1802 = temp_name_find_better::ret1802(D<baseAddress1802, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1802 = (derivedType1802)(&D<baseAddress1802, UUID>::updateAttempts);
        if (baseAddress1802 != derivedAddress1802) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::updateAttempts", Severity::Debug);
            Interface::get()->addHook("PlayLayer::updateAttempts", (void*)temp_name_find_better::address1802(), (void*)addresser::getNonVirtual(derivedAddress1802));
        }

    	using baseType1810 = temp_name_find_better::ret1810(PlayLayer::*)(float) ;
		constexpr auto baseAddress1810 = (baseType1810)(&PlayLayer::updateReplay);
		using derivedType1810 = temp_name_find_better::ret1810(D<baseAddress1810, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1810 = (derivedType1810)(&D<baseAddress1810, UUID>::updateReplay);
        if (baseAddress1810 != derivedAddress1810) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::updateReplay", Severity::Debug);
            Interface::get()->addHook("PlayLayer::updateReplay", (void*)temp_name_find_better::address1810(), (void*)addresser::getNonVirtual(derivedAddress1810));
        }

    	using baseType1812 = temp_name_find_better::ret1812(PlayLayer::*)(float, char const*) ;
		constexpr auto baseAddress1812 = (baseType1812)(&PlayLayer::updateTweenAction);
		using derivedType1812 = temp_name_find_better::ret1812(D<baseAddress1812, UUID>::*)(float, char const*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1812 = (derivedType1812)(&D<baseAddress1812, UUID>::updateTweenAction);
        if (baseAddress1812 != derivedAddress1812) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::updateTweenAction", Severity::Debug);
            Interface::get()->addHook("PlayLayer::updateTweenAction", (void*)temp_name_find_better::address1812(), (void*)addresser::getVirtual(derivedAddress1812));
        }

    	using baseType1813 = temp_name_find_better::ret1813(PlayLayer::*)() ;
		constexpr auto baseAddress1813 = (baseType1813)(&PlayLayer::updateVisibility);
		using derivedType1813 = temp_name_find_better::ret1813(D<baseAddress1813, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1813 = (derivedType1813)(&D<baseAddress1813, UUID>::updateVisibility);
        if (baseAddress1813 != derivedAddress1813) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::updateVisibility", Severity::Debug);
            Interface::get()->addHook("PlayLayer::updateVisibility", (void*)temp_name_find_better::address1813(), (void*)addresser::getNonVirtual(derivedAddress1813));
        }

    	using baseType1815 = temp_name_find_better::ret1815(PlayLayer::*)() ;
		constexpr auto baseAddress1815 = (baseType1815)(&PlayLayer::visit);
		using derivedType1815 = temp_name_find_better::ret1815(D<baseAddress1815, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1815 = (derivedType1815)(&D<baseAddress1815, UUID>::visit);
        if (baseAddress1815 != derivedAddress1815) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::visit", Severity::Debug);
            Interface::get()->addHook("PlayLayer::visit", (void*)temp_name_find_better::address1815(), (void*)addresser::getVirtual(derivedAddress1815));
        }

    	using baseType1819 = temp_name_find_better::ret1819($PlayLayer::*)() ;
		constexpr auto baseAddress1819 = (baseType1819)(&$PlayLayer::destructor);
		using derivedType1819 = temp_name_find_better::ret1819(D<baseAddress1819, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1819 = (derivedType1819)(&D<baseAddress1819, UUID>::destructor);
        if (baseAddress1819 != derivedAddress1819) {
        	Interface::get()->logInfo("Adding hook at function PlayLayer::destructor", Severity::Debug);
            Interface::get()->addHook("PlayLayer::destructor", (void*)temp_name_find_better::address1819(), (void*)addresser::getNonVirtual(derivedAddress1819));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PointNode : PointNode, ModifierBase {
    $PointNode(const $PointNode& c) : PointNode(c) {}
    $PointNode() : $PointNode(*this) {}
    ~$PointNode() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PointNode);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1974 = temp_name_find_better::ret1974(*)(struct cocos2d::CCPoint);
		constexpr auto baseAddress1974 = (baseType1974)(&PointNode::create);
		using derivedType1974 = temp_name_find_better::ret1974(*)(struct cocos2d::CCPoint);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1974 = (derivedType1974)(&D<baseAddress1974, UUID>::create);
        if (baseAddress1974 != derivedAddress1974) {
        	Interface::get()->logInfo("Adding hook at function PointNode::create", Severity::Debug);
            Interface::get()->addHook("PointNode::create", (void*)temp_name_find_better::address1974(), (void*)addresser::getNonVirtual(derivedAddress1974));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ProfilePage : ProfilePage, ModifierBase {
    $ProfilePage(const $ProfilePage& c) : ProfilePage(c) {}
    $ProfilePage() : $ProfilePage(*this) {}
    ~$ProfilePage() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ProfilePage);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1975 = temp_name_find_better::ret1975(*)(int, bool);
		constexpr auto baseAddress1975 = (baseType1975)(&ProfilePage::create);
		using derivedType1975 = temp_name_find_better::ret1975(*)(int, bool);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1975 = (derivedType1975)(&D<baseAddress1975, UUID>::create);
        if (baseAddress1975 != derivedAddress1975) {
        	Interface::get()->logInfo("Adding hook at function ProfilePage::create", Severity::Debug);
            Interface::get()->addHook("ProfilePage::create", (void*)temp_name_find_better::address1975(), (void*)addresser::getNonVirtual(derivedAddress1975));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $PulseEffectAction : PulseEffectAction, ModifierBase {
    $PulseEffectAction(const $PulseEffectAction& c) : PulseEffectAction(c) {}
    $PulseEffectAction() : $PulseEffectAction(*this) {}
    ~$PulseEffectAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($PulseEffectAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $RetryLevelLayer : RetryLevelLayer, ModifierBase {
    $RetryLevelLayer(const $RetryLevelLayer& c) : RetryLevelLayer(c) {}
    $RetryLevelLayer() : $RetryLevelLayer(*this) {}
    ~$RetryLevelLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($RetryLevelLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $UploadActionDelegate : UploadActionDelegate, ModifierBase {
    $UploadActionDelegate(const $UploadActionDelegate& c) : UploadActionDelegate(c) {}
    $UploadActionDelegate() : $UploadActionDelegate(*this) {}
    ~$UploadActionDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($UploadActionDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ScrollingLayer : ScrollingLayer, ModifierBase {
    $ScrollingLayer(const $ScrollingLayer& c) : ScrollingLayer(c) {}
    $ScrollingLayer() : $ScrollingLayer(*this) {}
    ~$ScrollingLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ScrollingLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SelectArtLayer : SelectArtLayer, ModifierBase {
    $SelectArtLayer(const $SelectArtLayer& c) : SelectArtLayer(c) {}
    $SelectArtLayer() : $SelectArtLayer(*this) {}
    ~$SelectArtLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SelectArtLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType1980 = temp_name_find_better::ret1980(*)(SelectArtType);
		constexpr auto baseAddress1980 = (baseType1980)(&SelectArtLayer::create);
		using derivedType1980 = temp_name_find_better::ret1980(*)(SelectArtType);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1980 = (derivedType1980)(&D<baseAddress1980, UUID>::create);
        if (baseAddress1980 != derivedAddress1980) {
        	Interface::get()->logInfo("Adding hook at function SelectArtLayer::create", Severity::Debug);
            Interface::get()->addHook("SelectArtLayer::create", (void*)temp_name_find_better::address1980(), (void*)addresser::getNonVirtual(derivedAddress1980));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetGroupIDLayer : SetGroupIDLayer, ModifierBase {
    $SetGroupIDLayer(const $SetGroupIDLayer& c) : SetGroupIDLayer(c) {}
    $SetGroupIDLayer() : $SetGroupIDLayer(*this) {}
    ~$SetGroupIDLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetGroupIDLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType1983 = temp_name_find_better::ret1983(SetGroupIDLayer::*)() ;
		constexpr auto baseAddress1983 = (baseType1983)(&SetGroupIDLayer::updateGroupIDLabel);
		using derivedType1983 = temp_name_find_better::ret1983(D<baseAddress1983, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1983 = (derivedType1983)(&D<baseAddress1983, UUID>::updateGroupIDLabel);
        if (baseAddress1983 != derivedAddress1983) {
        	Interface::get()->logInfo("Adding hook at function SetGroupIDLayer::updateGroupIDLabel", Severity::Debug);
            Interface::get()->addHook("SetGroupIDLayer::updateGroupIDLabel", (void*)temp_name_find_better::address1983(), (void*)addresser::getNonVirtual(derivedAddress1983));
        }

    	using baseType1985 = temp_name_find_better::ret1985(SetGroupIDLayer::*)() ;
		constexpr auto baseAddress1985 = (baseType1985)(&SetGroupIDLayer::updateEditorLayerID);
		using derivedType1985 = temp_name_find_better::ret1985(D<baseAddress1985, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1985 = (derivedType1985)(&D<baseAddress1985, UUID>::updateEditorLayerID);
        if (baseAddress1985 != derivedAddress1985) {
        	Interface::get()->logInfo("Adding hook at function SetGroupIDLayer::updateEditorLayerID", Severity::Debug);
            Interface::get()->addHook("SetGroupIDLayer::updateEditorLayerID", (void*)temp_name_find_better::address1985(), (void*)addresser::getNonVirtual(derivedAddress1985));
        }

    	using baseType1986 = temp_name_find_better::ret1986(SetGroupIDLayer::*)() ;
		constexpr auto baseAddress1986 = (baseType1986)(&SetGroupIDLayer::updateEditorLayerID2);
		using derivedType1986 = temp_name_find_better::ret1986(D<baseAddress1986, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1986 = (derivedType1986)(&D<baseAddress1986, UUID>::updateEditorLayerID2);
        if (baseAddress1986 != derivedAddress1986) {
        	Interface::get()->logInfo("Adding hook at function SetGroupIDLayer::updateEditorLayerID2", Severity::Debug);
            Interface::get()->addHook("SetGroupIDLayer::updateEditorLayerID2", (void*)temp_name_find_better::address1986(), (void*)addresser::getNonVirtual(derivedAddress1986));
        }

    	using baseType1987 = temp_name_find_better::ret1987(SetGroupIDLayer::*)() ;
		constexpr auto baseAddress1987 = (baseType1987)(&SetGroupIDLayer::updateZOrder);
		using derivedType1987 = temp_name_find_better::ret1987(D<baseAddress1987, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress1987 = (derivedType1987)(&D<baseAddress1987, UUID>::updateZOrder);
        if (baseAddress1987 != derivedAddress1987) {
        	Interface::get()->logInfo("Adding hook at function SetGroupIDLayer::updateZOrder", Severity::Debug);
            Interface::get()->addHook("SetGroupIDLayer::updateZOrder", (void*)temp_name_find_better::address1987(), (void*)addresser::getNonVirtual(derivedAddress1987));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetItemIDLayer : SetItemIDLayer, ModifierBase {
    $SetItemIDLayer(const $SetItemIDLayer& c) : SetItemIDLayer(c) {}
    $SetItemIDLayer() : $SetItemIDLayer(*this) {}
    ~$SetItemIDLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetItemIDLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetTargetIDLayer : SetTargetIDLayer, ModifierBase {
    $SetTargetIDLayer(const $SetTargetIDLayer& c) : SetTargetIDLayer(c) {}
    $SetTargetIDLayer() : $SetTargetIDLayer(*this) {}
    ~$SetTargetIDLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetTargetIDLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupAnimationPopup : SetupAnimationPopup, ModifierBase {
    $SetupAnimationPopup(const $SetupAnimationPopup& c) : SetupAnimationPopup(c) {}
    $SetupAnimationPopup() : $SetupAnimationPopup(*this) {}
    ~$SetupAnimationPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupAnimationPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupCollisionTriggerPopup : SetupCollisionTriggerPopup, ModifierBase {
    $SetupCollisionTriggerPopup(const $SetupCollisionTriggerPopup& c) : SetupCollisionTriggerPopup(c) {}
    $SetupCollisionTriggerPopup() : $SetupCollisionTriggerPopup(*this) {}
    ~$SetupCollisionTriggerPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupCollisionTriggerPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupOpacityPopup : SetupOpacityPopup, ModifierBase {
    $SetupOpacityPopup(const $SetupOpacityPopup& c) : SetupOpacityPopup(c) {}
    $SetupOpacityPopup() : $SetupOpacityPopup(*this) {}
    ~$SetupOpacityPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupOpacityPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupPickupTriggerPopup : SetupPickupTriggerPopup, ModifierBase {
    $SetupPickupTriggerPopup(const $SetupPickupTriggerPopup& c) : SetupPickupTriggerPopup(c) {}
    $SetupPickupTriggerPopup() : $SetupPickupTriggerPopup(*this) {}
    ~$SetupPickupTriggerPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupPickupTriggerPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TableViewDataSource : TableViewDataSource, ModifierBase {
    $TableViewDataSource(const $TableViewDataSource& c) : TableViewDataSource(c) {}
    $TableViewDataSource() : $TableViewDataSource(*this) {}
    ~$TableViewDataSource() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TableViewDataSource);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupPulsePopup : SetupPulsePopup, ModifierBase {
    $SetupPulsePopup(const $SetupPulsePopup& c) : SetupPulsePopup(c) {}
    $SetupPulsePopup() : $SetupPulsePopup(*this) {}
    ~$SetupPulsePopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupPulsePopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupShakePopup : SetupShakePopup, ModifierBase {
    $SetupShakePopup(const $SetupShakePopup& c) : SetupShakePopup(c) {}
    $SetupShakePopup() : $SetupShakePopup(*this) {}
    ~$SetupShakePopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupShakePopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SetupTouchTogglePopup : SetupTouchTogglePopup, ModifierBase {
    $SetupTouchTogglePopup(const $SetupTouchTogglePopup& c) : SetupTouchTogglePopup(c) {}
    $SetupTouchTogglePopup() : $SetupTouchTogglePopup(*this) {}
    ~$SetupTouchTogglePopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SetupTouchTogglePopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SimplePlayer : SimplePlayer, ModifierBase {
    $SimplePlayer(const $SimplePlayer& c) : SimplePlayer(c) {}
    $SimplePlayer() : $SimplePlayer(*this) {}
    ~$SimplePlayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SimplePlayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType2042 = temp_name_find_better::ret2042(SimplePlayer::*)(int) ;
		constexpr auto baseAddress2042 = (baseType2042)(&SimplePlayer::init);
		using derivedType2042 = temp_name_find_better::ret2042(D<baseAddress2042, UUID>::*)(int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2042 = (derivedType2042)(&D<baseAddress2042, UUID>::init);
        if (baseAddress2042 != derivedAddress2042) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::init", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::init", (void*)temp_name_find_better::address2042(), (void*)addresser::getNonVirtual(derivedAddress2042));
        }

		using baseType2043 = temp_name_find_better::ret2043(*)(int);
		constexpr auto baseAddress2043 = (baseType2043)(&SimplePlayer::create);
		using derivedType2043 = temp_name_find_better::ret2043(*)(int);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2043 = (derivedType2043)(&D<baseAddress2043, UUID>::create);
        if (baseAddress2043 != derivedAddress2043) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::create", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::create", (void*)temp_name_find_better::address2043(), (void*)addresser::getNonVirtual(derivedAddress2043));
        }

    	using baseType2044 = temp_name_find_better::ret2044(SimplePlayer::*)(int, IconType) ;
		constexpr auto baseAddress2044 = (baseType2044)(&SimplePlayer::updatePlayerFrame);
		using derivedType2044 = temp_name_find_better::ret2044(D<baseAddress2044, UUID>::*)(int, IconType) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2044 = (derivedType2044)(&D<baseAddress2044, UUID>::updatePlayerFrame);
        if (baseAddress2044 != derivedAddress2044) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::updatePlayerFrame", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::updatePlayerFrame", (void*)temp_name_find_better::address2044(), (void*)addresser::getNonVirtual(derivedAddress2044));
        }

    	using baseType2045 = temp_name_find_better::ret2045(SimplePlayer::*)() ;
		constexpr auto baseAddress2045 = (baseType2045)(&SimplePlayer::updateColors);
		using derivedType2045 = temp_name_find_better::ret2045(D<baseAddress2045, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2045 = (derivedType2045)(&D<baseAddress2045, UUID>::updateColors);
        if (baseAddress2045 != derivedAddress2045) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::updateColors", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::updateColors", (void*)temp_name_find_better::address2045(), (void*)addresser::getNonVirtual(derivedAddress2045));
        }

    	using baseType2046 = temp_name_find_better::ret2046(SimplePlayer::*)(const char*, const char*, const char*, const char*, const char*) ;
		constexpr auto baseAddress2046 = (baseType2046)(&SimplePlayer::setFrames);
		using derivedType2046 = temp_name_find_better::ret2046(D<baseAddress2046, UUID>::*)(const char*, const char*, const char*, const char*, const char*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2046 = (derivedType2046)(&D<baseAddress2046, UUID>::setFrames);
        if (baseAddress2046 != derivedAddress2046) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::setFrames", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::setFrames", (void*)temp_name_find_better::address2046(), (void*)addresser::getNonVirtual(derivedAddress2046));
        }

    	using baseType2047 = temp_name_find_better::ret2047(SimplePlayer::*)(const cocos2d::ccColor3B&) ;
		constexpr auto baseAddress2047 = (baseType2047)(&SimplePlayer::setColor);
		using derivedType2047 = temp_name_find_better::ret2047(D<baseAddress2047, UUID>::*)(const cocos2d::ccColor3B&) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2047 = (derivedType2047)(&D<baseAddress2047, UUID>::setColor);
        if (baseAddress2047 != derivedAddress2047) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::setColor", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::setColor", (void*)temp_name_find_better::address2047(), (void*)addresser::getNonVirtual(derivedAddress2047));
        }

    	using baseType2048 = temp_name_find_better::ret2048(SimplePlayer::*)(unsigned char) ;
		constexpr auto baseAddress2048 = (baseType2048)(&SimplePlayer::setOpacity);
		using derivedType2048 = temp_name_find_better::ret2048(D<baseAddress2048, UUID>::*)(unsigned char) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2048 = (derivedType2048)(&D<baseAddress2048, UUID>::setOpacity);
        if (baseAddress2048 != derivedAddress2048) {
        	Interface::get()->logInfo("Adding hook at function SimplePlayer::setOpacity", Severity::Debug);
            Interface::get()->addHook("SimplePlayer::setOpacity", (void*)temp_name_find_better::address2048(), (void*)addresser::getNonVirtual(derivedAddress2048));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $Slider : Slider, ModifierBase {
    $Slider(const $Slider& c) : Slider(c) {}
    $Slider() : $Slider(*this) {}
    ~$Slider() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($Slider);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType2052 = temp_name_find_better::ret2052(Slider::*)() ;
		constexpr auto baseAddress2052 = (baseType2052)(&Slider::getValue);
		using derivedType2052 = temp_name_find_better::ret2052(D<baseAddress2052, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2052 = (derivedType2052)(&D<baseAddress2052, UUID>::getValue);
        if (baseAddress2052 != derivedAddress2052) {
        	Interface::get()->logInfo("Adding hook at function Slider::getValue", Severity::Debug);
            Interface::get()->addHook("Slider::getValue", (void*)temp_name_find_better::address2052(), (void*)addresser::getNonVirtual(derivedAddress2052));
        }

    	using baseType2053 = temp_name_find_better::ret2053(Slider::*)() ;
		constexpr auto baseAddress2053 = (baseType2053)(&Slider::updateBar);
		using derivedType2053 = temp_name_find_better::ret2053(D<baseAddress2053, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2053 = (derivedType2053)(&D<baseAddress2053, UUID>::updateBar);
        if (baseAddress2053 != derivedAddress2053) {
        	Interface::get()->logInfo("Adding hook at function Slider::updateBar", Severity::Debug);
            Interface::get()->addHook("Slider::updateBar", (void*)temp_name_find_better::address2053(), (void*)addresser::getNonVirtual(derivedAddress2053));
        }

		using baseType2054 = temp_name_find_better::ret2054(*)(cocos2d::CCNode, cocos2d::SEL_MenuHandler, const char*, const char*, const char*, float);
		constexpr auto baseAddress2054 = (baseType2054)(&Slider::create);
		using derivedType2054 = temp_name_find_better::ret2054(*)(cocos2d::CCNode, cocos2d::SEL_MenuHandler, const char*, const char*, const char*, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2054 = (derivedType2054)(&D<baseAddress2054, UUID>::create);
        if (baseAddress2054 != derivedAddress2054) {
        	Interface::get()->logInfo("Adding hook at function Slider::create", Severity::Debug);
            Interface::get()->addHook("Slider::create", (void*)temp_name_find_better::address2054(), (void*)addresser::getNonVirtual(derivedAddress2054));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SliderThumb : SliderThumb, ModifierBase {
    $SliderThumb(const $SliderThumb& c) : SliderThumb(c) {}
    $SliderThumb() : $SliderThumb(*this) {}
    ~$SliderThumb() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SliderThumb);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType2055 = temp_name_find_better::ret2055(SliderThumb::*)(float) ;
		constexpr auto baseAddress2055 = (baseType2055)(&SliderThumb::setValue);
		using derivedType2055 = temp_name_find_better::ret2055(D<baseAddress2055, UUID>::*)(float) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2055 = (derivedType2055)(&D<baseAddress2055, UUID>::setValue);
        if (baseAddress2055 != derivedAddress2055) {
        	Interface::get()->logInfo("Adding hook at function SliderThumb::setValue", Severity::Debug);
            Interface::get()->addHook("SliderThumb::setValue", (void*)temp_name_find_better::address2055(), (void*)addresser::getNonVirtual(derivedAddress2055));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $SliderTouchLogic : SliderTouchLogic, ModifierBase {
    $SliderTouchLogic(const $SliderTouchLogic& c) : SliderTouchLogic(c) {}
    $SliderTouchLogic() : $SliderTouchLogic(*this) {}
    ~$SliderTouchLogic() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($SliderTouchLogic);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $StatsCell : StatsCell, ModifierBase {
    $StatsCell(const $StatsCell& c) : StatsCell(c) {}
    $StatsCell() : $StatsCell(*this) {}
    ~$StatsCell() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($StatsCell);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

    	using baseType2063 = temp_name_find_better::ret2063(StatsCell::*)(unsigned int) ;
		constexpr auto baseAddress2063 = (baseType2063)(&StatsCell::updateBGColor);
		using derivedType2063 = temp_name_find_better::ret2063(D<baseAddress2063, UUID>::*)(unsigned int) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2063 = (derivedType2063)(&D<baseAddress2063, UUID>::updateBGColor);
        if (baseAddress2063 != derivedAddress2063) {
        	Interface::get()->logInfo("Adding hook at function StatsCell::updateBGColor", Severity::Debug);
            Interface::get()->addHook("StatsCell::updateBGColor", (void*)temp_name_find_better::address2063(), (void*)addresser::getNonVirtual(derivedAddress2063));
        }

    	using baseType2064 = temp_name_find_better::ret2064(StatsCell::*)() ;
		constexpr auto baseAddress2064 = (baseType2064)(&StatsCell::draw);
		using derivedType2064 = temp_name_find_better::ret2064(D<baseAddress2064, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2064 = (derivedType2064)(&D<baseAddress2064, UUID>::draw);
        if (baseAddress2064 != derivedAddress2064) {
        	Interface::get()->logInfo("Adding hook at function StatsCell::draw", Severity::Debug);
            Interface::get()->addHook("StatsCell::draw", (void*)temp_name_find_better::address2064(), (void*)addresser::getNonVirtual(derivedAddress2064));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TextAlertPopup : TextAlertPopup, ModifierBase {
    $TextAlertPopup(const $TextAlertPopup& c) : TextAlertPopup(c) {}
    $TextAlertPopup() : $TextAlertPopup(*this) {}
    ~$TextAlertPopup() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TextAlertPopup);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType2078 = temp_name_find_better::ret2078(*)(gd::string const&, float, float);
		constexpr auto baseAddress2078 = (baseType2078)(&TextAlertPopup::create);
		using derivedType2078 = temp_name_find_better::ret2078(*)(gd::string const&, float, float);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2078 = (derivedType2078)(&D<baseAddress2078, UUID>::create);
        if (baseAddress2078 != derivedAddress2078) {
        	Interface::get()->logInfo("Adding hook at function TextAlertPopup::create", Severity::Debug);
            Interface::get()->addHook("TextAlertPopup::create", (void*)temp_name_find_better::address2078(), (void*)addresser::getNonVirtual(derivedAddress2078));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TextInputDelegate : TextInputDelegate, ModifierBase {
    $TextInputDelegate(const $TextInputDelegate& c) : TextInputDelegate(c) {}
    $TextInputDelegate() : $TextInputDelegate(*this) {}
    ~$TextInputDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TextInputDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $UploadPopupDelegate : UploadPopupDelegate, ModifierBase {
    $UploadPopupDelegate(const $UploadPopupDelegate& c) : UploadPopupDelegate(c) {}
    $UploadPopupDelegate() : $UploadPopupDelegate(*this) {}
    ~$UploadPopupDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($UploadPopupDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $ToggleTriggerAction : ToggleTriggerAction, ModifierBase {
    $ToggleTriggerAction(const $ToggleTriggerAction& c) : ToggleTriggerAction(c) {}
    $ToggleTriggerAction() : $ToggleTriggerAction(*this) {}
    ~$ToggleTriggerAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($ToggleTriggerAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TriggerEffectDelegate : TriggerEffectDelegate, ModifierBase {
    $TriggerEffectDelegate(const $TriggerEffectDelegate& c) : TriggerEffectDelegate(c) {}
    $TriggerEffectDelegate() : $TriggerEffectDelegate(*this) {}
    ~$TriggerEffectDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TriggerEffectDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TopArtistsLayer : TopArtistsLayer, ModifierBase {
    $TopArtistsLayer(const $TopArtistsLayer& c) : TopArtistsLayer(c) {}
    $TopArtistsLayer() : $TopArtistsLayer(*this) {}
    ~$TopArtistsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TopArtistsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $TouchToggleAction : TouchToggleAction, ModifierBase {
    $TouchToggleAction(const $TouchToggleAction& c) : TouchToggleAction(c) {}
    $TouchToggleAction() : $TouchToggleAction(*this) {}
    ~$TouchToggleAction() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($TouchToggleAction);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $UILayer : UILayer, ModifierBase {
    $UILayer(const $UILayer& c) : UILayer(c) {}
    $UILayer() : $UILayer(*this) {}
    ~$UILayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($UILayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    GEODE_DUPABLE void constructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address2109)(this);
    }
    GEODE_DUPABLE void destructor() {
        reinterpret_cast<void(*)(decltype(this))>(temp_name_find_better::address2110)(this);
    }
    static bool _apply() {

		using baseType2099 = temp_name_find_better::ret2099(*)();
		constexpr auto baseAddress2099 = (baseType2099)(&UILayer::create);
		using derivedType2099 = temp_name_find_better::ret2099(*)();
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2099 = (derivedType2099)(&D<baseAddress2099, UUID>::create);
        if (baseAddress2099 != derivedAddress2099) {
        	Interface::get()->logInfo("Adding hook at function UILayer::create", Severity::Debug);
            Interface::get()->addHook("UILayer::create", (void*)temp_name_find_better::address2099(), (void*)addresser::getNonVirtual(derivedAddress2099));
        }

    	using baseType2104 = temp_name_find_better::ret2104(UILayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress2104 = (baseType2104)(&UILayer::onCheck);
		using derivedType2104 = temp_name_find_better::ret2104(D<baseAddress2104, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2104 = (derivedType2104)(&D<baseAddress2104, UUID>::onCheck);
        if (baseAddress2104 != derivedAddress2104) {
        	Interface::get()->logInfo("Adding hook at function UILayer::onCheck", Severity::Debug);
            Interface::get()->addHook("UILayer::onCheck", (void*)temp_name_find_better::address2104(), (void*)addresser::getNonVirtual(derivedAddress2104));
        }

    	using baseType2105 = temp_name_find_better::ret2105(UILayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress2105 = (baseType2105)(&UILayer::onDeleteCheck);
		using derivedType2105 = temp_name_find_better::ret2105(D<baseAddress2105, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2105 = (derivedType2105)(&D<baseAddress2105, UUID>::onDeleteCheck);
        if (baseAddress2105 != derivedAddress2105) {
        	Interface::get()->logInfo("Adding hook at function UILayer::onDeleteCheck", Severity::Debug);
            Interface::get()->addHook("UILayer::onDeleteCheck", (void*)temp_name_find_better::address2105(), (void*)addresser::getNonVirtual(derivedAddress2105));
        }

    	using baseType2106 = temp_name_find_better::ret2106(UILayer::*)(cocos2d::CCObject*) ;
		constexpr auto baseAddress2106 = (baseType2106)(&UILayer::onPause);
		using derivedType2106 = temp_name_find_better::ret2106(D<baseAddress2106, UUID>::*)(cocos2d::CCObject*) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2106 = (derivedType2106)(&D<baseAddress2106, UUID>::onPause);
        if (baseAddress2106 != derivedAddress2106) {
        	Interface::get()->logInfo("Adding hook at function UILayer::onPause", Severity::Debug);
            Interface::get()->addHook("UILayer::onPause", (void*)temp_name_find_better::address2106(), (void*)addresser::getNonVirtual(derivedAddress2106));
        }

    	using baseType2107 = temp_name_find_better::ret2107(UILayer::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress2107 = (baseType2107)(&UILayer::keyDown);
		using derivedType2107 = temp_name_find_better::ret2107(D<baseAddress2107, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2107 = (derivedType2107)(&D<baseAddress2107, UUID>::keyDown);
        if (baseAddress2107 != derivedAddress2107) {
        	Interface::get()->logInfo("Adding hook at function UILayer::keyDown", Severity::Debug);
            Interface::get()->addHook("UILayer::keyDown", (void*)temp_name_find_better::address2107(), (void*)addresser::getVirtual(derivedAddress2107));
        }

    	using baseType2108 = temp_name_find_better::ret2108(UILayer::*)(cocos2d::enumKeyCodes) ;
		constexpr auto baseAddress2108 = (baseType2108)(&UILayer::keyUp);
		using derivedType2108 = temp_name_find_better::ret2108(D<baseAddress2108, UUID>::*)(cocos2d::enumKeyCodes) ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2108 = (derivedType2108)(&D<baseAddress2108, UUID>::keyUp);
        if (baseAddress2108 != derivedAddress2108) {
        	Interface::get()->logInfo("Adding hook at function UILayer::keyUp", Severity::Debug);
            Interface::get()->addHook("UILayer::keyUp", (void*)temp_name_find_better::address2108(), (void*)addresser::getVirtual(derivedAddress2108));
        }

    	using baseType2109 = temp_name_find_better::ret2109($UILayer::*)() ;
		constexpr auto baseAddress2109 = (baseType2109)(&$UILayer::constructor);
		using derivedType2109 = temp_name_find_better::ret2109(D<baseAddress2109, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2109 = (derivedType2109)(&D<baseAddress2109, UUID>::constructor);
        if (baseAddress2109 != derivedAddress2109) {
        	Interface::get()->logInfo("Adding hook at function UILayer::constructor", Severity::Debug);
            Interface::get()->addHook("UILayer::constructor", (void*)temp_name_find_better::address2109(), (void*)addresser::getNonVirtual(derivedAddress2109));
        }

    	using baseType2110 = temp_name_find_better::ret2110($UILayer::*)() ;
		constexpr auto baseAddress2110 = (baseType2110)(&$UILayer::destructor);
		using derivedType2110 = temp_name_find_better::ret2110(D<baseAddress2110, UUID>::*)() ;
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2110 = (derivedType2110)(&D<baseAddress2110, UUID>::destructor);
        if (baseAddress2110 != derivedAddress2110) {
        	Interface::get()->logInfo("Adding hook at function UILayer::destructor", Severity::Debug);
            Interface::get()->addHook("UILayer::destructor", (void*)temp_name_find_better::address2110(), (void*)addresser::getNonVirtual(derivedAddress2110));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $UndoObject : UndoObject, ModifierBase {
    $UndoObject(const $UndoObject& c) : UndoObject(c) {}
    $UndoObject() : $UndoObject(*this) {}
    ~$UndoObject() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($UndoObject);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

		using baseType2112 = temp_name_find_better::ret2112(*)(GameObject*, UndoCommand);
		constexpr auto baseAddress2112 = (baseType2112)(&UndoObject::create);
		using derivedType2112 = temp_name_find_better::ret2112(*)(GameObject*, UndoCommand);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2112 = (derivedType2112)(&D<baseAddress2112, UUID>::create);
        if (baseAddress2112 != derivedAddress2112) {
        	Interface::get()->logInfo("Adding hook at function UndoObject::create", Severity::Debug);
            Interface::get()->addHook("UndoObject::create", (void*)temp_name_find_better::address2112(), (void*)addresser::getNonVirtual(derivedAddress2112));
        }

		using baseType2113 = temp_name_find_better::ret2113(*)(cocos2d::CCArray*, UndoCommand);
		constexpr auto baseAddress2113 = (baseType2113)(&UndoObject::createWithArray);
		using derivedType2113 = temp_name_find_better::ret2113(*)(cocos2d::CCArray*, UndoCommand);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2113 = (derivedType2113)(&D<baseAddress2113, UUID>::createWithArray);
        if (baseAddress2113 != derivedAddress2113) {
        	Interface::get()->logInfo("Adding hook at function UndoObject::createWithArray", Severity::Debug);
            Interface::get()->addHook("UndoObject::createWithArray", (void*)temp_name_find_better::address2113(), (void*)addresser::getNonVirtual(derivedAddress2113));
        }

		using baseType2114 = temp_name_find_better::ret2114(*)(cocos2d::CCArray*, UndoCommand);
		constexpr auto baseAddress2114 = (baseType2114)(&UndoObject::createWithTransformObjects);
		using derivedType2114 = temp_name_find_better::ret2114(*)(cocos2d::CCArray*, UndoCommand);
		GEODE_VIRTUAL_CONSTEXPR auto derivedAddress2114 = (derivedType2114)(&D<baseAddress2114, UUID>::createWithTransformObjects);
        if (baseAddress2114 != derivedAddress2114) {
        	Interface::get()->logInfo("Adding hook at function UndoObject::createWithTransformObjects", Severity::Debug);
            Interface::get()->addHook("UndoObject::createWithTransformObjects", (void*)temp_name_find_better::address2114(), (void*)addresser::getNonVirtual(derivedAddress2114));
        }

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $UserInfoDelegate : UserInfoDelegate, ModifierBase {
    $UserInfoDelegate(const $UserInfoDelegate& c) : UserInfoDelegate(c) {}
    $UserInfoDelegate() : $UserInfoDelegate(*this) {}
    ~$UserInfoDelegate() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($UserInfoDelegate);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};

template<template <auto, typename> class D = BlankBase, typename UUID = void>
struct $VideoOptionsLayer : VideoOptionsLayer, ModifierBase {
    $VideoOptionsLayer(const $VideoOptionsLayer& c) : VideoOptionsLayer(c) {}
    $VideoOptionsLayer() : $VideoOptionsLayer(*this) {}
    ~$VideoOptionsLayer() {
    	cocos2d::CCDestructor::lock(this) = true;
    }
    GEODE_NOINLINE static inline auto& getAdditionalFields() {
    	static std::unordered_map<uintptr_t, container_t<>*> ret;
    	return ret;
    }
    GEODE_NOINLINE static inline auto& getOriginalDestructor() {
    	static uintptr_t ret;
    	return ret;
    }
    static void fieldCleanup(uintptr_t self) {
    	const uintptr_t begin = self + sizeof($VideoOptionsLayer);
    	const uintptr_t end = self + sizeof(D<0, UUID>);
    	for (uintptr_t i = begin; i < end; i += sizeof(uintptr_t)) {
    		if (getAdditionalFields().find(i) != getAdditionalFields().end()) {
    			delete getAdditionalFields().at(i);
    			getAdditionalFields().erase(i);
    		}
    	}
    	reinterpret_cast<void(*)(uintptr_t)>(getOriginalDestructor())(self);
    }

    static bool _apply() {

        return true;
    }
};
